{
  "files": {
    "linear_regression.py": "import numpy as np\nfrom dataclasses import dataclass\nfrom edtrace import text, link, plot\nfrom altair import Chart, Data\n\n\ndef main():\n    text(\"Last unit: tensors, backpropagation\")\n    text(\"This unit: the full pipeline of machine learning for **linear regression**.\")\n\n    prediction_task()\n    machine_learning_problem()\n\n    hypothesis_class()\n    loss_function()\n    optimization_algorithm()\n\n    text(\"Summary:\")\n    text(\"- Predictor: input -> output\")\n    text(\"- Training data: set of (input, output) pairs\")\n    text(\"- Learning algorithm: training data -> predictor\")\n    text(\"- Hypothesis class: set of possible predictors\")\n    text(\"- Loss function: how bad the predictor (parameters) fit the data\")\n    text(\"- Optimization algorithm: find parameters that minimize the loss function\")\n    text(\"- Gradient descent: iteratively updates the parameters in the direction of the negative gradient\")\n\n    \ndef prediction_task():\n    text(\"Predict how well you do on an exam given the number of hours you study\")\n    text(\"- **Input**: number of hours you study (e.g., 3)\")\n    text(\"- **Output**: your score on the exam (e.g., 70)\")\n\n    text(\"A **predictor** is a function that takes an input and produces an output.\")\n    text(\"Here's an example predictor:\")\n    def fixed_f(x: float) -> float:  # @inspect x\n        y = 2 * x + 1  # @inspect y\n        return y\n\n    text(\"Given an input `x`, we can get the output `y` by calling the predictor:\")\n    x1 = 1.0  # Input  @inspect x1\n    y1 = fixed_f(x1)  # Output  @inspect y1\n    x2 = 2.0  # Input  @inspect x2  @clear x1 y1\n    y2 = fixed_f(x2)  # Output  @inspect y2\n\n    text(\"We can also plot the predictor by passing in a range of inputs.\") # @clear x2 y2\n    values = [{\"x\": x, \"y\": fixed_f(x)} for x in np.linspace(0.0, 5.0, 30)]  # @stepover @inspect values\n    plot(Chart(Data(values=values)).mark_line().encode(x=\"x:Q\", y=\"y:Q\").to_dict())  # @clear values\n\n    text(\"But how do we get the predictor?\")\n\n\ndef machine_learning_problem():\n    text(\"The machine learning problem starts with training data, which demonstrates the task.\")\n    text(\"The **training data** is a set of examples.\")\n    text(\"Each **example** consists of an (input, output) pair.\")\n    training_data = get_training_data()  # @inspect training_data\n\n    text(\"A **learning algorithm** takes the training data and produces a predictor.\")\n\n    text(\"Key questions:\")\n    text(\"1. Which predictors are possible? **hypothesis class**\")\n    text(\"2. How good is a predictor? **loss function**\")\n    text(\"3. How do we compute the best predictor? **optimization algorithm**\")\n\n\n@dataclass(frozen=True)\nclass Example1D:\n    input: float\n    output: float\n\n\ndef get_training_data():\n    return [\n        Example1D(input=1, output=4),\n        Example1D(input=2, output=6),\n        Example1D(input=4, output=7),\n    ]\n\n\ndef hypothesis_class():\n    text(\"Which predictors are possible?\")\n\n    text(\"Before we looked at only one predictor:\")\n    def fixed_f(x: float) -> float:\n        return 2 * x + 1\n\n    text(\"But what we'd like to do is to define a set of *possible* predictors\")\n    text(\"...so that the learning algorithm can choose the best one.\")\n    text(\"To define a set of predictors, we first define the notion of **parameters**.\")\n\n    text(\"For linear predictors, each set of parameters has a **weight vector** and a **bias**.\")\n    params = Parameters1D(weight=3, bias=1)\n\n    text(\"Given a set of parameters, we can define a predictor:\")\n    def f(params: Parameters1D, x: float) -> float:  # @inspect params x\n        \"\"\"Applies the linear predictor given by `params` to input `x`.\"\"\"\n        y = params.weight * x + params.bias  # @inspect y\n        return y\n\n    text(\"Let's take an input and apply the predictor:\")\n    x1 = 1  #  @inspect x1\n    y1 = f(params, x1)  # @inspect y1\n\n    text(\"Here's another predictor:\")  # @clear params x1 y1\n    params = Parameters1D(weight=2, bias=0.2)\n    x1 = 1  #  @inspect x1\n    y1 = f(params, x1)  # @inspect y1\n\n    text(\"The **hypothesis class** is the set of all predictors you can get by choosing parameters (weight, bias).\")\n\n    text(\"In deep learning:\")\n    text(\"- Hypothesis class is a **model architecture**\")\n    text(\"- Predictor is a **model**\")\n\n    text(\"In general, the parameters is a collection of tensors.\")\n    text(\"For example, here are the parameters of the DeepSeek v3 model \"), link(\"https://arxiv.org/abs/2412.19437\")\n    link(\"https://huggingface.co/deepseek-ai/DeepSeek-V3?show_file_info=model.safetensors.index.json\", title=\"DeepSeek-V3 on Hugging Face\")\n\n\n@dataclass(frozen=True)\nclass Parameters1D:\n    weight: float\n    bias: float\n\n\ndef loss_function():\n    text(\"The next design decision is how to judge each of the many possible predictors.\")\n\n    text(\"Let's consider a predictor:\")\n    params = Parameters1D(weight=2, bias=1)  # @inspect params\n\n    values = [{\"x\": x, \"y\": f(params, x)} for x in np.linspace(0.0, 5.0, 30)]  # @stepover @inspect values\n    plot(Chart(Data(values=values)).mark_line().encode(x=\"x:Q\", y=\"y:Q\").to_dict())  # @clear values\n\n    text(\"Recall the training data:\")\n    training_data = get_training_data()  # @inspect training_data @stepover\n    \n    text(\"How well does `params` fit `training_data`?\")\n    text(\"We define a loss function that measures how unhappy one point is based on params.\")\n    loss = compute_loss(params, training_data[0])  # @inspect loss\n\n    text(\"The training loss is the average of the per-example losses of the training examples.\")  # @clear loss\n    train_loss = compute_train_loss(params, training_data)  # @inspect train_loss\n\n    text(\"Here's another predictor:\")\n    params2 = Parameters1D(weight=1, bias=1)  # @inspect params2\n    train_loss2 = compute_train_loss(params2, training_data)  # @inspect train_loss2 @stepover\n    text(\"It has higher training loss so it's worse.\")\n    \n\ndef f(params: Parameters1D, x: float) -> float:  # @inspect params x\n    \"\"\"Applies the linear predictor given by `params` to input `x`.\"\"\"\n    y = params.weight * x + params.bias  # @inspect y\n    return y\n\n\ndef compute_loss(params: Parameters1D, example: Example1D) -> float:  # @inspect params example\n    \"\"\"Computes the loss of the linear predictor given by `params` on example `example`.\"\"\"\n    residual = f(params, example.input) - example.output  # @inspect residual\n    loss = residual ** 2  # @inspect loss\n    return loss\n\n\ndef compute_grad_loss(params: Parameters1D, example: Example1D) -> np.ndarray:\n    \"\"\"Computes the gradient of the loss of the linear predictor given by `params` on `example`.\"\"\"\n    residual = (params.weight * example.input + params.bias) - example.output  # @inspect residual\n    loss = residual ** 2  # @inspect loss\n    # grad[0] = d loss / d weight\n    # grad[1] = d loss / d bias\n    grad = 2 * residual * np.array([example.input, 1])  # @inspect grad\n    return grad\n\n\ndef compute_train_loss(params: Parameters1D, training_data: list[Example1D]) -> float:  # @inspect params training_data\n    \"\"\"Computes the training loss of the linear predictor given by `params` on the `training_data`.\"\"\"\n    losses = [compute_loss(params, example) for example in training_data]  # @inspect losses @stepover\n    train_loss = np.mean(losses)  # @inspect train_loss\n    return train_loss\n\n\ndef compute_gradient_train_loss(params: Parameters1D, training_data: list[Example1D]) -> np.ndarray:  # @inspect params training_data\n    \"\"\"Computes the gradient of the training loss of the linear predictor given by `params` on the `training_data`.\"\"\"\n    grads = [compute_grad_loss(params, example) for example in training_data]  # @inspect grads  @stepover\n    grad = np.mean(grads, axis=0)  # @inspect grad\n    return grad\n\n\ndef optimization_algorithm():\n    text(\"Recall that for every set of parameters `params`, we can compute the training loss `train_loss`.\")\n\n    params = Parameters1D(weight=0, bias=1)  # @inspect params\n    training_data = get_training_data()  # @inspect training_data @stepover\n    train_loss = compute_train_loss(params, training_data)  # @inspect train_loss\n\n    text(\"We want to find the parameters that yield the lowest training loss.\")\n    text(\"This is an optimization problem.\")\n    text(\"Solving this optimization problem might seem daunting.\")\n\n    text(\"Recall that the gradient provides the direction that increases the function the most.\")\n    text(\"So we just have to go in the opposite direction of the gradient!\")\n\n    text(\"Let us compute the gradient.\")\n    grad = compute_gradient_train_loss(params, training_data)  # @inspect grad\n\n    text(\"Then we can take a little step in that direction.\")\n    learning_rate = 0.01\n    params = Parameters1D(  # @inspect params\n        weight=params.weight - learning_rate * grad[0],\n        bias=params.bias - learning_rate * grad[1],\n    )\n\n    text(\"Let's compute the training loss now:\")\n    new_train_loss = compute_train_loss(params, training_data)  # @inspect new_train_loss @stepover\n    text(\"It's lower than before!\")\n\n    text(\"If we do this repeatedly, that's the gradient descent algorithm.\")\n    gradient_descent()\n\n    text(\"Notes:\")\n    text(\"- Learning rate controls how fast you drive (tradeoff speed versus stability)\")\n    text(\"- Guaranteed to converge for convex functions, not for deep learning\")\n    text(\"- Other algorithms: stochastic gradient descent, Adam\")\n\n\ndef gradient_descent():\n    training_data = get_training_data()  # @stepover\n    params = Parameters1D(weight=0, bias=1)  # @inspect params\n    learning_rate = 0.01\n    for step in range(10):  # @inspect step\n        train_loss = compute_train_loss(params, training_data)  # @inspect train_loss @stepover\n        grad = compute_gradient_train_loss(params, training_data)  # @inspect grad @stepover\n        params = Parameters1D(  # @inspect params\n            weight=params.weight - learning_rate * grad[0],\n            bias=params.bias - learning_rate * grad[1],\n        )\n\n\nif __name__ == \"__main__\":\n    main()\n"
  },
  "hidden_line_numbers": {
    "linear_regression.py": []
  },
  "steps": [
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 7,
          "function_name": "main",
          "code": "def main():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 8,
          "function_name": "main",
          "code": "text(\"Last unit: tensors, backpropagation\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Last unit: tensors, backpropagation",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 9,
          "function_name": "main",
          "code": "text(\"This unit: the full pipeline of machine learning for **linear regression**.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This unit: the full pipeline of machine learning for **linear regression**.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 28,
          "function_name": "prediction_task",
          "code": "def prediction_task():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 29,
          "function_name": "prediction_task",
          "code": "text(\"Predict how well you do on an exam given the number of hours you study\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Predict how well you do on an exam given the number of hours you study",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 30,
          "function_name": "prediction_task",
          "code": "text(\"- **Input**: number of hours you study (e.g., 3)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- **Input**: number of hours you study (e.g., 3)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 31,
          "function_name": "prediction_task",
          "code": "text(\"- **Output**: your score on the exam (e.g., 70)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- **Output**: your score on the exam (e.g., 70)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 33,
          "function_name": "prediction_task",
          "code": "text(\"A **predictor** is a function that takes an input and produces an output.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "A **predictor** is a function that takes an input and produces an output.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 34,
          "function_name": "prediction_task",
          "code": "text(\"Here's an example predictor:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Here's an example predictor:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 35,
          "function_name": "prediction_task",
          "code": "def fixed_f(x: float) -> float:  # @inspect x"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 39,
          "function_name": "prediction_task",
          "code": "text(\"Given an input `x`, we can get the output `y` by calling the predictor:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Given an input `x`, we can get the output `y` by calling the predictor:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 40,
          "function_name": "prediction_task",
          "code": "x1 = 1.0  # Input  @inspect x1"
        }
      ],
      "env": {
        "x1": {
          "type": "float",
          "contents": 1.0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 41,
          "function_name": "prediction_task",
          "code": "y1 = fixed_f(x1)  # Output  @inspect y1"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 41,
          "function_name": "prediction_task",
          "code": "y1 = fixed_f(x1)  # Output  @inspect y1"
        },
        {
          "path": "linear_regression.py",
          "line_number": 35,
          "function_name": "fixed_f",
          "code": "def fixed_f(x: float) -> float:  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "float",
          "contents": 1.0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 41,
          "function_name": "prediction_task",
          "code": "y1 = fixed_f(x1)  # Output  @inspect y1"
        },
        {
          "path": "linear_regression.py",
          "line_number": 36,
          "function_name": "fixed_f",
          "code": "y = 2 * x + 1  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "float",
          "contents": 3.0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 41,
          "function_name": "prediction_task",
          "code": "y1 = fixed_f(x1)  # Output  @inspect y1"
        },
        {
          "path": "linear_regression.py",
          "line_number": 37,
          "function_name": "fixed_f",
          "code": "return y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 41,
          "function_name": "prediction_task",
          "code": "y1 = fixed_f(x1)  # Output  @inspect y1"
        }
      ],
      "env": {
        "y1": {
          "type": "float",
          "contents": 3.0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 42,
          "function_name": "prediction_task",
          "code": "x2 = 2.0  # Input  @inspect x2  @clear x1 y1"
        }
      ],
      "env": {
        "x2": {
          "type": "float",
          "contents": 2.0,
          "dtype": null,
          "shape": null
        },
        "x1": null,
        "y1": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 43,
          "function_name": "prediction_task",
          "code": "y2 = fixed_f(x2)  # Output  @inspect y2"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 43,
          "function_name": "prediction_task",
          "code": "y2 = fixed_f(x2)  # Output  @inspect y2"
        },
        {
          "path": "linear_regression.py",
          "line_number": 35,
          "function_name": "fixed_f",
          "code": "def fixed_f(x: float) -> float:  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "float",
          "contents": 2.0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 43,
          "function_name": "prediction_task",
          "code": "y2 = fixed_f(x2)  # Output  @inspect y2"
        },
        {
          "path": "linear_regression.py",
          "line_number": 36,
          "function_name": "fixed_f",
          "code": "y = 2 * x + 1  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "float",
          "contents": 5.0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 43,
          "function_name": "prediction_task",
          "code": "y2 = fixed_f(x2)  # Output  @inspect y2"
        },
        {
          "path": "linear_regression.py",
          "line_number": 37,
          "function_name": "fixed_f",
          "code": "return y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 43,
          "function_name": "prediction_task",
          "code": "y2 = fixed_f(x2)  # Output  @inspect y2"
        }
      ],
      "env": {
        "y2": {
          "type": "float",
          "contents": 5.0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 45,
          "function_name": "prediction_task",
          "code": "text(\"We can also plot the predictor by passing in a range of inputs.\") # @clear x2 y2"
        }
      ],
      "env": {
        "x2": null,
        "y2": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "We can also plot the predictor by passing in a range of inputs.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 46,
          "function_name": "prediction_task",
          "code": "values = [{\"x\": x, \"y\": fixed_f(x)} for x in np.linspace(0.0, 5.0, 30)]  # @stepover @inspect values"
        }
      ],
      "env": {
        "values": {
          "type": "list",
          "contents": [
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 0.0,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 1.0,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 0.1724137931034483,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 1.3448275862068966,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 0.3448275862068966,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 1.6896551724137931,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 0.5172413793103449,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 2.0344827586206895,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 0.6896551724137931,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 2.3793103448275863,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 0.8620689655172414,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 2.724137931034483,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 1.0344827586206897,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 3.0689655172413794,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 1.206896551724138,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 3.413793103448276,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 1.3793103448275863,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 3.7586206896551726,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 1.5517241379310347,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 4.103448275862069,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 1.7241379310344829,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 4.448275862068966,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 1.896551724137931,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 4.793103448275862,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 2.0689655172413794,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 5.137931034482759,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 2.241379310344828,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 5.482758620689656,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 2.413793103448276,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 5.827586206896552,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 2.586206896551724,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 6.172413793103448,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 2.7586206896551726,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 6.517241379310345,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 2.931034482758621,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 6.862068965517242,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 3.1034482758620694,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 7.206896551724139,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 3.2758620689655173,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 7.551724137931035,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 3.4482758620689657,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 7.8965517241379315,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 3.620689655172414,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 8.24137931034483,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 3.793103448275862,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 8.586206896551724,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 3.9655172413793105,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 8.931034482758621,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 4.137931034482759,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 9.275862068965518,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 4.310344827586207,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 9.620689655172415,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 4.482758620689656,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 9.965517241379311,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 4.655172413793104,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 10.310344827586208,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 4.827586206896552,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 10.655172413793103,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 5.0,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 11.0,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 47,
          "function_name": "prediction_task",
          "code": "plot(Chart(Data(values=values)).mark_line().encode(x=\"x:Q\", y=\"y:Q\").to_dict())  # @clear values"
        }
      ],
      "env": {
        "values": null
      },
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "x": 0.0,
                  "y": 1.0
                },
                {
                  "x": 0.1724137931034483,
                  "y": 1.3448275862068966
                },
                {
                  "x": 0.3448275862068966,
                  "y": 1.6896551724137931
                },
                {
                  "x": 0.5172413793103449,
                  "y": 2.0344827586206895
                },
                {
                  "x": 0.6896551724137931,
                  "y": 2.3793103448275863
                },
                {
                  "x": 0.8620689655172414,
                  "y": 2.724137931034483
                },
                {
                  "x": 1.0344827586206897,
                  "y": 3.0689655172413794
                },
                {
                  "x": 1.206896551724138,
                  "y": 3.413793103448276
                },
                {
                  "x": 1.3793103448275863,
                  "y": 3.7586206896551726
                },
                {
                  "x": 1.5517241379310347,
                  "y": 4.103448275862069
                },
                {
                  "x": 1.7241379310344829,
                  "y": 4.448275862068966
                },
                {
                  "x": 1.896551724137931,
                  "y": 4.793103448275862
                },
                {
                  "x": 2.0689655172413794,
                  "y": 5.137931034482759
                },
                {
                  "x": 2.241379310344828,
                  "y": 5.482758620689656
                },
                {
                  "x": 2.413793103448276,
                  "y": 5.827586206896552
                },
                {
                  "x": 2.586206896551724,
                  "y": 6.172413793103448
                },
                {
                  "x": 2.7586206896551726,
                  "y": 6.517241379310345
                },
                {
                  "x": 2.931034482758621,
                  "y": 6.862068965517242
                },
                {
                  "x": 3.1034482758620694,
                  "y": 7.206896551724139
                },
                {
                  "x": 3.2758620689655173,
                  "y": 7.551724137931035
                },
                {
                  "x": 3.4482758620689657,
                  "y": 7.8965517241379315
                },
                {
                  "x": 3.620689655172414,
                  "y": 8.24137931034483
                },
                {
                  "x": 3.793103448275862,
                  "y": 8.586206896551724
                },
                {
                  "x": 3.9655172413793105,
                  "y": 8.931034482758621
                },
                {
                  "x": 4.137931034482759,
                  "y": 9.275862068965518
                },
                {
                  "x": 4.310344827586207,
                  "y": 9.620689655172415
                },
                {
                  "x": 4.482758620689656,
                  "y": 9.965517241379311
                },
                {
                  "x": 4.655172413793104,
                  "y": 10.310344827586208
                },
                {
                  "x": 4.827586206896552,
                  "y": 10.655172413793103
                },
                {
                  "x": 5.0,
                  "y": 11.0
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "x",
                "type": "quantitative"
              },
              "y": {
                "field": "y",
                "type": "quantitative"
              }
            },
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 49,
          "function_name": "prediction_task",
          "code": "text(\"But how do we get the predictor?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "But how do we get the predictor?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 11,
          "function_name": "main",
          "code": "prediction_task()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 12,
          "function_name": "main",
          "code": "machine_learning_problem()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 12,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 52,
          "function_name": "machine_learning_problem",
          "code": "def machine_learning_problem():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 12,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 53,
          "function_name": "machine_learning_problem",
          "code": "text(\"The machine learning problem starts with training data, which demonstrates the task.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The machine learning problem starts with training data, which demonstrates the task.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 12,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 54,
          "function_name": "machine_learning_problem",
          "code": "text(\"The **training data** is a set of examples.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The **training data** is a set of examples.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 12,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 55,
          "function_name": "machine_learning_problem",
          "code": "text(\"Each **example** consists of an (input, output) pair.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Each **example** consists of an (input, output) pair.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 12,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 56,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 12,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 56,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_regression.py",
          "line_number": 72,
          "function_name": "get_training_data",
          "code": "def get_training_data():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 12,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 56,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_regression.py",
          "line_number": 74,
          "function_name": "get_training_data",
          "code": "Example1D(input=1, output=4),"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 12,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 56,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_regression.py",
          "line_number": 75,
          "function_name": "get_training_data",
          "code": "Example1D(input=2, output=6),"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 12,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 56,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_regression.py",
          "line_number": 76,
          "function_name": "get_training_data",
          "code": "Example1D(input=4, output=7),"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 12,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 56,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_regression.py",
          "line_number": 73,
          "function_name": "get_training_data",
          "code": "return ["
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 12,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 56,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        }
      ],
      "env": {
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_regression.Example1D",
              "contents": {
                "input": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "output": {
                  "type": "int",
                  "contents": 4,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_regression.Example1D",
              "contents": {
                "input": {
                  "type": "int",
                  "contents": 2,
                  "dtype": null,
                  "shape": null
                },
                "output": {
                  "type": "int",
                  "contents": 6,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_regression.Example1D",
              "contents": {
                "input": {
                  "type": "int",
                  "contents": 4,
                  "dtype": null,
                  "shape": null
                },
                "output": {
                  "type": "int",
                  "contents": 7,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 12,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 58,
          "function_name": "machine_learning_problem",
          "code": "text(\"A **learning algorithm** takes the training data and produces a predictor.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "A **learning algorithm** takes the training data and produces a predictor.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 12,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 60,
          "function_name": "machine_learning_problem",
          "code": "text(\"Key questions:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Key questions:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 12,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 61,
          "function_name": "machine_learning_problem",
          "code": "text(\"1. Which predictors are possible? **hypothesis class**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "1. Which predictors are possible? **hypothesis class**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 12,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 62,
          "function_name": "machine_learning_problem",
          "code": "text(\"2. How good is a predictor? **loss function**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "2. How good is a predictor? **loss function**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 12,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 63,
          "function_name": "machine_learning_problem",
          "code": "text(\"3. How do we compute the best predictor? **optimization algorithm**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "3. How do we compute the best predictor? **optimization algorithm**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 12,
          "function_name": "main",
          "code": "machine_learning_problem()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 80,
          "function_name": "hypothesis_class",
          "code": "def hypothesis_class():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 81,
          "function_name": "hypothesis_class",
          "code": "text(\"Which predictors are possible?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Which predictors are possible?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 83,
          "function_name": "hypothesis_class",
          "code": "text(\"Before we looked at only one predictor:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Before we looked at only one predictor:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 84,
          "function_name": "hypothesis_class",
          "code": "def fixed_f(x: float) -> float:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 87,
          "function_name": "hypothesis_class",
          "code": "text(\"But what we'd like to do is to define a set of *possible* predictors\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "But what we'd like to do is to define a set of *possible* predictors",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 88,
          "function_name": "hypothesis_class",
          "code": "text(\"...so that the learning algorithm can choose the best one.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...so that the learning algorithm can choose the best one.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 89,
          "function_name": "hypothesis_class",
          "code": "text(\"To define a set of predictors, we first define the notion of **parameters**.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "To define a set of predictors, we first define the notion of **parameters**.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 91,
          "function_name": "hypothesis_class",
          "code": "text(\"For linear predictors, each set of parameters has a **weight vector** and a **bias**.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "For linear predictors, each set of parameters has a **weight vector** and a **bias**.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 92,
          "function_name": "hypothesis_class",
          "code": "params = Parameters1D(weight=3, bias=1)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 94,
          "function_name": "hypothesis_class",
          "code": "text(\"Given a set of parameters, we can define a predictor:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Given a set of parameters, we can define a predictor:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 95,
          "function_name": "hypothesis_class",
          "code": "def f(params: Parameters1D, x: float) -> float:  # @inspect params x"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "int",
              "contents": 3,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 100,
          "function_name": "hypothesis_class",
          "code": "text(\"Let's take an input and apply the predictor:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's take an input and apply the predictor:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 101,
          "function_name": "hypothesis_class",
          "code": "x1 = 1  #  @inspect x1"
        }
      ],
      "env": {
        "x1": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 102,
          "function_name": "hypothesis_class",
          "code": "y1 = f(params, x1)  # @inspect y1"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 102,
          "function_name": "hypothesis_class",
          "code": "y1 = f(params, x1)  # @inspect y1"
        },
        {
          "path": "linear_regression.py",
          "line_number": 95,
          "function_name": "f",
          "code": "def f(params: Parameters1D, x: float) -> float:  # @inspect params x"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "int",
              "contents": 3,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "x": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 102,
          "function_name": "hypothesis_class",
          "code": "y1 = f(params, x1)  # @inspect y1"
        },
        {
          "path": "linear_regression.py",
          "line_number": 97,
          "function_name": "f",
          "code": "y = params.weight * x + params.bias  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "int",
          "contents": 4,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 102,
          "function_name": "hypothesis_class",
          "code": "y1 = f(params, x1)  # @inspect y1"
        },
        {
          "path": "linear_regression.py",
          "line_number": 98,
          "function_name": "f",
          "code": "return y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 102,
          "function_name": "hypothesis_class",
          "code": "y1 = f(params, x1)  # @inspect y1"
        }
      ],
      "env": {
        "y1": {
          "type": "int",
          "contents": 4,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 104,
          "function_name": "hypothesis_class",
          "code": "text(\"Here's another predictor:\")  # @clear params x1 y1"
        }
      ],
      "env": {
        "params": null,
        "x1": null,
        "y1": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "Here's another predictor:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 105,
          "function_name": "hypothesis_class",
          "code": "params = Parameters1D(weight=2, bias=0.2)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 106,
          "function_name": "hypothesis_class",
          "code": "x1 = 1  #  @inspect x1"
        }
      ],
      "env": {
        "x1": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 107,
          "function_name": "hypothesis_class",
          "code": "y1 = f(params, x1)  # @inspect y1"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 107,
          "function_name": "hypothesis_class",
          "code": "y1 = f(params, x1)  # @inspect y1"
        },
        {
          "path": "linear_regression.py",
          "line_number": 95,
          "function_name": "f",
          "code": "def f(params: Parameters1D, x: float) -> float:  # @inspect params x"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "int",
              "contents": 2,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "float",
              "contents": 0.2,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "x": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 107,
          "function_name": "hypothesis_class",
          "code": "y1 = f(params, x1)  # @inspect y1"
        },
        {
          "path": "linear_regression.py",
          "line_number": 97,
          "function_name": "f",
          "code": "y = params.weight * x + params.bias  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "float",
          "contents": 2.2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 107,
          "function_name": "hypothesis_class",
          "code": "y1 = f(params, x1)  # @inspect y1"
        },
        {
          "path": "linear_regression.py",
          "line_number": 98,
          "function_name": "f",
          "code": "return y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 107,
          "function_name": "hypothesis_class",
          "code": "y1 = f(params, x1)  # @inspect y1"
        }
      ],
      "env": {
        "y1": {
          "type": "float",
          "contents": 2.2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 109,
          "function_name": "hypothesis_class",
          "code": "text(\"The **hypothesis class** is the set of all predictors you can get by choosing parameters (weight, bias).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The **hypothesis class** is the set of all predictors you can get by choosing parameters (weight, bias).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 111,
          "function_name": "hypothesis_class",
          "code": "text(\"In deep learning:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In deep learning:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 112,
          "function_name": "hypothesis_class",
          "code": "text(\"- Hypothesis class is a **model architecture**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Hypothesis class is a **model architecture**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 113,
          "function_name": "hypothesis_class",
          "code": "text(\"- Predictor is a **model**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Predictor is a **model**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 115,
          "function_name": "hypothesis_class",
          "code": "text(\"In general, the parameters is a collection of tensors.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In general, the parameters is a collection of tensors.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 116,
          "function_name": "hypothesis_class",
          "code": "text(\"For example, here are the parameters of the DeepSeek v3 model \"), link(\"https://arxiv.org/abs/2412.19437\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "For example, here are the parameters of the DeepSeek v3 model ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "DeepSeek-V3 Technical Report",
            "authors": [
              "DeepSeek-AI",
              "Aixin Liu",
              "Bei Feng",
              "Bing Xue",
              "Bingxuan Wang",
              "Bochao Wu",
              "Chengda Lu",
              "Chenggang Zhao",
              "Chengqi Deng",
              "Chenyu Zhang",
              "Chong Ruan",
              "Damai Dai",
              "Daya Guo",
              "Dejian Yang",
              "Deli Chen",
              "Dongjie Ji",
              "Erhang Li",
              "Fangyun Lin",
              "Fucong Dai",
              "Fuli Luo",
              "Guangbo Hao",
              "Guanting Chen",
              "Guowei Li",
              "H. Zhang",
              "Han Bao",
              "Hanwei Xu",
              "Haocheng Wang",
              "Haowei Zhang",
              "Honghui Ding",
              "Huajian Xin",
              "Huazuo Gao",
              "Hui Li",
              "Hui Qu",
              "J. L. Cai",
              "Jian Liang",
              "Jianzhong Guo",
              "Jiaqi Ni",
              "Jiashi Li",
              "Jiawei Wang",
              "Jin Chen",
              "Jingchang Chen",
              "Jingyang Yuan",
              "Junjie Qiu",
              "Junlong Li",
              "Junxiao Song",
              "Kai Dong",
              "Kai Hu",
              "Kaige Gao",
              "Kang Guan",
              "Kexin Huang",
              "Kuai Yu",
              "Lean Wang",
              "Lecong Zhang",
              "Lei Xu",
              "Leyi Xia",
              "Liang Zhao",
              "Litong Wang",
              "Liyue Zhang",
              "Meng Li",
              "Miaojun Wang",
              "Mingchuan Zhang",
              "Minghua Zhang",
              "Minghui Tang",
              "Mingming Li",
              "Ning Tian",
              "Panpan Huang",
              "Peiyi Wang",
              "Peng Zhang",
              "Qiancheng Wang",
              "Qihao Zhu",
              "Qinyu Chen",
              "Qiushi Du",
              "R. J. Chen",
              "R. L. Jin",
              "Ruiqi Ge",
              "Ruisong Zhang",
              "Ruizhe Pan",
              "Runji Wang",
              "Runxin Xu",
              "Ruoyu Zhang",
              "Ruyi Chen",
              "S. S. Li",
              "Shanghao Lu",
              "Shangyan Zhou",
              "Shanhuang Chen",
              "Shaoqing Wu",
              "Shengfeng Ye",
              "Shengfeng Ye",
              "Shirong Ma",
              "Shiyu Wang",
              "Shuang Zhou",
              "Shuiping Yu",
              "Shunfeng Zhou",
              "Shuting Pan",
              "T. Wang",
              "Tao Yun",
              "Tian Pei",
              "Tianyu Sun",
              "W. L. Xiao",
              "Wangding Zeng",
              "Wanjia Zhao",
              "Wei An",
              "Wen Liu",
              "Wenfeng Liang",
              "Wenjun Gao",
              "Wenqin Yu",
              "Wentao Zhang",
              "X. Q. Li",
              "Xiangyue Jin",
              "Xianzu Wang",
              "Xiao Bi",
              "Xiaodong Liu",
              "Xiaohan Wang",
              "Xiaojin Shen",
              "Xiaokang Chen",
              "Xiaokang Zhang",
              "Xiaosha Chen",
              "Xiaotao Nie",
              "Xiaowen Sun",
              "Xiaoxiang Wang",
              "Xin Cheng",
              "Xin Liu",
              "Xin Xie",
              "Xingchao Liu",
              "Xingkai Yu",
              "Xinnan Song",
              "Xinxia Shan",
              "Xinyi Zhou",
              "Xinyu Yang",
              "Xinyuan Li",
              "Xuecheng Su",
              "Xuheng Lin",
              "Y. K. Li",
              "Y. Q. Wang",
              "Y. X. Wei",
              "Y. X. Zhu",
              "Yang Zhang",
              "Yanhong Xu",
              "Yanhong Xu",
              "Yanping Huang",
              "Yao Li",
              "Yao Zhao",
              "Yaofeng Sun",
              "Yaohui Li",
              "Yaohui Wang",
              "Yi Yu",
              "Yi Zheng",
              "Yichao Zhang",
              "Yifan Shi",
              "Yiliang Xiong",
              "Ying He",
              "Ying Tang",
              "Yishi Piao",
              "Yisong Wang",
              "Yixuan Tan",
              "Yiyang Ma",
              "Yiyuan Liu",
              "Yongqiang Guo",
              "Yu Wu",
              "Yuan Ou",
              "Yuchen Zhu",
              "Yuduan Wang",
              "Yue Gong",
              "Yuheng Zou",
              "Yujia He",
              "Yukun Zha",
              "Yunfan Xiong",
              "Yunxian Ma",
              "Yuting Yan",
              "Yuxiang Luo",
              "Yuxiang You",
              "Yuxuan Liu",
              "Yuyang Zhou",
              "Z. F. Wu",
              "Z. Z. Ren",
              "Zehui Ren",
              "Zhangli Sha",
              "Zhe Fu",
              "Zhean Xu",
              "Zhen Huang",
              "Zhen Zhang",
              "Zhenda Xie",
              "Zhengyan Zhang",
              "Zhewen Hao",
              "Zhibin Gou",
              "Zhicheng Ma",
              "Zhigang Yan",
              "Zhihong Shao",
              "Zhipeng Xu",
              "Zhiyu Wu",
              "Zhongyu Zhang",
              "Zhuoshu Li",
              "Zihui Gu",
              "Zijia Zhu",
              "Zijun Liu",
              "Zilin Li",
              "Ziwei Xie",
              "Ziyang Song",
              "Ziyi Gao",
              "Zizheng Pan"
            ],
            "organization": null,
            "date": "2024-12-27T04:03:16Z",
            "url": "https://arxiv.org/abs/2412.19437",
            "description": "We present DeepSeek-V3, a strong Mixture-of-Experts (MoE) language model with 671B total parameters with 37B activated for each token. To achieve efficient inference and cost-effective training, DeepSeek-V3 adopts Multi-head Latent Attention (MLA) and DeepSeekMoE architectures, which were thoroughly validated in DeepSeek-V2. Furthermore, DeepSeek-V3 pioneers an auxiliary-loss-free strategy for load balancing and sets a multi-token prediction training objective for stronger performance. We pre-train DeepSeek-V3 on 14.8 trillion diverse and high-quality tokens, followed by Supervised Fine-Tuning and Reinforcement Learning stages to fully harness its capabilities. Comprehensive evaluations reveal that DeepSeek-V3 outperforms other open-source models and achieves performance comparable to leading closed-source models. Despite its excellent performance, DeepSeek-V3 requires only 2.788M H800 GPU hours for its full training. In addition, its training process is remarkably stable. Throughout the entire training process, we did not experience any irrecoverable loss spikes or perform any rollbacks. The model checkpoints are available at https://github.com/deepseek-ai/DeepSeek-V3.",
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 117,
          "function_name": "hypothesis_class",
          "code": "link(\"https://huggingface.co/deepseek-ai/DeepSeek-V3?show_file_info=model.safetensors.index.json\", title=\"DeepSeek-V3 on Hugging Face\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "DeepSeek-V3 on Hugging Face",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://huggingface.co/deepseek-ai/DeepSeek-V3?show_file_info=model.safetensors.index.json",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 14,
          "function_name": "main",
          "code": "hypothesis_class()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 126,
          "function_name": "loss_function",
          "code": "def loss_function():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 127,
          "function_name": "loss_function",
          "code": "text(\"The next design decision is how to judge each of the many possible predictors.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The next design decision is how to judge each of the many possible predictors.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 129,
          "function_name": "loss_function",
          "code": "text(\"Let's consider a predictor:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's consider a predictor:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 130,
          "function_name": "loss_function",
          "code": "params = Parameters1D(weight=2, bias=1)  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "int",
              "contents": 2,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 132,
          "function_name": "loss_function",
          "code": "values = [{\"x\": x, \"y\": f(params, x)} for x in np.linspace(0.0, 5.0, 30)]  # @stepover @inspect values"
        }
      ],
      "env": {
        "values": {
          "type": "list",
          "contents": [
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 0.0,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 1.0,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 0.1724137931034483,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 1.3448275862068966,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 0.3448275862068966,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 1.6896551724137931,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 0.5172413793103449,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 2.0344827586206895,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 0.6896551724137931,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 2.3793103448275863,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 0.8620689655172414,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 2.724137931034483,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 1.0344827586206897,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 3.0689655172413794,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 1.206896551724138,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 3.413793103448276,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 1.3793103448275863,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 3.7586206896551726,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 1.5517241379310347,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 4.103448275862069,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 1.7241379310344829,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 4.448275862068966,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 1.896551724137931,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 4.793103448275862,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 2.0689655172413794,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 5.137931034482759,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 2.241379310344828,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 5.482758620689656,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 2.413793103448276,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 5.827586206896552,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 2.586206896551724,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 6.172413793103448,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 2.7586206896551726,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 6.517241379310345,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 2.931034482758621,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 6.862068965517242,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 3.1034482758620694,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 7.206896551724139,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 3.2758620689655173,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 7.551724137931035,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 3.4482758620689657,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 7.8965517241379315,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 3.620689655172414,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 8.24137931034483,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 3.793103448275862,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 8.586206896551724,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 3.9655172413793105,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 8.931034482758621,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 4.137931034482759,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 9.275862068965518,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 4.310344827586207,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 9.620689655172415,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 4.482758620689656,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 9.965517241379311,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 4.655172413793104,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 10.310344827586208,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 4.827586206896552,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 10.655172413793103,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "dict",
              "contents": {
                "x": {
                  "type": "numpy.float64",
                  "contents": 5.0,
                  "dtype": null,
                  "shape": null
                },
                "y": {
                  "type": "numpy.float64",
                  "contents": 11.0,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 133,
          "function_name": "loss_function",
          "code": "plot(Chart(Data(values=values)).mark_line().encode(x=\"x:Q\", y=\"y:Q\").to_dict())  # @clear values"
        }
      ],
      "env": {
        "values": null
      },
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "x": 0.0,
                  "y": 1.0
                },
                {
                  "x": 0.1724137931034483,
                  "y": 1.3448275862068966
                },
                {
                  "x": 0.3448275862068966,
                  "y": 1.6896551724137931
                },
                {
                  "x": 0.5172413793103449,
                  "y": 2.0344827586206895
                },
                {
                  "x": 0.6896551724137931,
                  "y": 2.3793103448275863
                },
                {
                  "x": 0.8620689655172414,
                  "y": 2.724137931034483
                },
                {
                  "x": 1.0344827586206897,
                  "y": 3.0689655172413794
                },
                {
                  "x": 1.206896551724138,
                  "y": 3.413793103448276
                },
                {
                  "x": 1.3793103448275863,
                  "y": 3.7586206896551726
                },
                {
                  "x": 1.5517241379310347,
                  "y": 4.103448275862069
                },
                {
                  "x": 1.7241379310344829,
                  "y": 4.448275862068966
                },
                {
                  "x": 1.896551724137931,
                  "y": 4.793103448275862
                },
                {
                  "x": 2.0689655172413794,
                  "y": 5.137931034482759
                },
                {
                  "x": 2.241379310344828,
                  "y": 5.482758620689656
                },
                {
                  "x": 2.413793103448276,
                  "y": 5.827586206896552
                },
                {
                  "x": 2.586206896551724,
                  "y": 6.172413793103448
                },
                {
                  "x": 2.7586206896551726,
                  "y": 6.517241379310345
                },
                {
                  "x": 2.931034482758621,
                  "y": 6.862068965517242
                },
                {
                  "x": 3.1034482758620694,
                  "y": 7.206896551724139
                },
                {
                  "x": 3.2758620689655173,
                  "y": 7.551724137931035
                },
                {
                  "x": 3.4482758620689657,
                  "y": 7.8965517241379315
                },
                {
                  "x": 3.620689655172414,
                  "y": 8.24137931034483
                },
                {
                  "x": 3.793103448275862,
                  "y": 8.586206896551724
                },
                {
                  "x": 3.9655172413793105,
                  "y": 8.931034482758621
                },
                {
                  "x": 4.137931034482759,
                  "y": 9.275862068965518
                },
                {
                  "x": 4.310344827586207,
                  "y": 9.620689655172415
                },
                {
                  "x": 4.482758620689656,
                  "y": 9.965517241379311
                },
                {
                  "x": 4.655172413793104,
                  "y": 10.310344827586208
                },
                {
                  "x": 4.827586206896552,
                  "y": 10.655172413793103
                },
                {
                  "x": 5.0,
                  "y": 11.0
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "x",
                "type": "quantitative"
              },
              "y": {
                "field": "y",
                "type": "quantitative"
              }
            },
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 135,
          "function_name": "loss_function",
          "code": "text(\"Recall the training data:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall the training data:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 136,
          "function_name": "loss_function",
          "code": "training_data = get_training_data()  # @inspect training_data @stepover"
        }
      ],
      "env": {
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_regression.Example1D",
              "contents": {
                "input": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "output": {
                  "type": "int",
                  "contents": 4,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_regression.Example1D",
              "contents": {
                "input": {
                  "type": "int",
                  "contents": 2,
                  "dtype": null,
                  "shape": null
                },
                "output": {
                  "type": "int",
                  "contents": 6,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_regression.Example1D",
              "contents": {
                "input": {
                  "type": "int",
                  "contents": 4,
                  "dtype": null,
                  "shape": null
                },
                "output": {
                  "type": "int",
                  "contents": 7,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 138,
          "function_name": "loss_function",
          "code": "text(\"How well does `params` fit `training_data`?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "How well does `params` fit `training_data`?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 139,
          "function_name": "loss_function",
          "code": "text(\"We define a loss function that measures how unhappy one point is based on params.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We define a loss function that measures how unhappy one point is based on params.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 140,
          "function_name": "loss_function",
          "code": "loss = compute_loss(params, training_data[0])  # @inspect loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 140,
          "function_name": "loss_function",
          "code": "loss = compute_loss(params, training_data[0])  # @inspect loss"
        },
        {
          "path": "linear_regression.py",
          "line_number": 157,
          "function_name": "compute_loss",
          "code": "def compute_loss(params: Parameters1D, example: Example1D) -> float:  # @inspect params example"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "int",
              "contents": 2,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "example": {
          "type": "linear_regression.Example1D",
          "contents": {
            "input": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            "output": {
              "type": "int",
              "contents": 4,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 140,
          "function_name": "loss_function",
          "code": "loss = compute_loss(params, training_data[0])  # @inspect loss"
        },
        {
          "path": "linear_regression.py",
          "line_number": 159,
          "function_name": "compute_loss",
          "code": "residual = f(params, example.input) - example.output  # @inspect residual"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 140,
          "function_name": "loss_function",
          "code": "loss = compute_loss(params, training_data[0])  # @inspect loss"
        },
        {
          "path": "linear_regression.py",
          "line_number": 159,
          "function_name": "compute_loss",
          "code": "residual = f(params, example.input) - example.output  # @inspect residual"
        },
        {
          "path": "linear_regression.py",
          "line_number": 151,
          "function_name": "f",
          "code": "def f(params: Parameters1D, x: float) -> float:  # @inspect params x"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "int",
              "contents": 2,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "x": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 140,
          "function_name": "loss_function",
          "code": "loss = compute_loss(params, training_data[0])  # @inspect loss"
        },
        {
          "path": "linear_regression.py",
          "line_number": 159,
          "function_name": "compute_loss",
          "code": "residual = f(params, example.input) - example.output  # @inspect residual"
        },
        {
          "path": "linear_regression.py",
          "line_number": 153,
          "function_name": "f",
          "code": "y = params.weight * x + params.bias  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 140,
          "function_name": "loss_function",
          "code": "loss = compute_loss(params, training_data[0])  # @inspect loss"
        },
        {
          "path": "linear_regression.py",
          "line_number": 159,
          "function_name": "compute_loss",
          "code": "residual = f(params, example.input) - example.output  # @inspect residual"
        },
        {
          "path": "linear_regression.py",
          "line_number": 154,
          "function_name": "f",
          "code": "return y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 140,
          "function_name": "loss_function",
          "code": "loss = compute_loss(params, training_data[0])  # @inspect loss"
        },
        {
          "path": "linear_regression.py",
          "line_number": 159,
          "function_name": "compute_loss",
          "code": "residual = f(params, example.input) - example.output  # @inspect residual"
        }
      ],
      "env": {
        "residual": {
          "type": "int",
          "contents": -1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 140,
          "function_name": "loss_function",
          "code": "loss = compute_loss(params, training_data[0])  # @inspect loss"
        },
        {
          "path": "linear_regression.py",
          "line_number": 160,
          "function_name": "compute_loss",
          "code": "loss = residual ** 2  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 140,
          "function_name": "loss_function",
          "code": "loss = compute_loss(params, training_data[0])  # @inspect loss"
        },
        {
          "path": "linear_regression.py",
          "line_number": 161,
          "function_name": "compute_loss",
          "code": "return loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 140,
          "function_name": "loss_function",
          "code": "loss = compute_loss(params, training_data[0])  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 142,
          "function_name": "loss_function",
          "code": "text(\"The training loss is the average of the per-example losses of the training examples.\")  # @clear loss"
        }
      ],
      "env": {
        "loss": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "The training loss is the average of the per-example losses of the training examples.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 143,
          "function_name": "loss_function",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 143,
          "function_name": "loss_function",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_regression.py",
          "line_number": 174,
          "function_name": "compute_train_loss",
          "code": "def compute_train_loss(params: Parameters1D, training_data: list[Example1D]) -> float:  # @inspect params training_data"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "int",
              "contents": 2,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_regression.Example1D",
              "contents": {
                "input": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "output": {
                  "type": "int",
                  "contents": 4,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_regression.Example1D",
              "contents": {
                "input": {
                  "type": "int",
                  "contents": 2,
                  "dtype": null,
                  "shape": null
                },
                "output": {
                  "type": "int",
                  "contents": 6,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_regression.Example1D",
              "contents": {
                "input": {
                  "type": "int",
                  "contents": 4,
                  "dtype": null,
                  "shape": null
                },
                "output": {
                  "type": "int",
                  "contents": 7,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 143,
          "function_name": "loss_function",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_regression.py",
          "line_number": 176,
          "function_name": "compute_train_loss",
          "code": "losses = [compute_loss(params, example) for example in training_data]  # @inspect losses @stepover"
        }
      ],
      "env": {
        "losses": {
          "type": "list",
          "contents": [
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 4,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 143,
          "function_name": "loss_function",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_regression.py",
          "line_number": 177,
          "function_name": "compute_train_loss",
          "code": "train_loss = np.mean(losses)  # @inspect train_loss"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 2.0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 143,
          "function_name": "loss_function",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_regression.py",
          "line_number": 178,
          "function_name": "compute_train_loss",
          "code": "return train_loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 143,
          "function_name": "loss_function",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 2.0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 145,
          "function_name": "loss_function",
          "code": "text(\"Here's another predictor:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Here's another predictor:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 146,
          "function_name": "loss_function",
          "code": "params2 = Parameters1D(weight=1, bias=1)  # @inspect params2"
        }
      ],
      "env": {
        "params2": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 147,
          "function_name": "loss_function",
          "code": "train_loss2 = compute_train_loss(params2, training_data)  # @inspect train_loss2 @stepover"
        }
      ],
      "env": {
        "train_loss2": {
          "type": "numpy.float64",
          "contents": 5.666666666666667,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 148,
          "function_name": "loss_function",
          "code": "text(\"It has higher training loss so it's worse.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "It has higher training loss so it's worse.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 15,
          "function_name": "main",
          "code": "loss_function()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 188,
          "function_name": "optimization_algorithm",
          "code": "def optimization_algorithm():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 189,
          "function_name": "optimization_algorithm",
          "code": "text(\"Recall that for every set of parameters `params`, we can compute the training loss `train_loss`.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall that for every set of parameters `params`, we can compute the training loss `train_loss`.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 191,
          "function_name": "optimization_algorithm",
          "code": "params = Parameters1D(weight=0, bias=1)  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 192,
          "function_name": "optimization_algorithm",
          "code": "training_data = get_training_data()  # @inspect training_data @stepover"
        }
      ],
      "env": {
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_regression.Example1D",
              "contents": {
                "input": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "output": {
                  "type": "int",
                  "contents": 4,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_regression.Example1D",
              "contents": {
                "input": {
                  "type": "int",
                  "contents": 2,
                  "dtype": null,
                  "shape": null
                },
                "output": {
                  "type": "int",
                  "contents": 6,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_regression.Example1D",
              "contents": {
                "input": {
                  "type": "int",
                  "contents": 4,
                  "dtype": null,
                  "shape": null
                },
                "output": {
                  "type": "int",
                  "contents": 7,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 193,
          "function_name": "optimization_algorithm",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 193,
          "function_name": "optimization_algorithm",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_regression.py",
          "line_number": 174,
          "function_name": "compute_train_loss",
          "code": "def compute_train_loss(params: Parameters1D, training_data: list[Example1D]) -> float:  # @inspect params training_data"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_regression.Example1D",
              "contents": {
                "input": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "output": {
                  "type": "int",
                  "contents": 4,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_regression.Example1D",
              "contents": {
                "input": {
                  "type": "int",
                  "contents": 2,
                  "dtype": null,
                  "shape": null
                },
                "output": {
                  "type": "int",
                  "contents": 6,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_regression.Example1D",
              "contents": {
                "input": {
                  "type": "int",
                  "contents": 4,
                  "dtype": null,
                  "shape": null
                },
                "output": {
                  "type": "int",
                  "contents": 7,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 193,
          "function_name": "optimization_algorithm",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_regression.py",
          "line_number": 176,
          "function_name": "compute_train_loss",
          "code": "losses = [compute_loss(params, example) for example in training_data]  # @inspect losses @stepover"
        }
      ],
      "env": {
        "losses": {
          "type": "list",
          "contents": [
            {
              "type": "int",
              "contents": 9,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 25,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 36,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 193,
          "function_name": "optimization_algorithm",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_regression.py",
          "line_number": 177,
          "function_name": "compute_train_loss",
          "code": "train_loss = np.mean(losses)  # @inspect train_loss"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 23.333333333333332,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 193,
          "function_name": "optimization_algorithm",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_regression.py",
          "line_number": 178,
          "function_name": "compute_train_loss",
          "code": "return train_loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 193,
          "function_name": "optimization_algorithm",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 23.333333333333332,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 195,
          "function_name": "optimization_algorithm",
          "code": "text(\"We want to find the parameters that yield the lowest training loss.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We want to find the parameters that yield the lowest training loss.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 196,
          "function_name": "optimization_algorithm",
          "code": "text(\"This is an optimization problem.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This is an optimization problem.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 197,
          "function_name": "optimization_algorithm",
          "code": "text(\"Solving this optimization problem might seem daunting.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Solving this optimization problem might seem daunting.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 199,
          "function_name": "optimization_algorithm",
          "code": "text(\"Recall that the gradient provides the direction that increases the function the most.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall that the gradient provides the direction that increases the function the most.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 200,
          "function_name": "optimization_algorithm",
          "code": "text(\"So we just have to go in the opposite direction of the gradient!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So we just have to go in the opposite direction of the gradient!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 202,
          "function_name": "optimization_algorithm",
          "code": "text(\"Let us compute the gradient.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let us compute the gradient.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 203,
          "function_name": "optimization_algorithm",
          "code": "grad = compute_gradient_train_loss(params, training_data)  # @inspect grad"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 203,
          "function_name": "optimization_algorithm",
          "code": "grad = compute_gradient_train_loss(params, training_data)  # @inspect grad"
        },
        {
          "path": "linear_regression.py",
          "line_number": 181,
          "function_name": "compute_gradient_train_loss",
          "code": "def compute_gradient_train_loss(params: Parameters1D, training_data: list[Example1D]) -> np.ndarray:  # @inspect params training_data"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_regression.Example1D",
              "contents": {
                "input": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "output": {
                  "type": "int",
                  "contents": 4,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_regression.Example1D",
              "contents": {
                "input": {
                  "type": "int",
                  "contents": 2,
                  "dtype": null,
                  "shape": null
                },
                "output": {
                  "type": "int",
                  "contents": 6,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_regression.Example1D",
              "contents": {
                "input": {
                  "type": "int",
                  "contents": 4,
                  "dtype": null,
                  "shape": null
                },
                "output": {
                  "type": "int",
                  "contents": 7,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 203,
          "function_name": "optimization_algorithm",
          "code": "grad = compute_gradient_train_loss(params, training_data)  # @inspect grad"
        },
        {
          "path": "linear_regression.py",
          "line_number": 183,
          "function_name": "compute_gradient_train_loss",
          "code": "grads = [compute_grad_loss(params, example) for example in training_data]  # @inspect grads  @stepover"
        }
      ],
      "env": {
        "grads": {
          "type": "list",
          "contents": [
            {
              "type": "numpy.ndarray",
              "contents": [
                -6,
                -6
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            {
              "type": "numpy.ndarray",
              "contents": [
                -20,
                -10
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            {
              "type": "numpy.ndarray",
              "contents": [
                -48,
                -12
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 203,
          "function_name": "optimization_algorithm",
          "code": "grad = compute_gradient_train_loss(params, training_data)  # @inspect grad"
        },
        {
          "path": "linear_regression.py",
          "line_number": 184,
          "function_name": "compute_gradient_train_loss",
          "code": "grad = np.mean(grads, axis=0)  # @inspect grad"
        }
      ],
      "env": {
        "grad": {
          "type": "numpy.ndarray",
          "contents": [
            -24.666666666666668,
            -9.333333333333334
          ],
          "dtype": "float64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 203,
          "function_name": "optimization_algorithm",
          "code": "grad = compute_gradient_train_loss(params, training_data)  # @inspect grad"
        },
        {
          "path": "linear_regression.py",
          "line_number": 185,
          "function_name": "compute_gradient_train_loss",
          "code": "return grad"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 203,
          "function_name": "optimization_algorithm",
          "code": "grad = compute_gradient_train_loss(params, training_data)  # @inspect grad"
        }
      ],
      "env": {
        "grad": {
          "type": "numpy.ndarray",
          "contents": [
            -24.666666666666668,
            -9.333333333333334
          ],
          "dtype": "float64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 205,
          "function_name": "optimization_algorithm",
          "code": "text(\"Then we can take a little step in that direction.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Then we can take a little step in that direction.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 206,
          "function_name": "optimization_algorithm",
          "code": "learning_rate = 0.01"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 207,
          "function_name": "optimization_algorithm",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 208,
          "function_name": "optimization_algorithm",
          "code": "weight=params.weight - learning_rate * grad[0],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 209,
          "function_name": "optimization_algorithm",
          "code": "bias=params.bias - learning_rate * grad[1],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 207,
          "function_name": "optimization_algorithm",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.24666666666666667,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.0933333333333333,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 212,
          "function_name": "optimization_algorithm",
          "code": "text(\"Let's compute the training loss now:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's compute the training loss now:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 213,
          "function_name": "optimization_algorithm",
          "code": "new_train_loss = compute_train_loss(params, training_data)  # @inspect new_train_loss @stepover"
        }
      ],
      "env": {
        "new_train_loss": {
          "type": "numpy.float64",
          "contents": 16.919837037037038,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 214,
          "function_name": "optimization_algorithm",
          "code": "text(\"It's lower than before!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "It's lower than before!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 216,
          "function_name": "optimization_algorithm",
          "code": "text(\"If we do this repeatedly, that's the gradient descent algorithm.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "If we do this repeatedly, that's the gradient descent algorithm.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 225,
          "function_name": "gradient_descent",
          "code": "def gradient_descent():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 226,
          "function_name": "gradient_descent",
          "code": "training_data = get_training_data()  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 227,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(weight=0, bias=1)  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 228,
          "function_name": "gradient_descent",
          "code": "learning_rate = 0.01"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 229,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 230,
          "function_name": "gradient_descent",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 23.333333333333332,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 231,
          "function_name": "gradient_descent",
          "code": "grad = compute_gradient_train_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "numpy.ndarray",
          "contents": [
            -24.666666666666668,
            -9.333333333333334
          ],
          "dtype": "float64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 233,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad[0],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 234,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad[1],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.24666666666666667,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.0933333333333333,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 229,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 230,
          "function_name": "gradient_descent",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 16.919837037037038,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 231,
          "function_name": "gradient_descent",
          "code": "grad = compute_gradient_train_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "numpy.ndarray",
          "contents": [
            -20.777777777777775,
            -7.995555555555555
          ],
          "dtype": "float64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.24666666666666667,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.0933333333333333,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 233,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad[0],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 234,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad[1],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.45444444444444443,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.1732888888888888,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 229,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 230,
          "function_name": "gradient_descent",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 12.349508857942388,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 231,
          "function_name": "gradient_descent",
          "code": "grad = compute_gradient_train_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "numpy.ndarray",
          "contents": [
            -17.49576296296296,
            -6.866014814814815
          ],
          "dtype": "float64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.45444444444444443,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.1732888888888888,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 233,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad[0],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 234,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad[1],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.629402074074074,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.241949037037037,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 229,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 230,
          "function_name": "gradient_descent",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 9.092114346371103,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 231,
          "function_name": "gradient_descent",
          "code": "grad = compute_gradient_train_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "numpy.ndarray",
          "contents": [
            -14.72594212345679,
            -5.912225580246914
          ],
          "dtype": "float64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.629402074074074,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.241949037037037,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 233,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad[0],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 234,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad[1],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.7766614953086419,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.301071292839506,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 229,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 4,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 230,
          "function_name": "gradient_descent",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 6.769958762947989,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 231,
          "function_name": "gradient_descent",
          "code": "grad = compute_gradient_train_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "numpy.ndarray",
          "contents": [
            -12.38840636576132,
            -5.106770436213993
          ],
          "dtype": "float64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.7766614953086419,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.301071292839506,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 233,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad[0],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 234,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad[1],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.9005455589662551,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.352138997201646,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 229,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 5,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 230,
          "function_name": "gradient_descent",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 5.11400388503838,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 231,
          "function_name": "gradient_descent",
          "code": "grad = compute_gradient_train_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "numpy.ndarray",
          "contents": [
            -10.415713520864747,
            -4.426509397087518
          ],
          "dtype": "float64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.9005455589662551,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.352138997201646,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 233,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad[0],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 234,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad[1],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 1.0047026941749027,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.396404091172521,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 229,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 6,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 230,
          "function_name": "gradient_descent",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 3.932609294470605,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 231,
          "function_name": "gradient_descent",
          "code": "grad = compute_gradient_train_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "numpy.ndarray",
          "contents": [
            -8.75094318941293,
            -3.851912578172078
          ],
          "dtype": "float64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 1.0047026941749027,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.396404091172521,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 233,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad[0],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 234,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad[1],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 1.092212126069032,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.4349232169542419,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 229,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 7,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 230,
          "function_name": "gradient_descent",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 3.0892662885388433,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 231,
          "function_name": "gradient_descent",
          "code": "grad = compute_gradient_train_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "numpy.ndarray",
          "contents": [
            -7.346055222580422,
            -3.366496977769367
          ],
          "dtype": "float64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 1.092212126069032,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.4349232169542419,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 233,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad[0],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 234,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad[1],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 1.1656726782948363,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.4685881867319355,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 229,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 8,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 230,
          "function_name": "gradient_descent",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 2.486737382779397,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 231,
          "function_name": "gradient_descent",
          "code": "grad = compute_gradient_train_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "numpy.ndarray",
          "contents": [
            -6.16050429912326,
            -2.9563511278268932
          ],
          "dtype": "float64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 1.1656726782948363,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.4685881867319355,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 233,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad[0],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 234,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad[1],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 1.227277721286069,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.4981516980102043,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 229,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 9,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 230,
          "function_name": "gradient_descent",
          "code": "train_loss = compute_train_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 2.055758620915554,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 231,
          "function_name": "gradient_descent",
          "code": "grad = compute_gradient_train_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "numpy.ndarray",
          "contents": [
            -5.16007064461408,
            -2.6097339046446026
          ],
          "dtype": "float64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 1.227277721286069,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.4981516980102043,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 233,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad[0],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 234,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad[1],"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 232,
          "function_name": "gradient_descent",
          "code": "params = Parameters1D(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_regression.Parameters1D",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 1.2788784277322098,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 1.5242490370566504,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 229,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 9,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 217,
          "function_name": "optimization_algorithm",
          "code": "gradient_descent()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 219,
          "function_name": "optimization_algorithm",
          "code": "text(\"Notes:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Notes:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 220,
          "function_name": "optimization_algorithm",
          "code": "text(\"- Learning rate controls how fast you drive (tradeoff speed versus stability)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Learning rate controls how fast you drive (tradeoff speed versus stability)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 221,
          "function_name": "optimization_algorithm",
          "code": "text(\"- Guaranteed to converge for convex functions, not for deep learning\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Guaranteed to converge for convex functions, not for deep learning",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_regression.py",
          "line_number": 222,
          "function_name": "optimization_algorithm",
          "code": "text(\"- Other algorithms: stochastic gradient descent, Adam\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Other algorithms: stochastic gradient descent, Adam",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 16,
          "function_name": "main",
          "code": "optimization_algorithm()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 18,
          "function_name": "main",
          "code": "text(\"Summary:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 19,
          "function_name": "main",
          "code": "text(\"- Predictor: input -> output\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Predictor: input -> output",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 20,
          "function_name": "main",
          "code": "text(\"- Training data: set of (input, output) pairs\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Training data: set of (input, output) pairs",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 21,
          "function_name": "main",
          "code": "text(\"- Learning algorithm: training data -> predictor\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Learning algorithm: training data -> predictor",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 22,
          "function_name": "main",
          "code": "text(\"- Hypothesis class: set of possible predictors\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Hypothesis class: set of possible predictors",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 23,
          "function_name": "main",
          "code": "text(\"- Loss function: how bad the predictor (parameters) fit the data\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Loss function: how bad the predictor (parameters) fit the data",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 24,
          "function_name": "main",
          "code": "text(\"- Optimization algorithm: find parameters that minimize the loss function\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Optimization algorithm: find parameters that minimize the loss function",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_regression.py",
          "line_number": 25,
          "function_name": "main",
          "code": "text(\"- Gradient descent: iteratively updates the parameters in the direction of the negative gradient\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Gradient descent: iteratively updates the parameters in the direction of the negative gradient",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    }
  ]
}
{
  "files": {
    "ucs_astar.py": "from edtrace import text, link, image, note\nfrom search import SearchProblem, Step, Solution, dynamic_programming, LimitedTravelSearchProblem, TravelSearchProblem, TravelState\nfrom dataclasses import dataclass\nfrom graphviz import Digraph\nfrom typing import Any, Callable\nimport heapq\n\nHeuristic = Callable[[Any], float]\n\ndef main():\n    text(\"Last time: we need search to solve complex problems (thinking, reasoning)\")\n    image(\"images/walk-tram.png\", width=400)\n    text(\"- Search problem: formal definition\")\n    problem = TravelSearchProblem(num_locs=10)\n    state = problem.start_state()  # @inspect state\n    successors = problem.successors(state)  # @inspect successors\n    is_end = problem.is_end(successors[0].state)  # @inspect is_end\n    text(\"- Objective: find a solution (sequence of actions) that minimizes the total cost.\")  # @clear state successors is_end\n    text(\"- Exact algorithms: exhaustive search, dynamic programming (caching)\")\n    text(\"- Approximate algorithms: best-of-n, beam search\")\n\n    text(\"This time: exact algorithms that allow for cycles\")\n    text(\"- Uniform-cost search (UCS)\")\n    text(\"- A* search: UCS with a heuristic function\")\n\n    ucs()\n    astar()\n    astar_relaxations()\n\n    text(\"Summary\")\n    text(\"- UCS and A* are two exact algorithms that allow for cycles (but non-negative costs)\")\n    text(\"- Key: order states by increasing past cost\")\n    text(\"- Can't do better than UCS in general\")\n    text(\"- A* allows you to incorporate domain knowledge via heuristics to speed up search\")\n    text(\"- Heuristics: future cost of some relaxed problem (lowering costs in a structured way)\")\n\n    text(\"Next time: what happens when actions have non-deterministic outcomes (e.g., rolling dice)?\")\n\n\nclass DiamondSearchProblem(SearchProblem):\n    def __init__(self):\n        # state -> state -> cost\n        self.graph = {\n            \"A\": {\"B\": 1, \"C\": 100},\n            \"B\": {\"A\": 1, \"C\": 1, \"D\": 100},\n            \"C\": {\"A\": 100, \"B\": 1, \"D\": 1},\n            \"D\": {\"B\": 100, \"C\": 1},\n        }\n\n    def start_state(self) -> str:\n        return \"A\"\n    \n    def successors(self, state: str) -> list[Step]:\n        return [\n            Step(action=new_state, cost=cost, state=new_state) \\\n            for new_state, cost in self.graph[state].items()\n        ]\n    \n\n    def is_end(self, state: str) -> bool:\n        return state == \"D\"\n\n\nclass GridSearchProblem(SearchProblem):\n    def __init__(self, *rows: list[str]):\n        # Remove spaces (which are just for readability)\n        self.rows = [row.replace(\" \", \"\") for row in rows]\n\n    def start_state(self) -> str:\n        for r in range(self.num_rows):\n            for c in range(self.num_cols):\n                if self.rows[r][c] == \"S\":\n                    return (r, c)\n        raise ValueError(\"No start state found\")\n\n    def is_valid(self, state: tuple[int, int]) -> bool:\n        \"\"\"Check if a state is valid.\"\"\"\n        r, c = state\n        return 0 <= r < self.num_rows and \\\n               0 <= c < self.num_cols and \\\n               self.rows[r][c] != \"#\"\n    \n    def successors(self, state: tuple[int, int]) -> list[Step]:\n        \"\"\"Return the successors of a state (up, down, left, right).\"\"\"\n        r, c = state\n        successors = []\n        if self.is_valid((r + 1, c)):\n            successors.append(Step(action=\"down\", cost=1, state=(r + 1, c)))\n        if self.is_valid((r - 1, c)):\n            successors.append(Step(action=\"up\", cost=1, state=(r - 1, c)))\n        if self.is_valid((r, c + 1)):\n            successors.append(Step(action=\"right\", cost=1, state=(r, c + 1)))\n        if self.is_valid((r, c - 1)):\n            successors.append(Step(action=\"left\", cost=1, state=(r, c - 1)))\n        return successors\n\n    def is_end(self, state: tuple[int, int]) -> bool:\n        \"\"\"Check if a state is an end state.\"\"\"\n        r, c = state\n        return self.rows[r][c] == \"E\"\n\n    @property\n    def num_rows(self) -> int:\n        return len(self.rows)\n    \n    @property\n    def num_cols(self) -> int:\n        return len(self.rows[0])\n\n\ndef ucs():\n    ucs_motivation()\n    ucs_examples()\n    ucs_correctness()\n\n    text(\"Summary of uniform cost search (UCS)\")\n    text(\"- Computes past costs for each state in non-decreasing order.\")\n    text(\"- Uses a priority queue to efficiently find the state with the lowest priority.\")\n    text(\"- Guaranteed to compute the minimum cost solution if non-negative costs.\")\n\n\ndef ucs_motivation():\n    text(\"Two key concepts in search:\")\n    text(\"- **Future cost**: minimum cost solution from `state` to an end state.\")\n    text(\"- **Past cost**: minimum cost solution from the start state to `state`.\")\n    image(\"images/past-future.png\", width=600)\n\n    text(\"In dynamic programming, we compute the future cost for each state.\")\n    text(\"Note `future_cost(state)` depends on `future_cost(state')` and thus must be computed after it.\")\n    text(\"So FutureCost(state) are computed from the end states to the start state (like in backpropagation).\")\n    text(\"Assumption: there are no cycles.\")\n\n    text(\"Now suppose that there are cycles (special case: undirected edges).\")\n    image(\"images/diamond-example.png\", width=300)\n    text(\"Which do we compute first, B or C?\")\n    text(\"In general, in what order do we process the states?\")\n\n    text(\"**Uniform Cost Search (UCS)** [Dijkstra, 1956]\")\n    text(\"Assumption: all costs are non-negative.\")\n    text(\"Two differences from dynamic programming:\")\n    text(\"- Compute **past costs** for each state (instead of future costs).\")\n    text(\"- Process states **in order of increasing past cost** (instead of topological order).\")\n\n    text(\"High-level strategy:\")\n    image(\"images/ucs-strategy.png\", width=400)\n    text(\"- **Explored**: states we've found the minimum cost path to\")\n    text(\"- **Frontier**: states we've seen, still trying to figure out how the best way to get there\") \n    text(\"- **Unexplored**: states we haven't seen yet\")\n\n\n@dataclass(frozen=True)\nclass Backpointer:\n    \"\"\"For a state, record how we got to it.\"\"\"\n    prev_state: Any   # Which state we came from\n    action: Any       # Action we took from `prev_state`\n    cost: float       # Cost of that action\n\n\ndef uniform_cost_search(problem: SearchProblem) -> tuple[Solution | None, int]:\n    \"\"\"\n    Run Uniform Cost Search (UCS) on the specified search `problem`.\n    Return the solution (sequence of steps) and the number of states explored.\n    \"\"\"\n    # Frontier: states we've seen, still trying to figure out how the best way to get there\n    # Priority represents the minimum cost to get there\n    frontier = PriorityQueue()  # @stepover @inspect frontier\n\n    # For each state we've reached, backpointer tells us how we got there\n    backpointers: dict[Any, Backpointer] = {}  # @inspect backpointers\n    num_explored = 0  # @inspect num_explored\n\n    # Add the start state\n    start_state = problem.start_state()  # @stepover\n    frontier.update(start_state, 0.0)  # @stepover @inspect frontier\n\n    while True:\n        # Remove the state from the frontier with the lowest priority (theorem: priority = past_cost).\n        state, past_cost = frontier.remove_min()  # @inspect state past_cost frontier @stepover\n        if state is None and past_cost is None:\n            return None, num_explored  # Found no solution\n\n        num_explored += 1  # @inspect num_explored\n\n        # Check if we've reached an end state; if so, extract solution.\n        if problem.is_end(state):  # @stepover\n            # Walk back the backpointers to get the actions\n            steps = []  # @inspect steps @clear successor\n            while state != start_state:\n                backpointer = backpointers[state]\n                steps.insert(0, Step(backpointer.action, backpointer.cost, state))  # Prepend @inspect steps\n                state = backpointer.prev_state  # Go back @inspect state\n            return Solution(steps=steps), num_explored\n\n        # Expand from `state`, updating the frontier with each `new_state`\n        for successor in problem.successors(state):  # @inspect successor @stepover\n            if frontier.update(successor.state, past_cost + successor.cost):  # @stepover @inspect frontier\n                # We found better way to get to `successor.state` --> update backpointer!\n                backpointers[successor.state] = Backpointer(prev_state=state, action=successor.action, cost=successor.cost)  # @inspect backpointers\n\n\nclass PriorityQueue:\n    \"\"\"Data structure for supporting uniform cost search.\"\"\"\n    def __init__(self):\n        self.DONE = -100000\n        self.heap = []\n        self.priorities = {}  # Map from state to priority\n\n    def update(self, state: Any, new_priority: float) -> bool:\n        \"\"\"\n        Insert `state` into the heap with priority `new_priority` if `state`\n        isn't in the heap or `new_priority` is smaller than the existing\n        priority.  Return whether the priority queue was updated.\n        \"\"\"\n        old_priority = self.priorities.get(state)\n        if old_priority is None or new_priority < old_priority:\n            self.priorities[state] = new_priority\n            heapq.heappush(self.heap, (new_priority, state))\n            return True\n        return False\n\n    def remove_min(self):\n        \"\"\"Return (state with minimum priority, priority) or (None, None) if empty.\"\"\"\n        while len(self.heap) > 0:\n            priority, state = heapq.heappop(self.heap)\n            if self.priorities[state] == self.DONE:\n                # Outdated priority, skip\n                continue\n            self.priorities[state] = self.DONE\n            return state, priority\n\n        # Nothing left...\n        return None, None\n\n    def asdict(self) -> dict[Any, float]:\n        \"\"\"Return the priorities without the DONE ones.\"\"\"\n        return dict((state, priority) for state, priority in self.priorities.items() if priority != self.DONE)\n\n\ndef ucs_examples():\n    text(\"Consider the following simple search problem.\")\n    problem = DiamondSearchProblem()\n    image(draw_graph(problem).render(\"var/diamond_graph\", format=\"png\"), width=200)  # @stepover\n\n    successors = problem.successors(\"A\")  # @inspect successors\n\n    text(\"Let's run UCS on this example.\")  # @clear successors\n    solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored\n\n    text(\"Let's consider another search problem:\")  # @clear solution\n    text(\"- States are points on a grid (start at S, end at E)\")\n    text(\"- Actions: up, down, left, right\")\n    text(\"- Cost: 1 for each action\")\n    problem = GridSearchProblem(  # @stepover\n        # 0 1 2 3 4\n        \" S . . . .\", # 0\n        \" # # # . #\", # 1\n        \" . . . . .\", # 2\n        \" . # # # #\", # 3\n        \" . . . . E\", # 4\n    )\n    image(draw_graph(problem).render(\"var/grid_graph\", format=\"png\"), width=100)  # @stepover\n\n    state = problem.start_state()  # @inspect state @stepover\n    successors = problem.successors(state)  # @inspect successors @stepover\n    is_end = problem.is_end(successors[0].state)  # @inspect is_end @stepover\n\n    text(\"Let's run UCS on this example.\")  # @clear state successors is_end\n    solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored @stepover\n\n    text(\"Here is a much larger example where each pixel is a state:\")\n    link(\"https://www.youtube.com/watch?v=z6lUnb9ktkE\", title=\"[UCS video]\")\n\n\ndef draw_graph(problem: SearchProblem) -> Digraph:\n    \"\"\"Traverse a search problem and return a graphviz graph.\"\"\"\n    dot = Digraph()\n    visited = set()\n    # Traverse the states (nodes) in the search problem\n    def recurse(state: Any):\n        if state in visited:\n            return\n        visited.add(state)\n        if problem.is_end(state):\n            dot.node(str(state), shape=\"doublecircle\")\n        else:\n            dot.node(str(state), shape=\"circle\")\n            for step in problem.successors(state):\n                dot.edge(str(state), str(step.state), label=f\"{step.action}:{step.cost}\")\n                recurse(step.state)\n\n    recurse(problem.start_state())\n    return dot\n\ndef ucs_correctness():\n    text(\"We now prove that UCS is guaranteed to compute the minimum cost solution.\")\n    text(\"Assumption: all costs are non-negative.\")\n\n    image(\"images/ucs-strategy.png\", width=300)\n    text(\"**Theorem:**\")\n    text(\"- Suppose UCS moves a state s from the frontier to the explored set.\")\n    text(\"- Then priority(s) = PastCost(s).\")\n\n    text(\"Let's prove by induction.\")\n    text(\"Base case: priority(start) = PastCost(start) = 0.\")\n\n    image(\"images/ucs-proof.png\", width=300)\n    text(\"Inductive case: assume priority(s) = PastCost(s) for all s in explored.\")\n    text(\"- Suppose we remove s from the frontier, corresponding to blue path.\")\n    text(\"- Consider any alternative red path to s that goes through t (in explored) and u (in frontier).\")\n    text(\"- Want to show cost(red) >= cost(blue).\")\n    text(\"cost(red)\")\n    text(\"\u2265 PastCost(t) + Cost(t, u) [PastCost(t) is minimum cost to t, u to s is non-negative]\")\n    text(\"= priority(t) + Cost(t, u) [inductive hypothesis]\")\n    text(\"\u2265 priority(u) [t is explored, used to update priority(u)]\")\n    text(\"\u2265 priority(s) [s has minimum priority from frontier]\")\n    text(\"= cost(blue) [by definition]\")\n\n\ndef astar():\n    text(\"UCS in action: \"), link(\"https://www.youtube.com/watch?v=z6lUnb9ktkE\", title=\"[UCS video]\")\n    text(\"A* in action: \"), link(\"https://www.youtube.com/watch?v=huJEgJ82360\", title=\"[A* video]\")\n\n    text(\"UCS orders states by increasing past cost (which has no knowledge of the end state).\")\n    text(\"We would also like to consider the cost from state to an end state.\")\n    text(\"Ideal: explore in order of PastCost(s) + FutureCost(s)\")\n    text(\"A*: explore in order of PastCost(s) + h(s) for some **heuristic** h(s)\")\n    text(\"h(s) is an approximation of FutureCost(s)\")\n\n    text(\"**A* algorithm** [Hart/Nilsson/Raphael 1968]: run UCS with modified costs:\")\n    text(\"Cost'(s, a) = Cost(s, a) + [h(Succ(s, a)) - h(s)]\")\n    text(\"Intuition: add a penalty for how much action takes us away from the end state\")\n\n    text(\"Let's consider a simple example:\")\n    problem = LineSearchProblem()\n    image(draw_graph(problem).render(\"var/line_graph\", format=\"png\"), width=100)  # @stepover\n    state = problem.start_state()  # @inspect state @stepover\n    successors = problem.successors(state)  # @inspect successors\n    is_end = problem.is_end(successors[0].state)  # @inspect is_end\n\n    text(\"Let's run UCS on this example.\")  # @clear state successors is_end\n    solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored @stepover\n\n    text(\"Let's run A* on this example.\")  # @clear solution num_explored\n    def line_heuristic(state: int) -> float:\n        return 2 - state\n    cost = line_heuristic(2)  # @inspect cost  @stepover\n    cost = line_heuristic(0)  # @inspect cost @stepover\n    cost = line_heuristic(-2)  # @inspect cost @stepover\n\n    modified_problem = ModifiedSearchProblem(problem, heuristic=line_heuristic)  # @stepover @clear cost\n    successors = modified_problem.successors(0)  # @inspect successors\n    text(\"Note that the heuristic makes us favor going to the right.\")\n\n    solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution\n\n    text(\"Will any heuristic work?\")\n    text(\"No.\")\n    image(\"images/astar-counterexample.png\", width=300)\n    text(\"Here, h(C) = 1000 actively messes things up.\")\n\n    text(\"**Consistency**: a heuristic h is consistent when\")\n    text(\"- Cost(s, a) + h(Succ(s, a)) - h(s) is non-negative (these are the modified costs!).\")\n    text(\"- h(end) = 0.\")\n    text(\"UCS does not work with negative costs.\")\n\n    text(\"Proposition (correctness): A* is correct if h is consistent.\")\n    text(\"Proof:\")\n    text(\"- Consider any path from the start state to the end state.\")\n    text(\"- The sum of the modified costs is the sum of the original costs - h(start).\")\n    text(\"- Reason: telescoping sums\")\n\n    text(\"Proposition (efficiency): A* explores all states statisfying\")\n    text(\"PastCost(s) <= PastCost(end) - h(s)\")\n    text(\"Proof: A* explores all s such that PastCost(s) + h(s) <= PastCost(end)\")\n    text(\"- If h(s) = 0, then A* = UCS.\")\n    text(\"- If h(s) = FutureCost(s), then A* explores only nodes on minimum cost path.\")\n    text(\"- Usually h(s) is somewhere in between.\")\n\n    text(\"Definition (admissibility): h is admissible when h(s) <= FutureCost(s)\")\n    text(\"In other words: h always underestimates the cost\")\n    text(\"Consistency implies admissibility.\")\n\n\nclass LineSearchProblem(SearchProblem):\n    def start_state(self) -> int:\n        return 0\n\n    def successors(self, state: int) -> list[Step]:\n        successors = []\n        if state >= -2:\n            successors.append(Step(action=\"left\", cost=1, state=state - 1))\n        if state <= 2:\n            successors.append(Step(action=\"right\", cost=1, state=state + 1))\n        return successors\n    \n    def is_end(self, state: int) -> bool:\n        return state == 2\n\n\ndef astar_search(problem: SearchProblem, heuristic: Heuristic) -> tuple[Solution | None, int]:\n    \"\"\"Just wrap the problem and return the solution.\"\"\"\n    modified_problem = ModifiedSearchProblem(problem, heuristic)  # @stepover\n    modified_solution, num_explored = uniform_cost_search(modified_problem)  # @stepover @inspect modified_solution num_explored\n\n    # The actions are correct but the costs are still the modified costs!\n    # Need to get the original costs from the modified solution.\n    state = problem.start_state()  # @inspect state @stepover\n    steps = []  # @inspect steps\n    for step in modified_solution.steps:  # step: state ----> step.state @inspect step\n        modified_cost = step.cost  # @inspect modified_cost\n        # Recall: modified_cost = original_cost + heuristic(step.state) - heuristic(state)\n        original_cost = modified_cost - heuristic(step.state) + heuristic(state)  # @inspect original_cost @stepover\n        steps.append(Step(step.action, original_cost, step.state))  # @inspect steps\n        state = step.state\n    solution = Solution(steps=steps)\n    return solution, num_explored\n\n\nclass ModifiedSearchProblem(SearchProblem):\n    \"\"\"A modified search problem where the costs are based on the `heuristic`.\"\"\"\n    def __init__(self, problem: SearchProblem, heuristic: Heuristic):\n        self.problem = problem\n        self.heuristic = heuristic\n    \n    def start_state(self) -> Any:\n        return self.problem.start_state()\n\n    def successors(self, state: Any) -> list[Step]:\n        \"\"\"Return the successors of `state`.\"\"\"\n        successors = []\n        for successor in self.problem.successors(state):  # @inspect successor @stepover\n            # Modify the cost using the heuristic\n            modified_cost = successor.cost + self.heuristic(successor.state) - self.heuristic(state)  # @inspect modified_cost @stepover\n            successors.append(Step(successor.action, modified_cost, successor.state))\n        return successors\n    \n    def is_end(self, state: Any) -> bool:\n        return self.problem.is_end(state)\n\n\ndef astar_relaxations():\n    text(\"So far: A* = UCS with a modified cost based on a heuristic function h\")\n    text(\"h(s) needs to be consistent for A* to be correct\")\n    text(\"How do we choose h?\")\n\n    text(\"Key principle: **relaxation**\")\n    text(\"Ideally, h(s) = FutureCost(s), but that's just as hard as solving the original problem.\")\n    text(\"So let's relax the problem to make it easier.\")\n\n    text(\"Winning recipe:\")\n    text(\"- Define a relaxed problem by getting rid of some constraints.\")\n    text(\"- Compute FutureCost_relaxed(s) to be the future cost of state s under the relaxed problem.\")\n    text(\"- Run A* using heuristic h(s) = FutureCost_relaxed(s).\")\n\n    text(\"Here are some ways in which the relaxed problem is easier.\")\n    closed_form_solution()\n    search_fewer_states()\n    independent_subproblems()\n    unifying_principle()\n    combining_heuristics()\n\n\ndef closed_form_solution():\n    text(\"Recall the grid problem of going from S to E without going through walls (#).\")\n\n    problem = GridSearchProblem(  # @stepover\n        # 0 1 2 3 4\n        \" S . . . .\", # 0\n        \" # # # . #\", # 1\n        \" . . . . .\", # 2\n        \" . # # # #\", # 3\n        \" . . . . E\", # 4\n    )\n\n    text(\"In the relaxed problem, just remove all the walls!\")\n    relaxed_problem = GridSearchProblem(  # @stepover\n        # 0 1 2 3 4\n        \" S . . . .\", # 0\n        \" . . . . .\", # 1\n        \" . . . . .\", # 2\n        \" . . . . .\", # 3\n        \" . . . . E\", # 4\n    )\n    text(\"The future cost of a state (r, c) under the relaxed problem has a closed form solution.\")\n\n    def future_cost_relaxed(state: tuple[int, int]) -> float:\n        end_r = relaxed_problem.num_rows - 1  # @stepover  @inspect end_r\n        end_c = relaxed_problem.num_cols - 1  # @stepover  @inspect end_c\n        # Manhattan distance between (r, c) and (end_r, end_c)\n        r, c = state  # @inspect r c\n        dist = abs(end_r - r) + abs(end_c - c)  # @inspect dist\n        return dist\n\n    cost = future_cost_relaxed(state=(0, 0))  # @inspect cost\n    cost = future_cost_relaxed(state=(0, 1))  # Closer @inspect cost @stepover\n    cost = future_cost_relaxed(state=(2, 4))  # Seems so close! @inspect cost @stepover\n    cost = future_cost_relaxed(state=(3, 0))  # Seems farther (heuristic is imperfect)! @inspect cost @stepover\n    text(\"Intuition: favor states that are closer to E\")\n\n    text(\"Run UCS and A*\")\n    solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored @stepover\n    solution, num_explored = astar_search(problem, heuristic=future_cost_relaxed)  # @inspect solution num_explored @stepover\n    text(\"Note that A* does not provide a benefit in this case.\")\n\n\ndef search_fewer_states():\n    text(\"Recall the limited travel problem:\")\n    text(\"- Travel from 1 to n via walking (i \u2192 i+1) or tram (i \u2192 2*i)\")\n    text(\"- Can take tram only `tickets` times\")\n    problem = LimitedTravelSearchProblem(num_locs=10, starting_tickets=3)\n\n    text(\"Relaxed problem: tram is free again!\")\n    relaxed_problem = TravelSearchProblem(num_locs=10)\n\n    text(\"To define the heuristic, we need to compute future costs of the relaxed problem.\")\n    _, num_explored_relaxed, future_costs_relaxed = dynamic_programming(relaxed_problem)  # @stepover @inspect num_explored_relaxed relaxed_future_costs\n    def heuristic(state: TravelState) -> float:\n        # Note: problem states are (loc, tickets) but relaxed problem states are just loc\n        state_relaxed = state.loc\n        return future_costs_relaxed[state_relaxed].cost\n\n    cost = heuristic(TravelState(loc=4, tickets=3))  # @inspect cost\n\n    text(\"Let's compare UCS and A*\")\n    solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored @stepover\n    solution, num_explored = astar_search(problem, heuristic=heuristic)  # @inspect solution num_explored @stepover\n    \n    text(\"For accounting purposes, need to include the cost of solving the relaxed problem!\")\n    num_explored += num_explored_relaxed  # @inspect num_explored\n\n    text(\"Note: dynamic programming cannot deal with cycles\")\n    text(\"If we have cycles, what do we do?\")\n    text(\"Solution:\")\n    text(\"- Define a reversed relaxed problem (A \u2192 B becomes B \u2192 A)\")\n    text(\"- Past costs in the reversed relaxed problem = future costs in the relaxed problem\")\n    text(\"- Run UCS on the reserved relaxed problem to compute future costs in the relaxed problem\")\n\n    text(\"Summary:\")\n    text(\"- Still have to run search on the relaxed problems\")\n    text(\"- But the relaxed problems have fewer constraints and therefore fewer states\")\n    text(\"- Thus they are faster to solve than the original problem\")\n\n\ndef independent_subproblems():\n   text(\"Motivating example: solving the 8 puzzle\")\n   image(\"images/8-puzzle.png\", width=400) \n\n   text(\"Original problem: tiles cannot overlap\")\n   text(\"Relaxed problem: tiles **can** overlap\")\n   text(\"As a result, this breaks up into 8 **independent** subproblems\")\n   text(\"...and in this case, each subproblem can be solved in closed form.\")\n   #                 1   2   3   4   5   6   7   8  # tile\n   heuristic_value = 1 + 1 + 3 + 1 + 1 + 1 + 1 + 3  # how far it has to move @inspect heuristic_value\n\n\ndef unifying_principle():\n    text(\"Examples of relaxed problems so far:\")\n    text(\"- Knock down walls\")\n    text(\"- Free tram\")\n    text(\"- Tiles can overlap\")\n\n    text(\"These are all examples of removing constraints from the original problem.\")\n    text(\"Removing constraints means reducing the cost of actions from infinity to a finite value.\")\n\n    text(\"A more general principle: **reducing costs**\")\n\n    text(\"Definition: A **relaxation** of a search problem is a modified problem where\")\n    text(\"- States, actions, successors are the same\")\n    text(\"- Cost_relaxed(s, a) <= Cost(s, a)\")\n    \n    text(\"Theorem: Let h(s) be the future cost of a relaxed problem. Then h is a consistent heuristic.\")\n    text(\"Proof:\")\n    text(\"h(s)\")\n    text(\"<= Cost_relaxed(s, a) + h(Succ(s, a))  [triangle inequality]\")\n    text(\"<= Cost(s, a) + h(Succ(s, a)) [definition of relaxation]\")\n\n    text(\"Of course, a relaxed problem isn't automatically easier to solve!\")\n\n    text(\"Costs are reduced in a **structured** way so that we can then:\")\n    text(\"- Reduce the number of states\")\n    text(\"- Get closed form solutions\")\n    text(\"- Break up into independent subproblems\")\n\n\ndef combining_heuristics():\n    text(\"We can use domain knowledge to come up with different relaxations\")\n    text(\"- h1(s): future cost if we knock down walls\")\n    text(\"- h2(s): future cost if we can ride a free tram\")\n\n    text(\"Which one do you pick?\")\n    text(\"Answer: you don't have to - you can use all of them!\")\n\n    text(\"Theorem:\")\n    text(\"- Suppose h1(s) and h2(s) are two consistent heuristics.\")\n    text(\"- Then h(s) = max(h1(s), h2(s)) is a consistent heuristic.\")\n\n    text(\"Proof:\")\n    text(\"h(s)\")\n    text(\"= max(h1(s), h2(s)) [definition of h]\")\n    text(\"<= max(Cost(s, a) + h1(Succ(s, a)), h2(Cost(s, a)) + h2(Succ(s, a))) [because h1 and h2 are consistent]\")\n    text(\"= Cost(s, a) + max(h1(Succ(s, a)), h2(Succ(s, a))) [pull out constant]\")\n    text(\"= Cost(s, a) + h(Succ(s, a)) [definition of h]\")\n    text(\"Therefore, h is consistent.\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
  },
  "hidden_line_numbers": {
    "ucs_astar.py": []
  },
  "steps": [
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 10,
          "function_name": "main",
          "code": "def main():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 11,
          "function_name": "main",
          "code": "text(\"Last time: we need search to solve complex problems (thinking, reasoning)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Last time: we need search to solve complex problems (thinking, reasoning)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 12,
          "function_name": "main",
          "code": "image(\"images/walk-tram.png\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/walk-tram.png",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 13,
          "function_name": "main",
          "code": "text(\"- Search problem: formal definition\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Search problem: formal definition",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 14,
          "function_name": "main",
          "code": "problem = TravelSearchProblem(num_locs=10)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 15,
          "function_name": "main",
          "code": "state = problem.start_state()  # @inspect state"
        }
      ],
      "env": {
        "state": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 16,
          "function_name": "main",
          "code": "successors = problem.successors(state)  # @inspect successors"
        }
      ],
      "env": {
        "successors": {
          "type": "list",
          "contents": [
            {
              "type": "search.Step",
              "contents": {
                "action": {
                  "type": "str",
                  "contents": "walk",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "int",
                  "contents": 2,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "search.Step",
              "contents": {
                "action": {
                  "type": "str",
                  "contents": "tram",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 2,
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "int",
                  "contents": 2,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 17,
          "function_name": "main",
          "code": "is_end = problem.is_end(successors[0].state)  # @inspect is_end"
        }
      ],
      "env": {
        "is_end": {
          "type": "bool",
          "contents": false,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 18,
          "function_name": "main",
          "code": "text(\"- Objective: find a solution (sequence of actions) that minimizes the total cost.\")  # @clear state successors is_end"
        }
      ],
      "env": {
        "state": null,
        "successors": null,
        "is_end": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "- Objective: find a solution (sequence of actions) that minimizes the total cost.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 19,
          "function_name": "main",
          "code": "text(\"- Exact algorithms: exhaustive search, dynamic programming (caching)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Exact algorithms: exhaustive search, dynamic programming (caching)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 20,
          "function_name": "main",
          "code": "text(\"- Approximate algorithms: best-of-n, beam search\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Approximate algorithms: best-of-n, beam search",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 22,
          "function_name": "main",
          "code": "text(\"This time: exact algorithms that allow for cycles\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This time: exact algorithms that allow for cycles",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 23,
          "function_name": "main",
          "code": "text(\"- Uniform-cost search (UCS)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Uniform-cost search (UCS)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 24,
          "function_name": "main",
          "code": "text(\"- A* search: UCS with a heuristic function\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- A* search: UCS with a heuristic function",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 111,
          "function_name": "ucs",
          "code": "def ucs():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 122,
          "function_name": "ucs_motivation",
          "code": "def ucs_motivation():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 123,
          "function_name": "ucs_motivation",
          "code": "text(\"Two key concepts in search:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Two key concepts in search:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 124,
          "function_name": "ucs_motivation",
          "code": "text(\"- **Future cost**: minimum cost solution from `state` to an end state.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- **Future cost**: minimum cost solution from `state` to an end state.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 125,
          "function_name": "ucs_motivation",
          "code": "text(\"- **Past cost**: minimum cost solution from the start state to `state`.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- **Past cost**: minimum cost solution from the start state to `state`.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 126,
          "function_name": "ucs_motivation",
          "code": "image(\"images/past-future.png\", width=600)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/past-future.png",
          "style": {
            "width": 600
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 128,
          "function_name": "ucs_motivation",
          "code": "text(\"In dynamic programming, we compute the future cost for each state.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In dynamic programming, we compute the future cost for each state.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 129,
          "function_name": "ucs_motivation",
          "code": "text(\"Note `future_cost(state)` depends on `future_cost(state')` and thus must be computed after it.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note `future_cost(state)` depends on `future_cost(state')` and thus must be computed after it.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 130,
          "function_name": "ucs_motivation",
          "code": "text(\"So FutureCost(state) are computed from the end states to the start state (like in backpropagation).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So FutureCost(state) are computed from the end states to the start state (like in backpropagation).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 131,
          "function_name": "ucs_motivation",
          "code": "text(\"Assumption: there are no cycles.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Assumption: there are no cycles.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 133,
          "function_name": "ucs_motivation",
          "code": "text(\"Now suppose that there are cycles (special case: undirected edges).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now suppose that there are cycles (special case: undirected edges).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 134,
          "function_name": "ucs_motivation",
          "code": "image(\"images/diamond-example.png\", width=300)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/diamond-example.png",
          "style": {
            "width": 300
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 135,
          "function_name": "ucs_motivation",
          "code": "text(\"Which do we compute first, B or C?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Which do we compute first, B or C?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 136,
          "function_name": "ucs_motivation",
          "code": "text(\"In general, in what order do we process the states?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In general, in what order do we process the states?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 138,
          "function_name": "ucs_motivation",
          "code": "text(\"**Uniform Cost Search (UCS)** [Dijkstra, 1956]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Uniform Cost Search (UCS)** [Dijkstra, 1956]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 139,
          "function_name": "ucs_motivation",
          "code": "text(\"Assumption: all costs are non-negative.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Assumption: all costs are non-negative.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 140,
          "function_name": "ucs_motivation",
          "code": "text(\"Two differences from dynamic programming:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Two differences from dynamic programming:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 141,
          "function_name": "ucs_motivation",
          "code": "text(\"- Compute **past costs** for each state (instead of future costs).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Compute **past costs** for each state (instead of future costs).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 142,
          "function_name": "ucs_motivation",
          "code": "text(\"- Process states **in order of increasing past cost** (instead of topological order).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Process states **in order of increasing past cost** (instead of topological order).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 144,
          "function_name": "ucs_motivation",
          "code": "text(\"High-level strategy:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "High-level strategy:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 145,
          "function_name": "ucs_motivation",
          "code": "image(\"images/ucs-strategy.png\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/ucs-strategy.png",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 146,
          "function_name": "ucs_motivation",
          "code": "text(\"- **Explored**: states we've found the minimum cost path to\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- **Explored**: states we've found the minimum cost path to",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 147,
          "function_name": "ucs_motivation",
          "code": "text(\"- **Frontier**: states we've seen, still trying to figure out how the best way to get there\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- **Frontier**: states we've seen, still trying to figure out how the best way to get there",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 148,
          "function_name": "ucs_motivation",
          "code": "text(\"- **Unexplored**: states we haven't seen yet\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- **Unexplored**: states we haven't seen yet",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 112,
          "function_name": "ucs",
          "code": "ucs_motivation()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 239,
          "function_name": "ucs_examples",
          "code": "def ucs_examples():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 240,
          "function_name": "ucs_examples",
          "code": "text(\"Consider the following simple search problem.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Consider the following simple search problem.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 241,
          "function_name": "ucs_examples",
          "code": "problem = DiamondSearchProblem()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 241,
          "function_name": "ucs_examples",
          "code": "problem = DiamondSearchProblem()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 41,
          "function_name": "__init__",
          "code": "def __init__(self):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 241,
          "function_name": "ucs_examples",
          "code": "problem = DiamondSearchProblem()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 44,
          "function_name": "__init__",
          "code": "\"A\": {\"B\": 1, \"C\": 100},"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 241,
          "function_name": "ucs_examples",
          "code": "problem = DiamondSearchProblem()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 45,
          "function_name": "__init__",
          "code": "\"B\": {\"A\": 1, \"C\": 1, \"D\": 100},"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 241,
          "function_name": "ucs_examples",
          "code": "problem = DiamondSearchProblem()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 46,
          "function_name": "__init__",
          "code": "\"C\": {\"A\": 100, \"B\": 1, \"D\": 1},"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 241,
          "function_name": "ucs_examples",
          "code": "problem = DiamondSearchProblem()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 47,
          "function_name": "__init__",
          "code": "\"D\": {\"B\": 100, \"C\": 1},"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 241,
          "function_name": "ucs_examples",
          "code": "problem = DiamondSearchProblem()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 43,
          "function_name": "__init__",
          "code": "self.graph = {"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 241,
          "function_name": "ucs_examples",
          "code": "problem = DiamondSearchProblem()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 242,
          "function_name": "ucs_examples",
          "code": "image(draw_graph(problem).render(\"var/diamond_graph\", format=\"png\"), width=200)  # @stepover"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "var/diamond_graph.png",
          "style": {
            "width": 200
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 244,
          "function_name": "ucs_examples",
          "code": "successors = problem.successors(\"A\")  # @inspect successors"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 244,
          "function_name": "ucs_examples",
          "code": "successors = problem.successors(\"A\")  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 53,
          "function_name": "successors",
          "code": "def successors(self, state: str) -> list[Step]:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 244,
          "function_name": "ucs_examples",
          "code": "successors = problem.successors(\"A\")  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 54,
          "function_name": "successors",
          "code": "return ["
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 244,
          "function_name": "ucs_examples",
          "code": "successors = problem.successors(\"A\")  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 56,
          "function_name": "successors",
          "code": "for new_state, cost in self.graph[state].items()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 244,
          "function_name": "ucs_examples",
          "code": "successors = problem.successors(\"A\")  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 54,
          "function_name": "successors",
          "code": "return ["
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 244,
          "function_name": "ucs_examples",
          "code": "successors = problem.successors(\"A\")  # @inspect successors"
        }
      ],
      "env": {
        "successors": {
          "type": "list",
          "contents": [
            {
              "type": "search.Step",
              "contents": {
                "action": {
                  "type": "str",
                  "contents": "B",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "str",
                  "contents": "B",
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "search.Step",
              "contents": {
                "action": {
                  "type": "str",
                  "contents": "C",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 100,
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "str",
                  "contents": "C",
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 246,
          "function_name": "ucs_examples",
          "code": "text(\"Let's run UCS on this example.\")  # @clear successors"
        }
      ],
      "env": {
        "successors": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's run UCS on this example.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 159,
          "function_name": "uniform_cost_search",
          "code": "def uniform_cost_search(problem: SearchProblem) -> tuple[Solution | None, int]:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 166,
          "function_name": "uniform_cost_search",
          "code": "frontier = PriorityQueue()  # @stepover @inspect frontier"
        }
      ],
      "env": {
        "frontier": {
          "type": "ucs_astar.PriorityQueue",
          "contents": {},
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 169,
          "function_name": "uniform_cost_search",
          "code": "backpointers: dict[Any, Backpointer] = {}  # @inspect backpointers"
        }
      ],
      "env": {
        "backpointers": {
          "type": "dict",
          "contents": {},
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 170,
          "function_name": "uniform_cost_search",
          "code": "num_explored = 0  # @inspect num_explored"
        }
      ],
      "env": {
        "num_explored": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 173,
          "function_name": "uniform_cost_search",
          "code": "start_state = problem.start_state()  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 174,
          "function_name": "uniform_cost_search",
          "code": "frontier.update(start_state, 0.0)  # @stepover @inspect frontier"
        }
      ],
      "env": {
        "frontier": {
          "type": "ucs_astar.PriorityQueue",
          "contents": {
            "A": {
              "type": "float",
              "contents": 0.0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 176,
          "function_name": "uniform_cost_search",
          "code": "while True:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 178,
          "function_name": "uniform_cost_search",
          "code": "state, past_cost = frontier.remove_min()  # @inspect state past_cost frontier @stepover"
        }
      ],
      "env": {
        "state": {
          "type": "str",
          "contents": "A",
          "dtype": null,
          "shape": null
        },
        "past_cost": {
          "type": "float",
          "contents": 0.0,
          "dtype": null,
          "shape": null
        },
        "frontier": {
          "type": "ucs_astar.PriorityQueue",
          "contents": {},
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 179,
          "function_name": "uniform_cost_search",
          "code": "if state is None and past_cost is None:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 182,
          "function_name": "uniform_cost_search",
          "code": "num_explored += 1  # @inspect num_explored"
        }
      ],
      "env": {
        "num_explored": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 185,
          "function_name": "uniform_cost_search",
          "code": "if problem.is_end(state):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 195,
          "function_name": "uniform_cost_search",
          "code": "for successor in problem.successors(state):  # @inspect successor @stepover"
        }
      ],
      "env": {
        "successor": {
          "type": "search.Step",
          "contents": {
            "action": {
              "type": "str",
              "contents": "B",
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            "state": {
              "type": "str",
              "contents": "B",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 196,
          "function_name": "uniform_cost_search",
          "code": "if frontier.update(successor.state, past_cost + successor.cost):  # @stepover @inspect frontier"
        }
      ],
      "env": {
        "frontier": {
          "type": "ucs_astar.PriorityQueue",
          "contents": {
            "B": {
              "type": "float",
              "contents": 1.0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 198,
          "function_name": "uniform_cost_search",
          "code": "backpointers[successor.state] = Backpointer(prev_state=state, action=successor.action, cost=successor.cost)  # @inspect backpointers"
        }
      ],
      "env": {
        "backpointers": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "ucs_astar.Backpointer",
              "contents": {
                "prev_state": {
                  "type": "str",
                  "contents": "A",
                  "dtype": null,
                  "shape": null
                },
                "action": {
                  "type": "str",
                  "contents": "B",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 195,
          "function_name": "uniform_cost_search",
          "code": "for successor in problem.successors(state):  # @inspect successor @stepover"
        }
      ],
      "env": {
        "successor": {
          "type": "search.Step",
          "contents": {
            "action": {
              "type": "str",
              "contents": "C",
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 100,
              "dtype": null,
              "shape": null
            },
            "state": {
              "type": "str",
              "contents": "C",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 196,
          "function_name": "uniform_cost_search",
          "code": "if frontier.update(successor.state, past_cost + successor.cost):  # @stepover @inspect frontier"
        }
      ],
      "env": {
        "frontier": {
          "type": "ucs_astar.PriorityQueue",
          "contents": {
            "B": {
              "type": "float",
              "contents": 1.0,
              "dtype": null,
              "shape": null
            },
            "C": {
              "type": "float",
              "contents": 100.0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 198,
          "function_name": "uniform_cost_search",
          "code": "backpointers[successor.state] = Backpointer(prev_state=state, action=successor.action, cost=successor.cost)  # @inspect backpointers"
        }
      ],
      "env": {
        "backpointers": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "ucs_astar.Backpointer",
              "contents": {
                "prev_state": {
                  "type": "str",
                  "contents": "A",
                  "dtype": null,
                  "shape": null
                },
                "action": {
                  "type": "str",
                  "contents": "B",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            "C": {
              "type": "ucs_astar.Backpointer",
              "contents": {
                "prev_state": {
                  "type": "str",
                  "contents": "A",
                  "dtype": null,
                  "shape": null
                },
                "action": {
                  "type": "str",
                  "contents": "C",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 100,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 195,
          "function_name": "uniform_cost_search",
          "code": "for successor in problem.successors(state):  # @inspect successor @stepover"
        }
      ],
      "env": {
        "successor": {
          "type": "search.Step",
          "contents": {
            "action": {
              "type": "str",
              "contents": "C",
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 100,
              "dtype": null,
              "shape": null
            },
            "state": {
              "type": "str",
              "contents": "C",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 176,
          "function_name": "uniform_cost_search",
          "code": "while True:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 178,
          "function_name": "uniform_cost_search",
          "code": "state, past_cost = frontier.remove_min()  # @inspect state past_cost frontier @stepover"
        }
      ],
      "env": {
        "state": {
          "type": "str",
          "contents": "B",
          "dtype": null,
          "shape": null
        },
        "past_cost": {
          "type": "float",
          "contents": 1.0,
          "dtype": null,
          "shape": null
        },
        "frontier": {
          "type": "ucs_astar.PriorityQueue",
          "contents": {
            "C": {
              "type": "float",
              "contents": 100.0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 179,
          "function_name": "uniform_cost_search",
          "code": "if state is None and past_cost is None:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 182,
          "function_name": "uniform_cost_search",
          "code": "num_explored += 1  # @inspect num_explored"
        }
      ],
      "env": {
        "num_explored": {
          "type": "int",
          "contents": 2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 185,
          "function_name": "uniform_cost_search",
          "code": "if problem.is_end(state):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 195,
          "function_name": "uniform_cost_search",
          "code": "for successor in problem.successors(state):  # @inspect successor @stepover"
        }
      ],
      "env": {
        "successor": {
          "type": "search.Step",
          "contents": {
            "action": {
              "type": "str",
              "contents": "A",
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            "state": {
              "type": "str",
              "contents": "A",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 196,
          "function_name": "uniform_cost_search",
          "code": "if frontier.update(successor.state, past_cost + successor.cost):  # @stepover @inspect frontier"
        }
      ],
      "env": {
        "frontier": {
          "type": "ucs_astar.PriorityQueue",
          "contents": {
            "C": {
              "type": "float",
              "contents": 100.0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 195,
          "function_name": "uniform_cost_search",
          "code": "for successor in problem.successors(state):  # @inspect successor @stepover"
        }
      ],
      "env": {
        "successor": {
          "type": "search.Step",
          "contents": {
            "action": {
              "type": "str",
              "contents": "C",
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            "state": {
              "type": "str",
              "contents": "C",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 196,
          "function_name": "uniform_cost_search",
          "code": "if frontier.update(successor.state, past_cost + successor.cost):  # @stepover @inspect frontier"
        }
      ],
      "env": {
        "frontier": {
          "type": "ucs_astar.PriorityQueue",
          "contents": {
            "C": {
              "type": "float",
              "contents": 2.0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 198,
          "function_name": "uniform_cost_search",
          "code": "backpointers[successor.state] = Backpointer(prev_state=state, action=successor.action, cost=successor.cost)  # @inspect backpointers"
        }
      ],
      "env": {
        "backpointers": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "ucs_astar.Backpointer",
              "contents": {
                "prev_state": {
                  "type": "str",
                  "contents": "A",
                  "dtype": null,
                  "shape": null
                },
                "action": {
                  "type": "str",
                  "contents": "B",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            "C": {
              "type": "ucs_astar.Backpointer",
              "contents": {
                "prev_state": {
                  "type": "str",
                  "contents": "B",
                  "dtype": null,
                  "shape": null
                },
                "action": {
                  "type": "str",
                  "contents": "C",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 195,
          "function_name": "uniform_cost_search",
          "code": "for successor in problem.successors(state):  # @inspect successor @stepover"
        }
      ],
      "env": {
        "successor": {
          "type": "search.Step",
          "contents": {
            "action": {
              "type": "str",
              "contents": "D",
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 100,
              "dtype": null,
              "shape": null
            },
            "state": {
              "type": "str",
              "contents": "D",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 196,
          "function_name": "uniform_cost_search",
          "code": "if frontier.update(successor.state, past_cost + successor.cost):  # @stepover @inspect frontier"
        }
      ],
      "env": {
        "frontier": {
          "type": "ucs_astar.PriorityQueue",
          "contents": {
            "C": {
              "type": "float",
              "contents": 2.0,
              "dtype": null,
              "shape": null
            },
            "D": {
              "type": "float",
              "contents": 101.0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 198,
          "function_name": "uniform_cost_search",
          "code": "backpointers[successor.state] = Backpointer(prev_state=state, action=successor.action, cost=successor.cost)  # @inspect backpointers"
        }
      ],
      "env": {
        "backpointers": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "ucs_astar.Backpointer",
              "contents": {
                "prev_state": {
                  "type": "str",
                  "contents": "A",
                  "dtype": null,
                  "shape": null
                },
                "action": {
                  "type": "str",
                  "contents": "B",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            "C": {
              "type": "ucs_astar.Backpointer",
              "contents": {
                "prev_state": {
                  "type": "str",
                  "contents": "B",
                  "dtype": null,
                  "shape": null
                },
                "action": {
                  "type": "str",
                  "contents": "C",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            "D": {
              "type": "ucs_astar.Backpointer",
              "contents": {
                "prev_state": {
                  "type": "str",
                  "contents": "B",
                  "dtype": null,
                  "shape": null
                },
                "action": {
                  "type": "str",
                  "contents": "D",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 100,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 195,
          "function_name": "uniform_cost_search",
          "code": "for successor in problem.successors(state):  # @inspect successor @stepover"
        }
      ],
      "env": {
        "successor": {
          "type": "search.Step",
          "contents": {
            "action": {
              "type": "str",
              "contents": "D",
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 100,
              "dtype": null,
              "shape": null
            },
            "state": {
              "type": "str",
              "contents": "D",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 176,
          "function_name": "uniform_cost_search",
          "code": "while True:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 178,
          "function_name": "uniform_cost_search",
          "code": "state, past_cost = frontier.remove_min()  # @inspect state past_cost frontier @stepover"
        }
      ],
      "env": {
        "state": {
          "type": "str",
          "contents": "C",
          "dtype": null,
          "shape": null
        },
        "past_cost": {
          "type": "float",
          "contents": 2.0,
          "dtype": null,
          "shape": null
        },
        "frontier": {
          "type": "ucs_astar.PriorityQueue",
          "contents": {
            "D": {
              "type": "float",
              "contents": 101.0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 179,
          "function_name": "uniform_cost_search",
          "code": "if state is None and past_cost is None:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 182,
          "function_name": "uniform_cost_search",
          "code": "num_explored += 1  # @inspect num_explored"
        }
      ],
      "env": {
        "num_explored": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 185,
          "function_name": "uniform_cost_search",
          "code": "if problem.is_end(state):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 195,
          "function_name": "uniform_cost_search",
          "code": "for successor in problem.successors(state):  # @inspect successor @stepover"
        }
      ],
      "env": {
        "successor": {
          "type": "search.Step",
          "contents": {
            "action": {
              "type": "str",
              "contents": "A",
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 100,
              "dtype": null,
              "shape": null
            },
            "state": {
              "type": "str",
              "contents": "A",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 196,
          "function_name": "uniform_cost_search",
          "code": "if frontier.update(successor.state, past_cost + successor.cost):  # @stepover @inspect frontier"
        }
      ],
      "env": {
        "frontier": {
          "type": "ucs_astar.PriorityQueue",
          "contents": {
            "D": {
              "type": "float",
              "contents": 101.0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 195,
          "function_name": "uniform_cost_search",
          "code": "for successor in problem.successors(state):  # @inspect successor @stepover"
        }
      ],
      "env": {
        "successor": {
          "type": "search.Step",
          "contents": {
            "action": {
              "type": "str",
              "contents": "B",
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            "state": {
              "type": "str",
              "contents": "B",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 196,
          "function_name": "uniform_cost_search",
          "code": "if frontier.update(successor.state, past_cost + successor.cost):  # @stepover @inspect frontier"
        }
      ],
      "env": {
        "frontier": {
          "type": "ucs_astar.PriorityQueue",
          "contents": {
            "D": {
              "type": "float",
              "contents": 101.0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 195,
          "function_name": "uniform_cost_search",
          "code": "for successor in problem.successors(state):  # @inspect successor @stepover"
        }
      ],
      "env": {
        "successor": {
          "type": "search.Step",
          "contents": {
            "action": {
              "type": "str",
              "contents": "D",
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            "state": {
              "type": "str",
              "contents": "D",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 196,
          "function_name": "uniform_cost_search",
          "code": "if frontier.update(successor.state, past_cost + successor.cost):  # @stepover @inspect frontier"
        }
      ],
      "env": {
        "frontier": {
          "type": "ucs_astar.PriorityQueue",
          "contents": {
            "D": {
              "type": "float",
              "contents": 3.0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 198,
          "function_name": "uniform_cost_search",
          "code": "backpointers[successor.state] = Backpointer(prev_state=state, action=successor.action, cost=successor.cost)  # @inspect backpointers"
        }
      ],
      "env": {
        "backpointers": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "ucs_astar.Backpointer",
              "contents": {
                "prev_state": {
                  "type": "str",
                  "contents": "A",
                  "dtype": null,
                  "shape": null
                },
                "action": {
                  "type": "str",
                  "contents": "B",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            "C": {
              "type": "ucs_astar.Backpointer",
              "contents": {
                "prev_state": {
                  "type": "str",
                  "contents": "B",
                  "dtype": null,
                  "shape": null
                },
                "action": {
                  "type": "str",
                  "contents": "C",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            "D": {
              "type": "ucs_astar.Backpointer",
              "contents": {
                "prev_state": {
                  "type": "str",
                  "contents": "C",
                  "dtype": null,
                  "shape": null
                },
                "action": {
                  "type": "str",
                  "contents": "D",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 195,
          "function_name": "uniform_cost_search",
          "code": "for successor in problem.successors(state):  # @inspect successor @stepover"
        }
      ],
      "env": {
        "successor": {
          "type": "search.Step",
          "contents": {
            "action": {
              "type": "str",
              "contents": "D",
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            "state": {
              "type": "str",
              "contents": "D",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 176,
          "function_name": "uniform_cost_search",
          "code": "while True:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 178,
          "function_name": "uniform_cost_search",
          "code": "state, past_cost = frontier.remove_min()  # @inspect state past_cost frontier @stepover"
        }
      ],
      "env": {
        "state": {
          "type": "str",
          "contents": "D",
          "dtype": null,
          "shape": null
        },
        "past_cost": {
          "type": "float",
          "contents": 3.0,
          "dtype": null,
          "shape": null
        },
        "frontier": {
          "type": "ucs_astar.PriorityQueue",
          "contents": {},
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 179,
          "function_name": "uniform_cost_search",
          "code": "if state is None and past_cost is None:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 182,
          "function_name": "uniform_cost_search",
          "code": "num_explored += 1  # @inspect num_explored"
        }
      ],
      "env": {
        "num_explored": {
          "type": "int",
          "contents": 4,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 185,
          "function_name": "uniform_cost_search",
          "code": "if problem.is_end(state):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 187,
          "function_name": "uniform_cost_search",
          "code": "steps = []  # @inspect steps @clear successor"
        }
      ],
      "env": {
        "steps": {
          "type": "list",
          "contents": [],
          "dtype": null,
          "shape": null
        },
        "successor": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 188,
          "function_name": "uniform_cost_search",
          "code": "while state != start_state:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 189,
          "function_name": "uniform_cost_search",
          "code": "backpointer = backpointers[state]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 190,
          "function_name": "uniform_cost_search",
          "code": "steps.insert(0, Step(backpointer.action, backpointer.cost, state))  # Prepend @inspect steps"
        }
      ],
      "env": {
        "steps": {
          "type": "list",
          "contents": [
            {
              "type": "search.Step",
              "contents": {
                "action": {
                  "type": "str",
                  "contents": "D",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "str",
                  "contents": "D",
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 191,
          "function_name": "uniform_cost_search",
          "code": "state = backpointer.prev_state  # Go back @inspect state"
        }
      ],
      "env": {
        "state": {
          "type": "str",
          "contents": "C",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 188,
          "function_name": "uniform_cost_search",
          "code": "while state != start_state:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 189,
          "function_name": "uniform_cost_search",
          "code": "backpointer = backpointers[state]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 190,
          "function_name": "uniform_cost_search",
          "code": "steps.insert(0, Step(backpointer.action, backpointer.cost, state))  # Prepend @inspect steps"
        }
      ],
      "env": {
        "steps": {
          "type": "list",
          "contents": [
            {
              "type": "search.Step",
              "contents": {
                "action": {
                  "type": "str",
                  "contents": "C",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "str",
                  "contents": "C",
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "search.Step",
              "contents": {
                "action": {
                  "type": "str",
                  "contents": "D",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "str",
                  "contents": "D",
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 191,
          "function_name": "uniform_cost_search",
          "code": "state = backpointer.prev_state  # Go back @inspect state"
        }
      ],
      "env": {
        "state": {
          "type": "str",
          "contents": "B",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 188,
          "function_name": "uniform_cost_search",
          "code": "while state != start_state:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 189,
          "function_name": "uniform_cost_search",
          "code": "backpointer = backpointers[state]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 190,
          "function_name": "uniform_cost_search",
          "code": "steps.insert(0, Step(backpointer.action, backpointer.cost, state))  # Prepend @inspect steps"
        }
      ],
      "env": {
        "steps": {
          "type": "list",
          "contents": [
            {
              "type": "search.Step",
              "contents": {
                "action": {
                  "type": "str",
                  "contents": "B",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "str",
                  "contents": "B",
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "search.Step",
              "contents": {
                "action": {
                  "type": "str",
                  "contents": "C",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "str",
                  "contents": "C",
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "search.Step",
              "contents": {
                "action": {
                  "type": "str",
                  "contents": "D",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "str",
                  "contents": "D",
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 191,
          "function_name": "uniform_cost_search",
          "code": "state = backpointer.prev_state  # Go back @inspect state"
        }
      ],
      "env": {
        "state": {
          "type": "str",
          "contents": "A",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 188,
          "function_name": "uniform_cost_search",
          "code": "while state != start_state:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 192,
          "function_name": "uniform_cost_search",
          "code": "return Solution(steps=steps), num_explored"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 247,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored"
        }
      ],
      "env": {
        "solution": {
          "type": "search.Solution",
          "contents": {
            "steps": {
              "type": "list",
              "contents": [
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "B",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "str",
                      "contents": "B",
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "C",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "str",
                      "contents": "C",
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "D",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "str",
                      "contents": "D",
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 3,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "num_explored": {
          "type": "int",
          "contents": 4,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 249,
          "function_name": "ucs_examples",
          "code": "text(\"Let's consider another search problem:\")  # @clear solution"
        }
      ],
      "env": {
        "solution": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's consider another search problem:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 250,
          "function_name": "ucs_examples",
          "code": "text(\"- States are points on a grid (start at S, end at E)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- States are points on a grid (start at S, end at E)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 251,
          "function_name": "ucs_examples",
          "code": "text(\"- Actions: up, down, left, right\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Actions: up, down, left, right",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 252,
          "function_name": "ucs_examples",
          "code": "text(\"- Cost: 1 for each action\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Cost: 1 for each action",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 253,
          "function_name": "ucs_examples",
          "code": "problem = GridSearchProblem(  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 255,
          "function_name": "ucs_examples",
          "code": "\" S . . . .\", # 0"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 256,
          "function_name": "ucs_examples",
          "code": "\" # # # . #\", # 1"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 257,
          "function_name": "ucs_examples",
          "code": "\" . . . . .\", # 2"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 258,
          "function_name": "ucs_examples",
          "code": "\" . # # # #\", # 3"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 259,
          "function_name": "ucs_examples",
          "code": "\" . . . . E\", # 4"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 253,
          "function_name": "ucs_examples",
          "code": "problem = GridSearchProblem(  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 253,
          "function_name": "ucs_examples",
          "code": "problem = GridSearchProblem(  # @stepover"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 65,
          "function_name": "__init__",
          "code": "def __init__(self, *rows: list[str]):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 253,
          "function_name": "ucs_examples",
          "code": "problem = GridSearchProblem(  # @stepover"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 67,
          "function_name": "__init__",
          "code": "self.rows = [row.replace(\" \", \"\") for row in rows]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 253,
          "function_name": "ucs_examples",
          "code": "problem = GridSearchProblem(  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 261,
          "function_name": "ucs_examples",
          "code": "image(draw_graph(problem).render(\"var/grid_graph\", format=\"png\"), width=100)  # @stepover"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "var/grid_graph.png",
          "style": {
            "width": 100
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 263,
          "function_name": "ucs_examples",
          "code": "state = problem.start_state()  # @inspect state @stepover"
        }
      ],
      "env": {
        "state": {
          "type": "tuple",
          "contents": [
            {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 264,
          "function_name": "ucs_examples",
          "code": "successors = problem.successors(state)  # @inspect successors @stepover"
        }
      ],
      "env": {
        "successors": {
          "type": "list",
          "contents": [
            {
              "type": "search.Step",
              "contents": {
                "action": {
                  "type": "str",
                  "contents": "right",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "tuple",
                  "contents": [
                    {
                      "type": "int",
                      "contents": 0,
                      "dtype": null,
                      "shape": null
                    },
                    {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    }
                  ],
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 265,
          "function_name": "ucs_examples",
          "code": "is_end = problem.is_end(successors[0].state)  # @inspect is_end @stepover"
        }
      ],
      "env": {
        "is_end": {
          "type": "bool",
          "contents": false,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 267,
          "function_name": "ucs_examples",
          "code": "text(\"Let's run UCS on this example.\")  # @clear state successors is_end"
        }
      ],
      "env": {
        "state": null,
        "successors": null,
        "is_end": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's run UCS on this example.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 268,
          "function_name": "ucs_examples",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored @stepover"
        }
      ],
      "env": {
        "solution": {
          "type": "search.Solution",
          "contents": {
            "steps": {
              "type": "list",
              "contents": [
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 1,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 3,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "down",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 1,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 3,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "down",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 3,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "left",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "left",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 1,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "left",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "down",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 3,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "down",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 1,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 3,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 14,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "num_explored": {
          "type": "int",
          "contents": 17,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 270,
          "function_name": "ucs_examples",
          "code": "text(\"Here is a much larger example where each pixel is a state:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Here is a much larger example where each pixel is a state:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 271,
          "function_name": "ucs_examples",
          "code": "link(\"https://www.youtube.com/watch?v=z6lUnb9ktkE\", title=\"[UCS video]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[UCS video]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://www.youtube.com/watch?v=z6lUnb9ktkE",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 113,
          "function_name": "ucs",
          "code": "ucs_examples()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 294,
          "function_name": "ucs_correctness",
          "code": "def ucs_correctness():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 295,
          "function_name": "ucs_correctness",
          "code": "text(\"We now prove that UCS is guaranteed to compute the minimum cost solution.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We now prove that UCS is guaranteed to compute the minimum cost solution.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 296,
          "function_name": "ucs_correctness",
          "code": "text(\"Assumption: all costs are non-negative.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Assumption: all costs are non-negative.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 298,
          "function_name": "ucs_correctness",
          "code": "image(\"images/ucs-strategy.png\", width=300)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/ucs-strategy.png",
          "style": {
            "width": 300
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 299,
          "function_name": "ucs_correctness",
          "code": "text(\"**Theorem:**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Theorem:**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 300,
          "function_name": "ucs_correctness",
          "code": "text(\"- Suppose UCS moves a state s from the frontier to the explored set.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Suppose UCS moves a state s from the frontier to the explored set.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 301,
          "function_name": "ucs_correctness",
          "code": "text(\"- Then priority(s) = PastCost(s).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Then priority(s) = PastCost(s).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 303,
          "function_name": "ucs_correctness",
          "code": "text(\"Let's prove by induction.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's prove by induction.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 304,
          "function_name": "ucs_correctness",
          "code": "text(\"Base case: priority(start) = PastCost(start) = 0.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Base case: priority(start) = PastCost(start) = 0.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 306,
          "function_name": "ucs_correctness",
          "code": "image(\"images/ucs-proof.png\", width=300)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/ucs-proof.png",
          "style": {
            "width": 300
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 307,
          "function_name": "ucs_correctness",
          "code": "text(\"Inductive case: assume priority(s) = PastCost(s) for all s in explored.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Inductive case: assume priority(s) = PastCost(s) for all s in explored.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 308,
          "function_name": "ucs_correctness",
          "code": "text(\"- Suppose we remove s from the frontier, corresponding to blue path.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Suppose we remove s from the frontier, corresponding to blue path.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 309,
          "function_name": "ucs_correctness",
          "code": "text(\"- Consider any alternative red path to s that goes through t (in explored) and u (in frontier).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Consider any alternative red path to s that goes through t (in explored) and u (in frontier).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 310,
          "function_name": "ucs_correctness",
          "code": "text(\"- Want to show cost(red) >= cost(blue).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Want to show cost(red) >= cost(blue).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 311,
          "function_name": "ucs_correctness",
          "code": "text(\"cost(red)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "cost(red)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 312,
          "function_name": "ucs_correctness",
          "code": "text(\"\u2265 PastCost(t) + Cost(t, u) [PastCost(t) is minimum cost to t, u to s is non-negative]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "\u2265 PastCost(t) + Cost(t, u) [PastCost(t) is minimum cost to t, u to s is non-negative]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 313,
          "function_name": "ucs_correctness",
          "code": "text(\"= priority(t) + Cost(t, u) [inductive hypothesis]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "= priority(t) + Cost(t, u) [inductive hypothesis]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 314,
          "function_name": "ucs_correctness",
          "code": "text(\"\u2265 priority(u) [t is explored, used to update priority(u)]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "\u2265 priority(u) [t is explored, used to update priority(u)]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 315,
          "function_name": "ucs_correctness",
          "code": "text(\"\u2265 priority(s) [s has minimum priority from frontier]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "\u2265 priority(s) [s has minimum priority from frontier]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 316,
          "function_name": "ucs_correctness",
          "code": "text(\"= cost(blue) [by definition]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "= cost(blue) [by definition]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 114,
          "function_name": "ucs",
          "code": "ucs_correctness()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 116,
          "function_name": "ucs",
          "code": "text(\"Summary of uniform cost search (UCS)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary of uniform cost search (UCS)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 117,
          "function_name": "ucs",
          "code": "text(\"- Computes past costs for each state in non-decreasing order.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Computes past costs for each state in non-decreasing order.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 118,
          "function_name": "ucs",
          "code": "text(\"- Uses a priority queue to efficiently find the state with the lowest priority.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Uses a priority queue to efficiently find the state with the lowest priority.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 119,
          "function_name": "ucs",
          "code": "text(\"- Guaranteed to compute the minimum cost solution if non-negative costs.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Guaranteed to compute the minimum cost solution if non-negative costs.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 26,
          "function_name": "main",
          "code": "ucs()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 319,
          "function_name": "astar",
          "code": "def astar():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 320,
          "function_name": "astar",
          "code": "text(\"UCS in action: \"), link(\"https://www.youtube.com/watch?v=z6lUnb9ktkE\", title=\"[UCS video]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "UCS in action: ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[UCS video]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://www.youtube.com/watch?v=z6lUnb9ktkE",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 321,
          "function_name": "astar",
          "code": "text(\"A* in action: \"), link(\"https://www.youtube.com/watch?v=huJEgJ82360\", title=\"[A* video]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "A* in action: ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[A* video]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://www.youtube.com/watch?v=huJEgJ82360",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 323,
          "function_name": "astar",
          "code": "text(\"UCS orders states by increasing past cost (which has no knowledge of the end state).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "UCS orders states by increasing past cost (which has no knowledge of the end state).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 324,
          "function_name": "astar",
          "code": "text(\"We would also like to consider the cost from state to an end state.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We would also like to consider the cost from state to an end state.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 325,
          "function_name": "astar",
          "code": "text(\"Ideal: explore in order of PastCost(s) + FutureCost(s)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Ideal: explore in order of PastCost(s) + FutureCost(s)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 326,
          "function_name": "astar",
          "code": "text(\"A*: explore in order of PastCost(s) + h(s) for some **heuristic** h(s)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "A*: explore in order of PastCost(s) + h(s) for some **heuristic** h(s)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 327,
          "function_name": "astar",
          "code": "text(\"h(s) is an approximation of FutureCost(s)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "h(s) is an approximation of FutureCost(s)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 329,
          "function_name": "astar",
          "code": "text(\"**A* algorithm** [Hart/Nilsson/Raphael 1968]: run UCS with modified costs:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**A* algorithm** [Hart/Nilsson/Raphael 1968]: run UCS with modified costs:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 330,
          "function_name": "astar",
          "code": "text(\"Cost'(s, a) = Cost(s, a) + [h(Succ(s, a)) - h(s)]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Cost'(s, a) = Cost(s, a) + [h(Succ(s, a)) - h(s)]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 331,
          "function_name": "astar",
          "code": "text(\"Intuition: add a penalty for how much action takes us away from the end state\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Intuition: add a penalty for how much action takes us away from the end state",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 333,
          "function_name": "astar",
          "code": "text(\"Let's consider a simple example:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's consider a simple example:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 334,
          "function_name": "astar",
          "code": "problem = LineSearchProblem()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 335,
          "function_name": "astar",
          "code": "image(draw_graph(problem).render(\"var/line_graph\", format=\"png\"), width=100)  # @stepover"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "var/line_graph.png",
          "style": {
            "width": 100
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 336,
          "function_name": "astar",
          "code": "state = problem.start_state()  # @inspect state @stepover"
        }
      ],
      "env": {
        "state": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 337,
          "function_name": "astar",
          "code": "successors = problem.successors(state)  # @inspect successors"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 337,
          "function_name": "astar",
          "code": "successors = problem.successors(state)  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 388,
          "function_name": "successors",
          "code": "def successors(self, state: int) -> list[Step]:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 337,
          "function_name": "astar",
          "code": "successors = problem.successors(state)  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 389,
          "function_name": "successors",
          "code": "successors = []"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 337,
          "function_name": "astar",
          "code": "successors = problem.successors(state)  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 390,
          "function_name": "successors",
          "code": "if state >= -2:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 337,
          "function_name": "astar",
          "code": "successors = problem.successors(state)  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 391,
          "function_name": "successors",
          "code": "successors.append(Step(action=\"left\", cost=1, state=state - 1))"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 337,
          "function_name": "astar",
          "code": "successors = problem.successors(state)  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 392,
          "function_name": "successors",
          "code": "if state <= 2:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 337,
          "function_name": "astar",
          "code": "successors = problem.successors(state)  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 393,
          "function_name": "successors",
          "code": "successors.append(Step(action=\"right\", cost=1, state=state + 1))"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 337,
          "function_name": "astar",
          "code": "successors = problem.successors(state)  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 394,
          "function_name": "successors",
          "code": "return successors"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 337,
          "function_name": "astar",
          "code": "successors = problem.successors(state)  # @inspect successors"
        }
      ],
      "env": {
        "successors": {
          "type": "list",
          "contents": [
            {
              "type": "search.Step",
              "contents": {
                "action": {
                  "type": "str",
                  "contents": "left",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "search.Step",
              "contents": {
                "action": {
                  "type": "str",
                  "contents": "right",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 338,
          "function_name": "astar",
          "code": "is_end = problem.is_end(successors[0].state)  # @inspect is_end"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 338,
          "function_name": "astar",
          "code": "is_end = problem.is_end(successors[0].state)  # @inspect is_end"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 396,
          "function_name": "is_end",
          "code": "def is_end(self, state: int) -> bool:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 338,
          "function_name": "astar",
          "code": "is_end = problem.is_end(successors[0].state)  # @inspect is_end"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 397,
          "function_name": "is_end",
          "code": "return state == 2"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 338,
          "function_name": "astar",
          "code": "is_end = problem.is_end(successors[0].state)  # @inspect is_end"
        }
      ],
      "env": {
        "is_end": {
          "type": "bool",
          "contents": false,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 340,
          "function_name": "astar",
          "code": "text(\"Let's run UCS on this example.\")  # @clear state successors is_end"
        }
      ],
      "env": {
        "state": null,
        "successors": null,
        "is_end": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's run UCS on this example.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 341,
          "function_name": "astar",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored @stepover"
        }
      ],
      "env": {
        "solution": {
          "type": "search.Solution",
          "contents": {
            "steps": {
              "type": "list",
              "contents": [
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "int",
                      "contents": 2,
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 2,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "num_explored": {
          "type": "int",
          "contents": 5,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 343,
          "function_name": "astar",
          "code": "text(\"Let's run A* on this example.\")  # @clear solution num_explored"
        }
      ],
      "env": {
        "solution": null,
        "num_explored": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's run A* on this example.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 344,
          "function_name": "astar",
          "code": "def line_heuristic(state: int) -> float:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 346,
          "function_name": "astar",
          "code": "cost = line_heuristic(2)  # @inspect cost  @stepover"
        }
      ],
      "env": {
        "cost": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 347,
          "function_name": "astar",
          "code": "cost = line_heuristic(0)  # @inspect cost @stepover"
        }
      ],
      "env": {
        "cost": {
          "type": "int",
          "contents": 2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 348,
          "function_name": "astar",
          "code": "cost = line_heuristic(-2)  # @inspect cost @stepover"
        }
      ],
      "env": {
        "cost": {
          "type": "int",
          "contents": 4,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 350,
          "function_name": "astar",
          "code": "modified_problem = ModifiedSearchProblem(problem, heuristic=line_heuristic)  # @stepover @clear cost"
        }
      ],
      "env": {
        "cost": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 351,
          "function_name": "astar",
          "code": "successors = modified_problem.successors(0)  # @inspect successors"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 351,
          "function_name": "astar",
          "code": "successors = modified_problem.successors(0)  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 428,
          "function_name": "successors",
          "code": "def successors(self, state: Any) -> list[Step]:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 351,
          "function_name": "astar",
          "code": "successors = modified_problem.successors(0)  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 430,
          "function_name": "successors",
          "code": "successors = []"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 351,
          "function_name": "astar",
          "code": "successors = modified_problem.successors(0)  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 431,
          "function_name": "successors",
          "code": "for successor in self.problem.successors(state):  # @inspect successor @stepover"
        }
      ],
      "env": {
        "successor": {
          "type": "search.Step",
          "contents": {
            "action": {
              "type": "str",
              "contents": "left",
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            "state": {
              "type": "int",
              "contents": -1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 351,
          "function_name": "astar",
          "code": "successors = modified_problem.successors(0)  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 433,
          "function_name": "successors",
          "code": "modified_cost = successor.cost + self.heuristic(successor.state) - self.heuristic(state)  # @inspect modified_cost @stepover"
        }
      ],
      "env": {
        "modified_cost": {
          "type": "int",
          "contents": 2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 351,
          "function_name": "astar",
          "code": "successors = modified_problem.successors(0)  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 434,
          "function_name": "successors",
          "code": "successors.append(Step(successor.action, modified_cost, successor.state))"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 351,
          "function_name": "astar",
          "code": "successors = modified_problem.successors(0)  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 431,
          "function_name": "successors",
          "code": "for successor in self.problem.successors(state):  # @inspect successor @stepover"
        }
      ],
      "env": {
        "successor": {
          "type": "search.Step",
          "contents": {
            "action": {
              "type": "str",
              "contents": "right",
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            "state": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 351,
          "function_name": "astar",
          "code": "successors = modified_problem.successors(0)  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 433,
          "function_name": "successors",
          "code": "modified_cost = successor.cost + self.heuristic(successor.state) - self.heuristic(state)  # @inspect modified_cost @stepover"
        }
      ],
      "env": {
        "modified_cost": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 351,
          "function_name": "astar",
          "code": "successors = modified_problem.successors(0)  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 434,
          "function_name": "successors",
          "code": "successors.append(Step(successor.action, modified_cost, successor.state))"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 351,
          "function_name": "astar",
          "code": "successors = modified_problem.successors(0)  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 431,
          "function_name": "successors",
          "code": "for successor in self.problem.successors(state):  # @inspect successor @stepover"
        }
      ],
      "env": {
        "successor": {
          "type": "search.Step",
          "contents": {
            "action": {
              "type": "str",
              "contents": "right",
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            "state": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 351,
          "function_name": "astar",
          "code": "successors = modified_problem.successors(0)  # @inspect successors"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 435,
          "function_name": "successors",
          "code": "return successors"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 351,
          "function_name": "astar",
          "code": "successors = modified_problem.successors(0)  # @inspect successors"
        }
      ],
      "env": {
        "successors": {
          "type": "list",
          "contents": [
            {
              "type": "search.Step",
              "contents": {
                "action": {
                  "type": "str",
                  "contents": "left",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 2,
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "search.Step",
              "contents": {
                "action": {
                  "type": "str",
                  "contents": "right",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 0,
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 352,
          "function_name": "astar",
          "code": "text(\"Note that the heuristic makes us favor going to the right.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note that the heuristic makes us favor going to the right.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 400,
          "function_name": "astar_search",
          "code": "def astar_search(problem: SearchProblem, heuristic: Heuristic) -> tuple[Solution | None, int]:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 402,
          "function_name": "astar_search",
          "code": "modified_problem = ModifiedSearchProblem(problem, heuristic)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 403,
          "function_name": "astar_search",
          "code": "modified_solution, num_explored = uniform_cost_search(modified_problem)  # @stepover @inspect modified_solution num_explored"
        }
      ],
      "env": {
        "modified_solution": {
          "type": "search.Solution",
          "contents": {
            "steps": {
              "type": "list",
              "contents": [
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 0,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 0,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "int",
                      "contents": 2,
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "num_explored": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 407,
          "function_name": "astar_search",
          "code": "state = problem.start_state()  # @inspect state @stepover"
        }
      ],
      "env": {
        "state": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 408,
          "function_name": "astar_search",
          "code": "steps = []  # @inspect steps"
        }
      ],
      "env": {
        "steps": {
          "type": "list",
          "contents": [],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 409,
          "function_name": "astar_search",
          "code": "for step in modified_solution.steps:  # step: state ----> step.state @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "search.Step",
          "contents": {
            "action": {
              "type": "str",
              "contents": "right",
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "state": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 410,
          "function_name": "astar_search",
          "code": "modified_cost = step.cost  # @inspect modified_cost"
        }
      ],
      "env": {
        "modified_cost": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 412,
          "function_name": "astar_search",
          "code": "original_cost = modified_cost - heuristic(step.state) + heuristic(state)  # @inspect original_cost @stepover"
        }
      ],
      "env": {
        "original_cost": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 413,
          "function_name": "astar_search",
          "code": "steps.append(Step(step.action, original_cost, step.state))  # @inspect steps"
        }
      ],
      "env": {
        "steps": {
          "type": "list",
          "contents": [
            {
              "type": "search.Step",
              "contents": {
                "action": {
                  "type": "str",
                  "contents": "right",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 414,
          "function_name": "astar_search",
          "code": "state = step.state"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 409,
          "function_name": "astar_search",
          "code": "for step in modified_solution.steps:  # step: state ----> step.state @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "search.Step",
          "contents": {
            "action": {
              "type": "str",
              "contents": "right",
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "state": {
              "type": "int",
              "contents": 2,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 410,
          "function_name": "astar_search",
          "code": "modified_cost = step.cost  # @inspect modified_cost"
        }
      ],
      "env": {
        "modified_cost": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 412,
          "function_name": "astar_search",
          "code": "original_cost = modified_cost - heuristic(step.state) + heuristic(state)  # @inspect original_cost @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 412,
          "function_name": "astar_search",
          "code": "original_cost = modified_cost - heuristic(step.state) + heuristic(state)  # @inspect original_cost @stepover"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 344,
          "function_name": "line_heuristic",
          "code": "def line_heuristic(state: int) -> float:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 412,
          "function_name": "astar_search",
          "code": "original_cost = modified_cost - heuristic(step.state) + heuristic(state)  # @inspect original_cost @stepover"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 345,
          "function_name": "line_heuristic",
          "code": "return 2 - state"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 412,
          "function_name": "astar_search",
          "code": "original_cost = modified_cost - heuristic(step.state) + heuristic(state)  # @inspect original_cost @stepover"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 344,
          "function_name": "line_heuristic",
          "code": "def line_heuristic(state: int) -> float:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 412,
          "function_name": "astar_search",
          "code": "original_cost = modified_cost - heuristic(step.state) + heuristic(state)  # @inspect original_cost @stepover"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 345,
          "function_name": "line_heuristic",
          "code": "return 2 - state"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 412,
          "function_name": "astar_search",
          "code": "original_cost = modified_cost - heuristic(step.state) + heuristic(state)  # @inspect original_cost @stepover"
        }
      ],
      "env": {
        "original_cost": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 413,
          "function_name": "astar_search",
          "code": "steps.append(Step(step.action, original_cost, step.state))  # @inspect steps"
        }
      ],
      "env": {
        "steps": {
          "type": "list",
          "contents": [
            {
              "type": "search.Step",
              "contents": {
                "action": {
                  "type": "str",
                  "contents": "right",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "search.Step",
              "contents": {
                "action": {
                  "type": "str",
                  "contents": "right",
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "int",
                  "contents": 2,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 414,
          "function_name": "astar_search",
          "code": "state = step.state"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 409,
          "function_name": "astar_search",
          "code": "for step in modified_solution.steps:  # step: state ----> step.state @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "search.Step",
          "contents": {
            "action": {
              "type": "str",
              "contents": "right",
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "state": {
              "type": "int",
              "contents": 2,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 415,
          "function_name": "astar_search",
          "code": "solution = Solution(steps=steps)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 416,
          "function_name": "astar_search",
          "code": "return solution, num_explored"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 354,
          "function_name": "astar",
          "code": "solution = astar_search(problem, heuristic=line_heuristic)  # @inspect solution"
        }
      ],
      "env": {
        "solution": {
          "type": "tuple",
          "contents": [
            {
              "type": "search.Solution",
              "contents": {
                "steps": {
                  "type": "list",
                  "contents": [
                    {
                      "type": "search.Step",
                      "contents": {
                        "action": {
                          "type": "str",
                          "contents": "right",
                          "dtype": null,
                          "shape": null
                        },
                        "cost": {
                          "type": "int",
                          "contents": 1,
                          "dtype": null,
                          "shape": null
                        },
                        "state": {
                          "type": "int",
                          "contents": 1,
                          "dtype": null,
                          "shape": null
                        }
                      },
                      "dtype": null,
                      "shape": null
                    },
                    {
                      "type": "search.Step",
                      "contents": {
                        "action": {
                          "type": "str",
                          "contents": "right",
                          "dtype": null,
                          "shape": null
                        },
                        "cost": {
                          "type": "int",
                          "contents": 1,
                          "dtype": null,
                          "shape": null
                        },
                        "state": {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        }
                      },
                      "dtype": null,
                      "shape": null
                    }
                  ],
                  "dtype": null,
                  "shape": null
                },
                "cost": {
                  "type": "int",
                  "contents": 2,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 3,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 356,
          "function_name": "astar",
          "code": "text(\"Will any heuristic work?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Will any heuristic work?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 357,
          "function_name": "astar",
          "code": "text(\"No.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "No.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 358,
          "function_name": "astar",
          "code": "image(\"images/astar-counterexample.png\", width=300)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/astar-counterexample.png",
          "style": {
            "width": 300
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 359,
          "function_name": "astar",
          "code": "text(\"Here, h(C) = 1000 actively messes things up.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Here, h(C) = 1000 actively messes things up.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 361,
          "function_name": "astar",
          "code": "text(\"**Consistency**: a heuristic h is consistent when\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Consistency**: a heuristic h is consistent when",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 362,
          "function_name": "astar",
          "code": "text(\"- Cost(s, a) + h(Succ(s, a)) - h(s) is non-negative (these are the modified costs!).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Cost(s, a) + h(Succ(s, a)) - h(s) is non-negative (these are the modified costs!).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 363,
          "function_name": "astar",
          "code": "text(\"- h(end) = 0.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- h(end) = 0.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 364,
          "function_name": "astar",
          "code": "text(\"UCS does not work with negative costs.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "UCS does not work with negative costs.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 366,
          "function_name": "astar",
          "code": "text(\"Proposition (correctness): A* is correct if h is consistent.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Proposition (correctness): A* is correct if h is consistent.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 367,
          "function_name": "astar",
          "code": "text(\"Proof:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Proof:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 368,
          "function_name": "astar",
          "code": "text(\"- Consider any path from the start state to the end state.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Consider any path from the start state to the end state.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 369,
          "function_name": "astar",
          "code": "text(\"- The sum of the modified costs is the sum of the original costs - h(start).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- The sum of the modified costs is the sum of the original costs - h(start).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 370,
          "function_name": "astar",
          "code": "text(\"- Reason: telescoping sums\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Reason: telescoping sums",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 372,
          "function_name": "astar",
          "code": "text(\"Proposition (efficiency): A* explores all states statisfying\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Proposition (efficiency): A* explores all states statisfying",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 373,
          "function_name": "astar",
          "code": "text(\"PastCost(s) <= PastCost(end) - h(s)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "PastCost(s) <= PastCost(end) - h(s)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 374,
          "function_name": "astar",
          "code": "text(\"Proof: A* explores all s such that PastCost(s) + h(s) <= PastCost(end)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Proof: A* explores all s such that PastCost(s) + h(s) <= PastCost(end)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 375,
          "function_name": "astar",
          "code": "text(\"- If h(s) = 0, then A* = UCS.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- If h(s) = 0, then A* = UCS.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 376,
          "function_name": "astar",
          "code": "text(\"- If h(s) = FutureCost(s), then A* explores only nodes on minimum cost path.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- If h(s) = FutureCost(s), then A* explores only nodes on minimum cost path.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 377,
          "function_name": "astar",
          "code": "text(\"- Usually h(s) is somewhere in between.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Usually h(s) is somewhere in between.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 379,
          "function_name": "astar",
          "code": "text(\"Definition (admissibility): h is admissible when h(s) <= FutureCost(s)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Definition (admissibility): h is admissible when h(s) <= FutureCost(s)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 380,
          "function_name": "astar",
          "code": "text(\"In other words: h always underestimates the cost\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In other words: h always underestimates the cost",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 381,
          "function_name": "astar",
          "code": "text(\"Consistency implies admissibility.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Consistency implies admissibility.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 27,
          "function_name": "main",
          "code": "astar()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 441,
          "function_name": "astar_relaxations",
          "code": "def astar_relaxations():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 442,
          "function_name": "astar_relaxations",
          "code": "text(\"So far: A* = UCS with a modified cost based on a heuristic function h\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So far: A* = UCS with a modified cost based on a heuristic function h",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 443,
          "function_name": "astar_relaxations",
          "code": "text(\"h(s) needs to be consistent for A* to be correct\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "h(s) needs to be consistent for A* to be correct",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 444,
          "function_name": "astar_relaxations",
          "code": "text(\"How do we choose h?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "How do we choose h?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 446,
          "function_name": "astar_relaxations",
          "code": "text(\"Key principle: **relaxation**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Key principle: **relaxation**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 447,
          "function_name": "astar_relaxations",
          "code": "text(\"Ideally, h(s) = FutureCost(s), but that's just as hard as solving the original problem.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Ideally, h(s) = FutureCost(s), but that's just as hard as solving the original problem.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 448,
          "function_name": "astar_relaxations",
          "code": "text(\"So let's relax the problem to make it easier.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So let's relax the problem to make it easier.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 450,
          "function_name": "astar_relaxations",
          "code": "text(\"Winning recipe:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Winning recipe:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 451,
          "function_name": "astar_relaxations",
          "code": "text(\"- Define a relaxed problem by getting rid of some constraints.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Define a relaxed problem by getting rid of some constraints.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 452,
          "function_name": "astar_relaxations",
          "code": "text(\"- Compute FutureCost_relaxed(s) to be the future cost of state s under the relaxed problem.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Compute FutureCost_relaxed(s) to be the future cost of state s under the relaxed problem.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 453,
          "function_name": "astar_relaxations",
          "code": "text(\"- Run A* using heuristic h(s) = FutureCost_relaxed(s).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Run A* using heuristic h(s) = FutureCost_relaxed(s).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 455,
          "function_name": "astar_relaxations",
          "code": "text(\"Here are some ways in which the relaxed problem is easier.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Here are some ways in which the relaxed problem is easier.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 463,
          "function_name": "closed_form_solution",
          "code": "def closed_form_solution():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 464,
          "function_name": "closed_form_solution",
          "code": "text(\"Recall the grid problem of going from S to E without going through walls (#).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall the grid problem of going from S to E without going through walls (#).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 466,
          "function_name": "closed_form_solution",
          "code": "problem = GridSearchProblem(  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 468,
          "function_name": "closed_form_solution",
          "code": "\" S . . . .\", # 0"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 469,
          "function_name": "closed_form_solution",
          "code": "\" # # # . #\", # 1"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 470,
          "function_name": "closed_form_solution",
          "code": "\" . . . . .\", # 2"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 471,
          "function_name": "closed_form_solution",
          "code": "\" . # # # #\", # 3"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 472,
          "function_name": "closed_form_solution",
          "code": "\" . . . . E\", # 4"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 466,
          "function_name": "closed_form_solution",
          "code": "problem = GridSearchProblem(  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 466,
          "function_name": "closed_form_solution",
          "code": "problem = GridSearchProblem(  # @stepover"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 65,
          "function_name": "__init__",
          "code": "def __init__(self, *rows: list[str]):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 466,
          "function_name": "closed_form_solution",
          "code": "problem = GridSearchProblem(  # @stepover"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 67,
          "function_name": "__init__",
          "code": "self.rows = [row.replace(\" \", \"\") for row in rows]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 466,
          "function_name": "closed_form_solution",
          "code": "problem = GridSearchProblem(  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 475,
          "function_name": "closed_form_solution",
          "code": "text(\"In the relaxed problem, just remove all the walls!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In the relaxed problem, just remove all the walls!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 476,
          "function_name": "closed_form_solution",
          "code": "relaxed_problem = GridSearchProblem(  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 478,
          "function_name": "closed_form_solution",
          "code": "\" S . . . .\", # 0"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 479,
          "function_name": "closed_form_solution",
          "code": "\" . . . . .\", # 1"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 480,
          "function_name": "closed_form_solution",
          "code": "\" . . . . .\", # 2"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 481,
          "function_name": "closed_form_solution",
          "code": "\" . . . . .\", # 3"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 482,
          "function_name": "closed_form_solution",
          "code": "\" . . . . E\", # 4"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 476,
          "function_name": "closed_form_solution",
          "code": "relaxed_problem = GridSearchProblem(  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 476,
          "function_name": "closed_form_solution",
          "code": "relaxed_problem = GridSearchProblem(  # @stepover"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 65,
          "function_name": "__init__",
          "code": "def __init__(self, *rows: list[str]):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 476,
          "function_name": "closed_form_solution",
          "code": "relaxed_problem = GridSearchProblem(  # @stepover"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 67,
          "function_name": "__init__",
          "code": "self.rows = [row.replace(\" \", \"\") for row in rows]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 476,
          "function_name": "closed_form_solution",
          "code": "relaxed_problem = GridSearchProblem(  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 484,
          "function_name": "closed_form_solution",
          "code": "text(\"The future cost of a state (r, c) under the relaxed problem has a closed form solution.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The future cost of a state (r, c) under the relaxed problem has a closed form solution.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 486,
          "function_name": "closed_form_solution",
          "code": "def future_cost_relaxed(state: tuple[int, int]) -> float:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 494,
          "function_name": "closed_form_solution",
          "code": "cost = future_cost_relaxed(state=(0, 0))  # @inspect cost"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 494,
          "function_name": "closed_form_solution",
          "code": "cost = future_cost_relaxed(state=(0, 0))  # @inspect cost"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 486,
          "function_name": "future_cost_relaxed",
          "code": "def future_cost_relaxed(state: tuple[int, int]) -> float:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 494,
          "function_name": "closed_form_solution",
          "code": "cost = future_cost_relaxed(state=(0, 0))  # @inspect cost"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 487,
          "function_name": "future_cost_relaxed",
          "code": "end_r = relaxed_problem.num_rows - 1  # @stepover  @inspect end_r"
        }
      ],
      "env": {
        "end_r": {
          "type": "int",
          "contents": 4,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 494,
          "function_name": "closed_form_solution",
          "code": "cost = future_cost_relaxed(state=(0, 0))  # @inspect cost"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 488,
          "function_name": "future_cost_relaxed",
          "code": "end_c = relaxed_problem.num_cols - 1  # @stepover  @inspect end_c"
        }
      ],
      "env": {
        "end_c": {
          "type": "int",
          "contents": 4,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 494,
          "function_name": "closed_form_solution",
          "code": "cost = future_cost_relaxed(state=(0, 0))  # @inspect cost"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 490,
          "function_name": "future_cost_relaxed",
          "code": "r, c = state  # @inspect r c"
        }
      ],
      "env": {
        "r": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        },
        "c": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 494,
          "function_name": "closed_form_solution",
          "code": "cost = future_cost_relaxed(state=(0, 0))  # @inspect cost"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 491,
          "function_name": "future_cost_relaxed",
          "code": "dist = abs(end_r - r) + abs(end_c - c)  # @inspect dist"
        }
      ],
      "env": {
        "dist": {
          "type": "int",
          "contents": 8,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 494,
          "function_name": "closed_form_solution",
          "code": "cost = future_cost_relaxed(state=(0, 0))  # @inspect cost"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 492,
          "function_name": "future_cost_relaxed",
          "code": "return dist"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 494,
          "function_name": "closed_form_solution",
          "code": "cost = future_cost_relaxed(state=(0, 0))  # @inspect cost"
        }
      ],
      "env": {
        "cost": {
          "type": "int",
          "contents": 8,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 495,
          "function_name": "closed_form_solution",
          "code": "cost = future_cost_relaxed(state=(0, 1))  # Closer @inspect cost @stepover"
        }
      ],
      "env": {
        "cost": {
          "type": "int",
          "contents": 7,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 496,
          "function_name": "closed_form_solution",
          "code": "cost = future_cost_relaxed(state=(2, 4))  # Seems so close! @inspect cost @stepover"
        }
      ],
      "env": {
        "cost": {
          "type": "int",
          "contents": 2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 497,
          "function_name": "closed_form_solution",
          "code": "cost = future_cost_relaxed(state=(3, 0))  # Seems farther (heuristic is imperfect)! @inspect cost @stepover"
        }
      ],
      "env": {
        "cost": {
          "type": "int",
          "contents": 5,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 498,
          "function_name": "closed_form_solution",
          "code": "text(\"Intuition: favor states that are closer to E\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Intuition: favor states that are closer to E",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 500,
          "function_name": "closed_form_solution",
          "code": "text(\"Run UCS and A*\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Run UCS and A*",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 501,
          "function_name": "closed_form_solution",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored @stepover"
        }
      ],
      "env": {
        "solution": {
          "type": "search.Solution",
          "contents": {
            "steps": {
              "type": "list",
              "contents": [
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 1,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 3,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "down",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 1,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 3,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "down",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 3,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "left",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "left",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 1,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "left",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "down",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 3,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "down",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 1,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 3,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 14,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "num_explored": {
          "type": "int",
          "contents": 17,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 502,
          "function_name": "closed_form_solution",
          "code": "solution, num_explored = astar_search(problem, heuristic=future_cost_relaxed)  # @inspect solution num_explored @stepover"
        }
      ],
      "env": {
        "solution": {
          "type": "search.Solution",
          "contents": {
            "steps": {
              "type": "list",
              "contents": [
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 1,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 3,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "down",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 1,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 3,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "down",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 3,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "left",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "left",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 1,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "left",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "down",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 3,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "down",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 1,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 3,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "right",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "tuple",
                      "contents": [
                        {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        },
                        {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 14,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "num_explored": {
          "type": "int",
          "contents": 17,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 503,
          "function_name": "closed_form_solution",
          "code": "text(\"Note that A* does not provide a benefit in this case.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note that A* does not provide a benefit in this case.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 456,
          "function_name": "astar_relaxations",
          "code": "closed_form_solution()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 506,
          "function_name": "search_fewer_states",
          "code": "def search_fewer_states():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 507,
          "function_name": "search_fewer_states",
          "code": "text(\"Recall the limited travel problem:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall the limited travel problem:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 508,
          "function_name": "search_fewer_states",
          "code": "text(\"- Travel from 1 to n via walking (i \u2192 i+1) or tram (i \u2192 2*i)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Travel from 1 to n via walking (i \u2192 i+1) or tram (i \u2192 2*i)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 509,
          "function_name": "search_fewer_states",
          "code": "text(\"- Can take tram only `tickets` times\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Can take tram only `tickets` times",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 510,
          "function_name": "search_fewer_states",
          "code": "problem = LimitedTravelSearchProblem(num_locs=10, starting_tickets=3)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 512,
          "function_name": "search_fewer_states",
          "code": "text(\"Relaxed problem: tram is free again!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Relaxed problem: tram is free again!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 513,
          "function_name": "search_fewer_states",
          "code": "relaxed_problem = TravelSearchProblem(num_locs=10)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 515,
          "function_name": "search_fewer_states",
          "code": "text(\"To define the heuristic, we need to compute future costs of the relaxed problem.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "To define the heuristic, we need to compute future costs of the relaxed problem.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 516,
          "function_name": "search_fewer_states",
          "code": "_, num_explored_relaxed, future_costs_relaxed = dynamic_programming(relaxed_problem)  # @stepover @inspect num_explored_relaxed relaxed_future_costs"
        }
      ],
      "env": {
        "num_explored_relaxed": {
          "type": "int",
          "contents": 10,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 517,
          "function_name": "search_fewer_states",
          "code": "def heuristic(state: TravelState) -> float:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 522,
          "function_name": "search_fewer_states",
          "code": "cost = heuristic(TravelState(loc=4, tickets=3))  # @inspect cost"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 522,
          "function_name": "search_fewer_states",
          "code": "cost = heuristic(TravelState(loc=4, tickets=3))  # @inspect cost"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 517,
          "function_name": "heuristic",
          "code": "def heuristic(state: TravelState) -> float:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 522,
          "function_name": "search_fewer_states",
          "code": "cost = heuristic(TravelState(loc=4, tickets=3))  # @inspect cost"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 519,
          "function_name": "heuristic",
          "code": "state_relaxed = state.loc"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 522,
          "function_name": "search_fewer_states",
          "code": "cost = heuristic(TravelState(loc=4, tickets=3))  # @inspect cost"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 520,
          "function_name": "heuristic",
          "code": "return future_costs_relaxed[state_relaxed].cost"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 522,
          "function_name": "search_fewer_states",
          "code": "cost = heuristic(TravelState(loc=4, tickets=3))  # @inspect cost"
        }
      ],
      "env": {
        "cost": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 524,
          "function_name": "search_fewer_states",
          "code": "text(\"Let's compare UCS and A*\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's compare UCS and A*",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 525,
          "function_name": "search_fewer_states",
          "code": "solution, num_explored = uniform_cost_search(problem)  # @inspect solution num_explored @stepover"
        }
      ],
      "env": {
        "solution": {
          "type": "search.Solution",
          "contents": {
            "steps": {
              "type": "list",
              "contents": [
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "walk",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "search.TravelState",
                      "contents": {
                        "loc": {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        },
                        "tickets": {
                          "type": "int",
                          "contents": 3,
                          "dtype": null,
                          "shape": null
                        }
                      },
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "tram",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 2,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "search.TravelState",
                      "contents": {
                        "loc": {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        },
                        "tickets": {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        }
                      },
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "walk",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "search.TravelState",
                      "contents": {
                        "loc": {
                          "type": "int",
                          "contents": 5,
                          "dtype": null,
                          "shape": null
                        },
                        "tickets": {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        }
                      },
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "tram",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 2,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "search.TravelState",
                      "contents": {
                        "loc": {
                          "type": "int",
                          "contents": 10,
                          "dtype": null,
                          "shape": null
                        },
                        "tickets": {
                          "type": "int",
                          "contents": 1,
                          "dtype": null,
                          "shape": null
                        }
                      },
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 6,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "num_explored": {
          "type": "int",
          "contents": 23,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 526,
          "function_name": "search_fewer_states",
          "code": "solution, num_explored = astar_search(problem, heuristic=heuristic)  # @inspect solution num_explored @stepover"
        }
      ],
      "env": {
        "solution": {
          "type": "search.Solution",
          "contents": {
            "steps": {
              "type": "list",
              "contents": [
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "walk",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "search.TravelState",
                      "contents": {
                        "loc": {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        },
                        "tickets": {
                          "type": "int",
                          "contents": 3,
                          "dtype": null,
                          "shape": null
                        }
                      },
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "tram",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 2,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "search.TravelState",
                      "contents": {
                        "loc": {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        },
                        "tickets": {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        }
                      },
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "walk",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 1,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "search.TravelState",
                      "contents": {
                        "loc": {
                          "type": "int",
                          "contents": 5,
                          "dtype": null,
                          "shape": null
                        },
                        "tickets": {
                          "type": "int",
                          "contents": 2,
                          "dtype": null,
                          "shape": null
                        }
                      },
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "search.Step",
                  "contents": {
                    "action": {
                      "type": "str",
                      "contents": "tram",
                      "dtype": null,
                      "shape": null
                    },
                    "cost": {
                      "type": "int",
                      "contents": 2,
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "search.TravelState",
                      "contents": {
                        "loc": {
                          "type": "int",
                          "contents": 10,
                          "dtype": null,
                          "shape": null
                        },
                        "tickets": {
                          "type": "int",
                          "contents": 1,
                          "dtype": null,
                          "shape": null
                        }
                      },
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "cost": {
              "type": "int",
              "contents": 6,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "num_explored": {
          "type": "int",
          "contents": 8,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 528,
          "function_name": "search_fewer_states",
          "code": "text(\"For accounting purposes, need to include the cost of solving the relaxed problem!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "For accounting purposes, need to include the cost of solving the relaxed problem!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 529,
          "function_name": "search_fewer_states",
          "code": "num_explored += num_explored_relaxed  # @inspect num_explored"
        }
      ],
      "env": {
        "num_explored": {
          "type": "int",
          "contents": 18,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 531,
          "function_name": "search_fewer_states",
          "code": "text(\"Note: dynamic programming cannot deal with cycles\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note: dynamic programming cannot deal with cycles",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 532,
          "function_name": "search_fewer_states",
          "code": "text(\"If we have cycles, what do we do?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "If we have cycles, what do we do?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 533,
          "function_name": "search_fewer_states",
          "code": "text(\"Solution:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Solution:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 534,
          "function_name": "search_fewer_states",
          "code": "text(\"- Define a reversed relaxed problem (A \u2192 B becomes B \u2192 A)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Define a reversed relaxed problem (A \u2192 B becomes B \u2192 A)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 535,
          "function_name": "search_fewer_states",
          "code": "text(\"- Past costs in the reversed relaxed problem = future costs in the relaxed problem\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Past costs in the reversed relaxed problem = future costs in the relaxed problem",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 536,
          "function_name": "search_fewer_states",
          "code": "text(\"- Run UCS on the reserved relaxed problem to compute future costs in the relaxed problem\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Run UCS on the reserved relaxed problem to compute future costs in the relaxed problem",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 538,
          "function_name": "search_fewer_states",
          "code": "text(\"Summary:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 539,
          "function_name": "search_fewer_states",
          "code": "text(\"- Still have to run search on the relaxed problems\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Still have to run search on the relaxed problems",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 540,
          "function_name": "search_fewer_states",
          "code": "text(\"- But the relaxed problems have fewer constraints and therefore fewer states\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- But the relaxed problems have fewer constraints and therefore fewer states",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 541,
          "function_name": "search_fewer_states",
          "code": "text(\"- Thus they are faster to solve than the original problem\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Thus they are faster to solve than the original problem",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 457,
          "function_name": "astar_relaxations",
          "code": "search_fewer_states()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 458,
          "function_name": "astar_relaxations",
          "code": "independent_subproblems()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 458,
          "function_name": "astar_relaxations",
          "code": "independent_subproblems()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 544,
          "function_name": "independent_subproblems",
          "code": "def independent_subproblems():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 458,
          "function_name": "astar_relaxations",
          "code": "independent_subproblems()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 545,
          "function_name": "independent_subproblems",
          "code": "text(\"Motivating example: solving the 8 puzzle\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Motivating example: solving the 8 puzzle",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 458,
          "function_name": "astar_relaxations",
          "code": "independent_subproblems()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 546,
          "function_name": "independent_subproblems",
          "code": "image(\"images/8-puzzle.png\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/8-puzzle.png",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 458,
          "function_name": "astar_relaxations",
          "code": "independent_subproblems()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 548,
          "function_name": "independent_subproblems",
          "code": "text(\"Original problem: tiles cannot overlap\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Original problem: tiles cannot overlap",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 458,
          "function_name": "astar_relaxations",
          "code": "independent_subproblems()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 549,
          "function_name": "independent_subproblems",
          "code": "text(\"Relaxed problem: tiles **can** overlap\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Relaxed problem: tiles **can** overlap",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 458,
          "function_name": "astar_relaxations",
          "code": "independent_subproblems()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 550,
          "function_name": "independent_subproblems",
          "code": "text(\"As a result, this breaks up into 8 **independent** subproblems\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "As a result, this breaks up into 8 **independent** subproblems",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 458,
          "function_name": "astar_relaxations",
          "code": "independent_subproblems()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 551,
          "function_name": "independent_subproblems",
          "code": "text(\"...and in this case, each subproblem can be solved in closed form.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...and in this case, each subproblem can be solved in closed form.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 458,
          "function_name": "astar_relaxations",
          "code": "independent_subproblems()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 553,
          "function_name": "independent_subproblems",
          "code": "heuristic_value = 1 + 1 + 3 + 1 + 1 + 1 + 1 + 3  # how far it has to move @inspect heuristic_value"
        }
      ],
      "env": {
        "heuristic_value": {
          "type": "int",
          "contents": 12,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 458,
          "function_name": "astar_relaxations",
          "code": "independent_subproblems()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 556,
          "function_name": "unifying_principle",
          "code": "def unifying_principle():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 557,
          "function_name": "unifying_principle",
          "code": "text(\"Examples of relaxed problems so far:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Examples of relaxed problems so far:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 558,
          "function_name": "unifying_principle",
          "code": "text(\"- Knock down walls\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Knock down walls",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 559,
          "function_name": "unifying_principle",
          "code": "text(\"- Free tram\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Free tram",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 560,
          "function_name": "unifying_principle",
          "code": "text(\"- Tiles can overlap\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Tiles can overlap",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 562,
          "function_name": "unifying_principle",
          "code": "text(\"These are all examples of removing constraints from the original problem.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "These are all examples of removing constraints from the original problem.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 563,
          "function_name": "unifying_principle",
          "code": "text(\"Removing constraints means reducing the cost of actions from infinity to a finite value.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Removing constraints means reducing the cost of actions from infinity to a finite value.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 565,
          "function_name": "unifying_principle",
          "code": "text(\"A more general principle: **reducing costs**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "A more general principle: **reducing costs**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 567,
          "function_name": "unifying_principle",
          "code": "text(\"Definition: A **relaxation** of a search problem is a modified problem where\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Definition: A **relaxation** of a search problem is a modified problem where",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 568,
          "function_name": "unifying_principle",
          "code": "text(\"- States, actions, successors are the same\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- States, actions, successors are the same",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 569,
          "function_name": "unifying_principle",
          "code": "text(\"- Cost_relaxed(s, a) <= Cost(s, a)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Cost_relaxed(s, a) <= Cost(s, a)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 571,
          "function_name": "unifying_principle",
          "code": "text(\"Theorem: Let h(s) be the future cost of a relaxed problem. Then h is a consistent heuristic.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Theorem: Let h(s) be the future cost of a relaxed problem. Then h is a consistent heuristic.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 572,
          "function_name": "unifying_principle",
          "code": "text(\"Proof:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Proof:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 573,
          "function_name": "unifying_principle",
          "code": "text(\"h(s)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "h(s)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 574,
          "function_name": "unifying_principle",
          "code": "text(\"<= Cost_relaxed(s, a) + h(Succ(s, a))  [triangle inequality]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "<= Cost_relaxed(s, a) + h(Succ(s, a))  [triangle inequality]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 575,
          "function_name": "unifying_principle",
          "code": "text(\"<= Cost(s, a) + h(Succ(s, a)) [definition of relaxation]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "<= Cost(s, a) + h(Succ(s, a)) [definition of relaxation]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 577,
          "function_name": "unifying_principle",
          "code": "text(\"Of course, a relaxed problem isn't automatically easier to solve!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Of course, a relaxed problem isn't automatically easier to solve!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 579,
          "function_name": "unifying_principle",
          "code": "text(\"Costs are reduced in a **structured** way so that we can then:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Costs are reduced in a **structured** way so that we can then:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 580,
          "function_name": "unifying_principle",
          "code": "text(\"- Reduce the number of states\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Reduce the number of states",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 581,
          "function_name": "unifying_principle",
          "code": "text(\"- Get closed form solutions\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Get closed form solutions",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 582,
          "function_name": "unifying_principle",
          "code": "text(\"- Break up into independent subproblems\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Break up into independent subproblems",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 459,
          "function_name": "astar_relaxations",
          "code": "unifying_principle()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 460,
          "function_name": "astar_relaxations",
          "code": "combining_heuristics()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 460,
          "function_name": "astar_relaxations",
          "code": "combining_heuristics()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 585,
          "function_name": "combining_heuristics",
          "code": "def combining_heuristics():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 460,
          "function_name": "astar_relaxations",
          "code": "combining_heuristics()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 586,
          "function_name": "combining_heuristics",
          "code": "text(\"We can use domain knowledge to come up with different relaxations\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We can use domain knowledge to come up with different relaxations",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 460,
          "function_name": "astar_relaxations",
          "code": "combining_heuristics()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 587,
          "function_name": "combining_heuristics",
          "code": "text(\"- h1(s): future cost if we knock down walls\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- h1(s): future cost if we knock down walls",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 460,
          "function_name": "astar_relaxations",
          "code": "combining_heuristics()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 588,
          "function_name": "combining_heuristics",
          "code": "text(\"- h2(s): future cost if we can ride a free tram\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- h2(s): future cost if we can ride a free tram",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 460,
          "function_name": "astar_relaxations",
          "code": "combining_heuristics()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 590,
          "function_name": "combining_heuristics",
          "code": "text(\"Which one do you pick?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Which one do you pick?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 460,
          "function_name": "astar_relaxations",
          "code": "combining_heuristics()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 591,
          "function_name": "combining_heuristics",
          "code": "text(\"Answer: you don't have to - you can use all of them!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Answer: you don't have to - you can use all of them!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 460,
          "function_name": "astar_relaxations",
          "code": "combining_heuristics()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 593,
          "function_name": "combining_heuristics",
          "code": "text(\"Theorem:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Theorem:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 460,
          "function_name": "astar_relaxations",
          "code": "combining_heuristics()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 594,
          "function_name": "combining_heuristics",
          "code": "text(\"- Suppose h1(s) and h2(s) are two consistent heuristics.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Suppose h1(s) and h2(s) are two consistent heuristics.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 460,
          "function_name": "astar_relaxations",
          "code": "combining_heuristics()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 595,
          "function_name": "combining_heuristics",
          "code": "text(\"- Then h(s) = max(h1(s), h2(s)) is a consistent heuristic.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Then h(s) = max(h1(s), h2(s)) is a consistent heuristic.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 460,
          "function_name": "astar_relaxations",
          "code": "combining_heuristics()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 597,
          "function_name": "combining_heuristics",
          "code": "text(\"Proof:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Proof:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 460,
          "function_name": "astar_relaxations",
          "code": "combining_heuristics()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 598,
          "function_name": "combining_heuristics",
          "code": "text(\"h(s)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "h(s)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 460,
          "function_name": "astar_relaxations",
          "code": "combining_heuristics()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 599,
          "function_name": "combining_heuristics",
          "code": "text(\"= max(h1(s), h2(s)) [definition of h]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "= max(h1(s), h2(s)) [definition of h]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 460,
          "function_name": "astar_relaxations",
          "code": "combining_heuristics()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 600,
          "function_name": "combining_heuristics",
          "code": "text(\"<= max(Cost(s, a) + h1(Succ(s, a)), h2(Cost(s, a)) + h2(Succ(s, a))) [because h1 and h2 are consistent]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "<= max(Cost(s, a) + h1(Succ(s, a)), h2(Cost(s, a)) + h2(Succ(s, a))) [because h1 and h2 are consistent]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 460,
          "function_name": "astar_relaxations",
          "code": "combining_heuristics()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 601,
          "function_name": "combining_heuristics",
          "code": "text(\"= Cost(s, a) + max(h1(Succ(s, a)), h2(Succ(s, a))) [pull out constant]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "= Cost(s, a) + max(h1(Succ(s, a)), h2(Succ(s, a))) [pull out constant]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 460,
          "function_name": "astar_relaxations",
          "code": "combining_heuristics()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 602,
          "function_name": "combining_heuristics",
          "code": "text(\"= Cost(s, a) + h(Succ(s, a)) [definition of h]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "= Cost(s, a) + h(Succ(s, a)) [definition of h]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 460,
          "function_name": "astar_relaxations",
          "code": "combining_heuristics()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 603,
          "function_name": "combining_heuristics",
          "code": "text(\"Therefore, h is consistent.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Therefore, h is consistent.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        },
        {
          "path": "ucs_astar.py",
          "line_number": 460,
          "function_name": "astar_relaxations",
          "code": "combining_heuristics()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 28,
          "function_name": "main",
          "code": "astar_relaxations()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 30,
          "function_name": "main",
          "code": "text(\"Summary\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 31,
          "function_name": "main",
          "code": "text(\"- UCS and A* are two exact algorithms that allow for cycles (but non-negative costs)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- UCS and A* are two exact algorithms that allow for cycles (but non-negative costs)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 32,
          "function_name": "main",
          "code": "text(\"- Key: order states by increasing past cost\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Key: order states by increasing past cost",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 33,
          "function_name": "main",
          "code": "text(\"- Can't do better than UCS in general\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Can't do better than UCS in general",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 34,
          "function_name": "main",
          "code": "text(\"- A* allows you to incorporate domain knowledge via heuristics to speed up search\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- A* allows you to incorporate domain knowledge via heuristics to speed up search",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 35,
          "function_name": "main",
          "code": "text(\"- Heuristics: future cost of some relaxed problem (lowering costs in a structured way)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Heuristics: future cost of some relaxed problem (lowering costs in a structured way)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "ucs_astar.py",
          "line_number": 37,
          "function_name": "main",
          "code": "text(\"Next time: what happens when actions have non-deterministic outcomes (e.g., rolling dice)?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Next time: what happens when actions have non-deterministic outcomes (e.g., rolling dice)?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    }
  ]
}
{
  "files": {
    "games.py": "from edtrace import text, image, link\nfrom typing import Any, Callable\nfrom dataclasses import dataclass\nimport numpy as np\nfrom util import sample_dict, set_random_seed\n\nPolicy = Callable[[Any], Any]\nState = Any\nAction = str\n\n\ndef main():\n    text(\"# Lecture 10: Games I\")\n\n    text(\"Last week: Markov decision processes and reinforcement learning\")\n    text(\"This week: games\")\n\n    image(\"images/game1.png\", width=500)\n    text(\"What should your strategy be?\")\n    text(\"Note that it depends on your opponent (me)'s strategy, which is unknown...\")\n\n    text(\"MDPs: agent tries to maximize utility, environment is random and known\")\n    text(\"Games: agent tries to maximize utility, opponent strategy is **unknown**\")\n\n    modeling()               # What is a game?\n    game_evaluation()        # Play the game and see who wins\n    expectimax()             # Assume the opponent is playing a fixed strategy\n    minimax()                # Assume the opponent is playing the best possible strategy\n    face_off()               # Relationships between values\n    expectiminimax()         # ...and there is randomness in the game\n\n    alpha_beta_pruning()     # Speed up search (exact)\n    evaluation_functions()   # Speed up search (approximate)\n\n    text(\"Summary:\")\n    text(\"- Games: agent tries to maximize utility, opponent strategy is unknown\")\n    text(\"- Minimax principle: assume the opponent tries to minimize utility\")\n    text(\"- Recurrences define various (game, policy) outcomes (evaluation, expectimax, minimax, expectiminimax)\")\n    text(\"- Alpha-beta pruning: branch and bound to speed up minimax (exact)\")\n    text(\"- Evaluation functions: prior knowledge that speeds up (approximately)\")\n\n\ndef modeling():\n    link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Fmodeling.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")\n    image(\"images/game-tree.png\", width=500)\n    \n    text(\"This lecture: two-player zero-sum games\")\n    text(\"- Two players: *agent* and *opponent*\")\n    text(\"- Zero-sum: utility of agent = -utility of opponent\")\n\n    game1()\n    halving_game()\n\n\ndef game1():\n    image(\"images/game-tree.png\", width=500)\n    text(\"Let us define a game formally:\")\n    game = Game1()\n\n    # From the root\n    state = game.start_state()  # Root node @inspect state @stepover\n    is_end = game.is_end(state)  # Leaf node? @inspect is_end @stepover\n    player = game.player(state)  # Whose turn is it? @inspect player @stepover\n    successors = game.successors(state)  # For each action -> successor state @inspect successors @stepover\n\n    state = \"A\" # @inspect state @clear is_end player successors\n    is_end = game.is_end(state)  # @inspect is_end @stepover\n    player = game.player(state)  # @inspect player @stepover\n    successors = game.successors(state)  # @inspect successors @stepover\n\n    state = \"A1\" # @inspect state @clear is_end player successors\n    is_end = game.is_end(state)  # @inspect is_end @stepover\n    utility = game.utility(state)  # @inspect utility @stepover\n\n    text(\"Key characteristics of a **game**:\")\n    text(\"- All the utility is at the end state (sparse reward)\")\n    text(\"- Different players in control at different states\")\n\n    text(\"Types of policies:\")\n    text(\"- Deterministic: \u03c0_p(s) is action player p takes in state s\")\n    text(\"- Stochastic: \u03c0_p(a | s) is probability player p takes action a in state s\")\n    text(\"In general, we will consider stochastic policies.\")\n\n\ndef halving_game():\n    text(\"Let's consider another game:\")\n    image(\"images/halving-game.png\", width=500)\n    game = HalvingGame(n=11)  # @stepover\n\n    state = game.start_state()  # @inspect state @stepover\n    player = game.player(state)  # @inspect player @stepover\n    successors = game.successors(state)  # @inspect successors @stepover\n    is_end = game.is_end(state)  # @inspect is_end @stepover\n\n\nclass Game:\n    def start_state(self) -> Any:\n        \"\"\"Where the game starts.\"\"\"\n        raise NotImplementedError\n    \n    def successors(self, state: Any) -> dict[str, Any]:\n        \"\"\"What are the possible successor states?\"\"\"\n        raise NotImplementedError\n\n    def player(self, state: Any) -> str:\n        \"\"\"Which player should move in `state`?\"\"\"\n        raise NotImplementedError\n    \n    def is_end(self, state: Any) -> bool:\n        \"\"\"Is the game over?\"\"\"\n        raise NotImplementedError\n    \n    def utility(self, state: Any) -> float:\n        \"\"\"What is the utility of the game (for the agent).\"\"\"\n        raise NotImplementedError\n\n\nclass Game1(Game):\n    def start_state(self) -> Any:\n        return \"root\"\n\n    def successors(self, state: str) -> dict[str, str]:\n        # state -> action -> next state\n        mapping = {\n            \"root\": {\"A\": \"A\", \"B\": \"B\", \"C\": \"C\"},\n            \"A\": {\"1\": \"A1\", \"2\": \"A2\"},\n            \"B\": {\"1\": \"B1\", \"2\": \"B2\"},\n            \"C\": {\"1\": \"C1\", \"2\": \"C2\"},\n        }\n        return mapping[state]\n\n    def player(self, state: Any) -> str:\n        if state == \"root\":\n            return \"agent\"\n        if state in [\"A\", \"B\", \"C\"]:\n            return \"opp\"\n        raise ValueError(f\"Invalid state: {state}\")\n\n    def is_end(self, state: Any) -> bool:\n        return state in [\"A1\", \"A2\", \"B1\", \"B2\", \"C1\", \"C2\"]\n\n    def utility(self, state: Any) -> float:\n        utilities = {\n            \"A1\": -50,\n            \"A2\": 50,\n            \"B1\": 1,\n            \"B2\": 3,\n            \"C1\": -5,\n            \"C2\": 15,\n        }\n        return utilities[state]\n\n\n@dataclass(frozen=True)\nclass HalvingState:\n    n: int\n    player: str\n\n    def __str__(self) -> str:\n        return f\"({self.n}, {self.player})\"\n\n\nclass HalvingGame(Game):\n    \"\"\"\n    Halving game:\n    - Two players take turns halving or decrementing a number.\n    - The player that is left with 0 wins.\n    \"\"\"\n    def __init__(self, n: int):\n        self.n = n\n\n    def start_state(self) -> Any:\n        return HalvingState(n=self.n, player=\"agent\")\n    \n    def successors(self, state: HalvingState) -> dict[str, Any]:\n        next_player = \"opp\" if state.player == \"agent\" else \"agent\"\n        return {\n            \"decrement\": HalvingState(n=state.n - 1, player=next_player),\n            \"half\": HalvingState(n=state.n // 2, player=next_player),\n        }\n    \n    def player(self, state: HalvingState) -> str:\n        return state.player\n\n    def is_end(self, state: HalvingState) -> bool:\n        return state.n == 0\n\n    def utility(self, state: HalvingState) -> float:\n        assert state.n == 0\n        if state.player == \"agent\":\n            return +1  # Agent wins\n        else:\n            return -1  # Opponent wins\n\n@dataclass(frozen=True)\nclass Step:\n    \"\"\"Represents a step in a game (action and resulting state).\"\"\"\n    action: Any\n    state: Any\n\n@dataclass(frozen=True)\nclass Rollout:\n    \"\"\"Represents a rollout of a game (sequence of actions that produces a utility).\"\"\"\n    steps: list[Step]\n    utility: float\n\ndef simulate(game: Game, policies: dict[str, Policy]) -> Rollout:\n    \"\"\"Simulate the game from the start state using the policy.\"\"\"\n    state = game.start_state()  # @inspect state @stepover\n    steps = []\n\n    while not game.is_end(state):  # @stepover\n        # Player whose turn it is chooses an action\n        player = game.player(state)  # @inspect player @stepover\n        actions = policies[player](state)  # @inspect actions @stepover\n        action = sample_dict(actions)  # @inspect action @stepover\n\n        # Advance the game state\n        state = game.successors(state)[action]  # @inspect state @stepover\n        steps.append(Step(action=action, state=state))  # @inspect steps\n\n    # See who wins?\n    utility = game.utility(state)  # @inspect utility @stepover\n    return Rollout(steps=steps, utility=utility)\n    \n\ndef game_evaluation():\n    link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Fgame-evaluation.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")\n\n    text(\"Given a game and a policy for each player...\")\n    text(\"...the **value** (expected utility) of a game over all possible rollouts\")\n\n    # Agent always chooses A\n    def always_choose_a_policy(state: State) -> dict[Action, float]:\n        return {\"A\": 1}\n\n    # Opponent chooses randomly between 1 and 2\n    def random_policy(state: State) -> dict[Action, float]:\n        return {\"1\": 0.5, \"2\": 0.5}\n\n    policies = {\n        \"agent\": always_choose_a_policy,\n        \"opp\": random_policy,\n    }\n\n    game = Game1()\n\n    text(\"Let's play the game!\")\n    set_random_seed(1)\n    utility = simulate(game, policies)  # @inspect utility\n\n    text(\"Do it multiple times and average:\")\n    utilities = [simulate(game, policies).utility for _ in range(20)]  # @inspect utilities @stepover\n    mean_utility = np.mean(utilities)  # @inspect mean_utility\n\n    text(\"Can we compute the game value exactly without simulation?\")\n\n    text(\"Yes, by defining a recurrence!\")\n    image(\"images/game-evaluation-graphical.png\", width=400)\n    image(\"images/game-evaluation-recurrence.png\", width=600)\n    state = game.start_state()  # @stepover\n    value = V_eval(game, policies, state)  # @inspect value\n    text(\"This computation is exact, but could take exponential time!\")\n\n    image(\"images/game-evaluation.png\", width=500)\n\n    text(\"Summary:\")\n    text(\"- Value is the expected utility of the game\")\n    text(\"- Monte Carlo: we can simulate the game and average the utilities\")\n    text(\"- Recurrence to compute value exactly (but could take exponential time!)\")\n    text(\"- Analogous to policy evaluation in MDPs\")\n\n\ndef V_eval(game: Game, policies: dict[str, Policy], state: Any) -> float:\n    \"\"\"Return the value of the game.\"\"\"\n    # At the end of the game?\n    if game.is_end(state):  # @stepover\n        return game.utility(state)  # @stepover\n\n    # Whose turn is it?\n    player = game.player(state)  # @stepover\n    policy = policies[player]\n\n    # Try all actions\n    value = 0  # @inspect value\n    for action, prob in policy(state).items():  # @stepover\n        next_state = game.successors(state)[action]  # @stepover @inspect next_state\n        value += prob * V_eval(game, policies, next_state)  # @stepover @inspect value\n\n    return value\n\n\ndef expectimax():\n    link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Fexpectimax.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")\n\n    text(\"Previously: we can evaluate a fixed agent policy\")\n    text(\"Now: find the optimal agent policy\")\n\n    image(\"images/expectimax-graphical.png\", width=400)\n    image(\"images/expectimax-recurrence.png\", width=600)\n\n    # Opponent chooses randomly between 1 and 2\n    def random_policy(state: Any) -> Any:\n        return {\"1\": 0.5, \"2\": 0.5}\n\n    image(\"images/expectimax.png\", width=500)\n\n    game = Game1()\n    state = game.start_state()  # @stepover\n    value = V_exptmax(game, random_policy, state)  # @inspect value\n    text(\"Now the optimal action is to choose C!\")\n\n    text(\"Summary:\")\n    text(\"- Expectimax: find the optimal agent policy with respect to a fixed opponent policy\")\n    text(\"- Analogous to value iteration in MDPs\")\n\n\ndef V_exptmax(game: Game, opp_policy: Policy, state: Any) -> float:\n    \"\"\"Return the value of the game.\"\"\"\n    # At the end of the game?\n    if game.is_end(state):  # @stepover\n        return game.utility(state)  # @stepover\n\n    # Whose turn is it?\n    player = game.player(state)  # @stepover\n\n    if player == \"agent\":\n        # Choose the action (next state) that maximizes utility\n        next_states = list(game.successors(state).values())  # @stepover @inspect next_states\n        values = [V_exptmax(game, opp_policy, next_state) for next_state in next_states]  # @stepover @inspect values\n        value = np.max(values)  # @inspect value\n        return value\n\n    elif player == \"opp\":\n        # Follow the opponent's policy\n        successors = game.successors(state)  # action -> next state\n        values = [prob * V_exptmax(game, opp_policy, successors[action]) for action, prob in opp_policy(state).items()]  # @stepover @inspect values\n        value = np.sum(values)  # @inspect value\n        return value\n\n    else:\n        raise ValueError(f\"Invalid player: {player}\")\n\n\ndef minimax():\n    link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Fminimax.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")\n\n    text(\"Previously: assumed the opponent policy was known (expectimax)\")\n    text(\"The whole point of games is that we don't know the opponent policy!\")\n    text(\"What should we do?\")\n\n    text(\"**Minimax**: assume the opponent plays their best possible strategy\")\n\n    text(\"Here is the minimax recurrence:\")\n    image(\"images/minimax-graphical.png\", width=400)\n    image(\"images/minimax-recurrence.png\", width=600)\n\n    text(\"Here's what it looks like for game 1:\")\n    image(\"images/minimax.png\", width=500)\n\n    game = Game1()\n    state = game.start_state()  # @stepover\n    value = V_minmax(game, state)  # @inspect value\n\n    text(\"Let's look at the minimax solution for the halving game:\")\n    game = HalvingGame(n=11)  # @stepover\n\n    def minimax_policy(state: HalvingState) -> dict[Action, float]:\n        # Compute the minimax value and always play the associated action\n        value, action = V_minmax(game, state)\n        return {action: 1.0}  # Always play the associated action\n\n    def random_policy(state: HalvingState) -> dict[Action, float]:\n        return {\"decrement\": 0.5, \"half\": 0.5}\n\n    policies = {\n        \"agent\": minimax_policy,\n        \"opp\": random_policy,\n    }\n\n    set_random_seed(1)\n    rollout = simulate(game, policies)  # @inspect rollout @stepover\n    utilities = [simulate(game, policies).utility for _ in range(10)]  # @inspect utilities @stepover\n    mean_utility = np.mean(utilities)  # @inspect mean_utility\n    text(\"The minimax policy crushes the random policy!\")\n\n    text(\"We can compute the minimax value and optimal action for each state:\")\n    results = {n: V_minmax(game, HalvingState(n=n, player=\"agent\")) for n in range(1, 12)}  # @inspect results @stepover\n    text(\"If the value is 1, agent is guaranteed to win no matter what the opponent does.\")\n    text(\"If the value is -1, opponent is guaranteed to win **if** they play optimally.\")\n\n    text(\"When agent and opponent play optimally, this is **perfect play**.\")\n    text(\"A game is **solved** if the outcome under perfect play is known.\")\n    text(\"Strongly solved games: tic-tac-toe, nim, connect four\")\n    text(\"Weakly solved games (from initial position): checkers, Othello\")\n    text(\"Unsolved games: chess, Go (even if computers are superhuman!)\")\n\n    text(\"Summary:\")\n    text(\"- Agent maximizes utility, opponent minimizes utility\")\n    text(\"- Unlike expectimax, no fixed policies given\")\n    text(\"- No analogy in MDPs\")\n\n\ndef V_minmax(game: Game, state: Any) -> tuple[float, Action]:\n    \"\"\"Return the value of the game and the optimal action.\"\"\"\n    # At the end of the game?\n    if game.is_end(state):  # @stepover\n        return game.utility(state), None  # @stepover\n\n    # Whose turn is it?\n    player = game.player(state)  # @stepover\n\n    # Recurse on all possible next states\n    successors = game.successors(state)  # @stepover @inspect successors\n    values = {action: V_minmax(game, next_state)[0] for action, next_state in successors.items()}  # @stepover @inspect values\n\n    if player == \"agent\":  # Agent maximizes utility\n        action, value = max(values.items(), key=lambda x: x[1])  # @inspect action value\n    elif player == \"opp\":  # Opponent minimizes utility\n        action, value = min(values.items(), key=lambda x: x[1])  # @inspect action value\n    else:\n        raise ValueError(f\"Invalid player: {player}\")\n\n    return value, action\n\n\ndef face_off():\n    text(\"Computing recurrences produce different policies:\")\n    text(\"- V_minmax \u2192 \u03c0_max (agent), \u03c0_min (opponent)\")\n    text(\"- V_exptmax \u2192 \u03c0_exptmax(7) (agent), \u03c0_7 (opponent)\")\n\n    text(\"Each 'optimal' policy bakes in assumptions about how the other player plays.\")\n    text(\"- Minimax: \u03c0_max is optimal against \u03c0_min\")\n    text(\"- Minimax: \u03c0_min is optimal against \u03c0_max\")\n    text(\"- Expectimax: \u03c0_exptmax(7) is optimal against \u03c0_7\")\n    text(\"What happens when these polices play different policies?\")\n\n    text(\"V(\u03c0_agent, \u03c0_opp): value of game when \u03c0_agent plays \u03c0_opp\")\n\n    text(\"We can play the policies against each other:\")\n    image(\"images/face-off.png\", width=500)\n\n    text(\"Property 1: \u03c0_max is the best policy against \u03c0_min\")\n    image(\"images/minimax-prop1.png\", width=500)\n    text(\"V(\u03c0_exptmax(7), \u03c0_min) \u2264 V(\u03c0_max, \u03c0_min)\")\n\n    text(\"Property 2: \u03c0_min is the best policy against \u03c0_max\")\n    image(\"images/minimax-prop2.png\", width=500)\n    text(\"V(\u03c0_max, \u03c0_min) \u2264 V(\u03c0_max, \u03c0_7)\")\n    text(\"If the minimax value is 1, that means agent is guaranteed to win no matter what the opponent does!\")\n\n    text(\"Property 3: \u03c0_exptmax(7) is optimal against \u03c0_7\")\n    image(\"images/minimax-prop3.png\", width=500)\n    text(\"V(\u03c0_max, \u03c0_7) \u2264 V(\u03c0_exptmax(7), \u03c0_7)\")\n    text(\"You can do better than minimax if you know your opponent!\")\n\n    text(\"Putting everything together:\")\n    image(\"images/face-off-rel.png\", width=500)\n\n    text(\"Summary:\")\n    text(\"- Always think about optimality with respect to what?\")\n    text(\"- Minimax provides both optimality and a lower bound against any (unknown) opponent\")\n\n\ndef expectiminimax():\n    link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Fexpectiminimax.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")\n\n    image(\"images/game2.png\", width=500)\n\n    text(\"Let's draw the game tree for this game:\")\n    image(\"images/expectiminimax.png\", width=500)\n\n    text(\"Here's the recurrence:\")\n    image(\"images/expectiminimax-graphical.png\", width=400)\n    image(\"images/expectiminimax-recurrence.png\", width=600)\n\n    text(\"In general, one could imagine many possible extensions:\")\n    text(\"- More than two players (either agents or opponents)\")\n    text(\"- Players taking extra turns or choosing who to go next\")\n    text(\"Just define recurrence V_...() generally!\")\n\n    text(\"Things that aren't covered by game trees:\")\n    text(\"- Games with imperfect information (e.g., poker)\")\n    text(\"- Non-zero-sum games (e.g., prisoner's dilemma)\")\n    text(\"- Non-turn-based games (e.g., rock-paper-scissors)\")\n\n\ndef alpha_beta_pruning():\n    link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Falpha-beta-pruning.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")\n\n    text(\"Now let's go back to the basic minimax formulation.\")\n    image(\"images/minimax-recurrence.png\", width=500)\n    text(\"Recall that it takes exponential time in general!\")\n    text(\"How can we speed it up?\")\n\n    text(\"**Alpha-beta pruning**: don't visit states that we know aren't going to be optimal.\")\n    text(\"But how do we know if we don't look?\")\n\n    text(\"Simple example:\")\n    text(\"- A has value in [3, 5]\")\n    text(\"- B has value in [5, 100]\")\n    text(\"Which one would you choose?\")\n    text(\"No matter what A and B turn out to be, B will always be better.\")\n    text(\"And we don't need to compute A and B exactly!\")\n    text(\"This idea is called **branch and bound**, used heavily in combinatorial optimization.\")\n\n    text(\"Let's consider the following game tree:\")\n    image(\"images/alpha-beta-example.png\", width=300)\n    text(\"Root computes max(3, min(2, X)) = 3 no matter what X is...so don't need to explore X!\")\n\n    text(\"In general:\")\n    image(\"images/alpha-beta-optimal-path.png\", width=500)\n    text(\"- While we're exploring, each max (min) node has a lower (upper) bound on its value\")\n    text(\"- The minimax value came from some leaf\")\n    text(\"- **Optimal path** is path taken by minimax policies to that leaf\")\n    text(\"- This optimal path should be within the lower/upper bounds\")\n    text(\"- Prune a node if its bounds doesn't overlap every ancestor's bounds\")\n\n    text(\"Let's work this out on the board:\")\n    image(\"images/alpha-beta-example2.png\", width=500)\n\n    text(\"Ordering:\")\n    text(\"- The order in which the children are visited impacts what you can prune\")\n    image(\"images/move-ordering-example.png\", width=300)\n    text(\"In practice, use a heuristic (evaluation function later) to order the children:\")\n    text(\"- Decreasing for max nodes\")\n    text(\"- Increasing for min nodes\")\n\n    text(\"Summary:\")\n    text(\"- Alpha-beta pruning: speed up minimax search, exact computation\")\n    text(\"- Want to order actions to shrink the bounds as fast as possible\")\n\n\ndef evaluation_functions():\n    link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Feval-functions.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")\n\n    text(\"Now let's go back to the basic minimax formulation.\")\n    image(\"images/minimax-recurrence.png\", width=600)\n    text(\"Recall that it takes exponential time in general!\")\n    text(\"How can we compute things approximately?\")\n\n    text(\"Key idea: define **evaluation function**\")\n    text(\"- In the game, only thing that matters is who wins at the end\")\n    text(\"- Evaluation function captures prior knowledge about what might be good\")\n    image(\"images/eval-functions-chess.png\", width=500)\n\n    text(\"Using an evaluation function, can define a recurrence that keeps track of a depth d:\")\n    image(\"images/eval-functions-recurrence.png\", width=600)\n    text(\"- No guarantees that we will find the optimal policy!\")\n\n    text(\"Summary:\")\n    text(\"- Evaluation function: prior knowledge that evaluates a state\")\n    text(\"- Do search to a certain depth, and then use the evaluation function\")\n    text(\"- Analogy: FutureCost in search problems\")\n\n\nif __name__ == \"__main__\":\n    main()"
  },
  "hidden_line_numbers": {
    "games.py": []
  },
  "steps": [
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 12,
          "function_name": "main",
          "code": "def main():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 13,
          "function_name": "main",
          "code": "text(\"# Lecture 10: Games I\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "# Lecture 10: Games I",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 15,
          "function_name": "main",
          "code": "text(\"Last week: Markov decision processes and reinforcement learning\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Last week: Markov decision processes and reinforcement learning",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 16,
          "function_name": "main",
          "code": "text(\"This week: games\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This week: games",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 18,
          "function_name": "main",
          "code": "image(\"images/game1.png\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/game1.png",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 19,
          "function_name": "main",
          "code": "text(\"What should your strategy be?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "What should your strategy be?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 20,
          "function_name": "main",
          "code": "text(\"Note that it depends on your opponent (me)'s strategy, which is unknown...\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note that it depends on your opponent (me)'s strategy, which is unknown...",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 22,
          "function_name": "main",
          "code": "text(\"MDPs: agent tries to maximize utility, environment is random and known\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "MDPs: agent tries to maximize utility, environment is random and known",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 23,
          "function_name": "main",
          "code": "text(\"Games: agent tries to maximize utility, opponent strategy is **unknown**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Games: agent tries to maximize utility, opponent strategy is **unknown**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 43,
          "function_name": "modeling",
          "code": "def modeling():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 44,
          "function_name": "modeling",
          "code": "link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Fmodeling.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[Autumn 2023 lecture]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Fmodeling.js&mode=print6pp",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 45,
          "function_name": "modeling",
          "code": "image(\"images/game-tree.png\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/game-tree.png",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 47,
          "function_name": "modeling",
          "code": "text(\"This lecture: two-player zero-sum games\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This lecture: two-player zero-sum games",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 48,
          "function_name": "modeling",
          "code": "text(\"- Two players: *agent* and *opponent*\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Two players: *agent* and *opponent*",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 49,
          "function_name": "modeling",
          "code": "text(\"- Zero-sum: utility of agent = -utility of opponent\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Zero-sum: utility of agent = -utility of opponent",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 55,
          "function_name": "game1",
          "code": "def game1():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 56,
          "function_name": "game1",
          "code": "image(\"images/game-tree.png\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/game-tree.png",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 57,
          "function_name": "game1",
          "code": "text(\"Let us define a game formally:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let us define a game formally:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 58,
          "function_name": "game1",
          "code": "game = Game1()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 61,
          "function_name": "game1",
          "code": "state = game.start_state()  # Root node @inspect state @stepover"
        }
      ],
      "env": {
        "state": {
          "type": "str",
          "contents": "root",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 62,
          "function_name": "game1",
          "code": "is_end = game.is_end(state)  # Leaf node? @inspect is_end @stepover"
        }
      ],
      "env": {
        "is_end": {
          "type": "bool",
          "contents": false,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 63,
          "function_name": "game1",
          "code": "player = game.player(state)  # Whose turn is it? @inspect player @stepover"
        }
      ],
      "env": {
        "player": {
          "type": "str",
          "contents": "agent",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 64,
          "function_name": "game1",
          "code": "successors = game.successors(state)  # For each action -> successor state @inspect successors @stepover"
        }
      ],
      "env": {
        "successors": {
          "type": "dict",
          "contents": {
            "A": {
              "type": "str",
              "contents": "A",
              "dtype": null,
              "shape": null
            },
            "B": {
              "type": "str",
              "contents": "B",
              "dtype": null,
              "shape": null
            },
            "C": {
              "type": "str",
              "contents": "C",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 66,
          "function_name": "game1",
          "code": "state = \"A\" # @inspect state @clear is_end player successors"
        }
      ],
      "env": {
        "state": {
          "type": "str",
          "contents": "A",
          "dtype": null,
          "shape": null
        },
        "is_end": null,
        "player": null,
        "successors": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 67,
          "function_name": "game1",
          "code": "is_end = game.is_end(state)  # @inspect is_end @stepover"
        }
      ],
      "env": {
        "is_end": {
          "type": "bool",
          "contents": false,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 68,
          "function_name": "game1",
          "code": "player = game.player(state)  # @inspect player @stepover"
        }
      ],
      "env": {
        "player": {
          "type": "str",
          "contents": "opp",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 69,
          "function_name": "game1",
          "code": "successors = game.successors(state)  # @inspect successors @stepover"
        }
      ],
      "env": {
        "successors": {
          "type": "dict",
          "contents": {
            "1": {
              "type": "str",
              "contents": "A1",
              "dtype": null,
              "shape": null
            },
            "2": {
              "type": "str",
              "contents": "A2",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 71,
          "function_name": "game1",
          "code": "state = \"A1\" # @inspect state @clear is_end player successors"
        }
      ],
      "env": {
        "state": {
          "type": "str",
          "contents": "A1",
          "dtype": null,
          "shape": null
        },
        "is_end": null,
        "player": null,
        "successors": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 72,
          "function_name": "game1",
          "code": "is_end = game.is_end(state)  # @inspect is_end @stepover"
        }
      ],
      "env": {
        "is_end": {
          "type": "bool",
          "contents": true,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 73,
          "function_name": "game1",
          "code": "utility = game.utility(state)  # @inspect utility @stepover"
        }
      ],
      "env": {
        "utility": {
          "type": "int",
          "contents": -50,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 75,
          "function_name": "game1",
          "code": "text(\"Key characteristics of a **game**:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Key characteristics of a **game**:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 76,
          "function_name": "game1",
          "code": "text(\"- All the utility is at the end state (sparse reward)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- All the utility is at the end state (sparse reward)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 77,
          "function_name": "game1",
          "code": "text(\"- Different players in control at different states\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Different players in control at different states",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 79,
          "function_name": "game1",
          "code": "text(\"Types of policies:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Types of policies:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 80,
          "function_name": "game1",
          "code": "text(\"- Deterministic: \u03c0_p(s) is action player p takes in state s\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Deterministic: \u03c0_p(s) is action player p takes in state s",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 81,
          "function_name": "game1",
          "code": "text(\"- Stochastic: \u03c0_p(a | s) is probability player p takes action a in state s\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Stochastic: \u03c0_p(a | s) is probability player p takes action a in state s",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        },
        {
          "path": "games.py",
          "line_number": 82,
          "function_name": "game1",
          "code": "text(\"In general, we will consider stochastic policies.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In general, we will consider stochastic policies.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 51,
          "function_name": "modeling",
          "code": "game1()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 52,
          "function_name": "modeling",
          "code": "halving_game()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 52,
          "function_name": "modeling",
          "code": "halving_game()"
        },
        {
          "path": "games.py",
          "line_number": 85,
          "function_name": "halving_game",
          "code": "def halving_game():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 52,
          "function_name": "modeling",
          "code": "halving_game()"
        },
        {
          "path": "games.py",
          "line_number": 86,
          "function_name": "halving_game",
          "code": "text(\"Let's consider another game:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's consider another game:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 52,
          "function_name": "modeling",
          "code": "halving_game()"
        },
        {
          "path": "games.py",
          "line_number": 87,
          "function_name": "halving_game",
          "code": "image(\"images/halving-game.png\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/halving-game.png",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 52,
          "function_name": "modeling",
          "code": "halving_game()"
        },
        {
          "path": "games.py",
          "line_number": 88,
          "function_name": "halving_game",
          "code": "game = HalvingGame(n=11)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 52,
          "function_name": "modeling",
          "code": "halving_game()"
        },
        {
          "path": "games.py",
          "line_number": 90,
          "function_name": "halving_game",
          "code": "state = game.start_state()  # @inspect state @stepover"
        }
      ],
      "env": {
        "state": {
          "type": "games.HalvingState",
          "contents": {
            "n": {
              "type": "int",
              "contents": 11,
              "dtype": null,
              "shape": null
            },
            "player": {
              "type": "str",
              "contents": "agent",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 52,
          "function_name": "modeling",
          "code": "halving_game()"
        },
        {
          "path": "games.py",
          "line_number": 91,
          "function_name": "halving_game",
          "code": "player = game.player(state)  # @inspect player @stepover"
        }
      ],
      "env": {
        "player": {
          "type": "str",
          "contents": "agent",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 52,
          "function_name": "modeling",
          "code": "halving_game()"
        },
        {
          "path": "games.py",
          "line_number": 92,
          "function_name": "halving_game",
          "code": "successors = game.successors(state)  # @inspect successors @stepover"
        }
      ],
      "env": {
        "successors": {
          "type": "dict",
          "contents": {
            "decrement": {
              "type": "games.HalvingState",
              "contents": {
                "n": {
                  "type": "int",
                  "contents": 10,
                  "dtype": null,
                  "shape": null
                },
                "player": {
                  "type": "str",
                  "contents": "opp",
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            "half": {
              "type": "games.HalvingState",
              "contents": {
                "n": {
                  "type": "int",
                  "contents": 5,
                  "dtype": null,
                  "shape": null
                },
                "player": {
                  "type": "str",
                  "contents": "opp",
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 52,
          "function_name": "modeling",
          "code": "halving_game()"
        },
        {
          "path": "games.py",
          "line_number": 93,
          "function_name": "halving_game",
          "code": "is_end = game.is_end(state)  # @inspect is_end @stepover"
        }
      ],
      "env": {
        "is_end": {
          "type": "bool",
          "contents": false,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        },
        {
          "path": "games.py",
          "line_number": 52,
          "function_name": "modeling",
          "code": "halving_game()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 25,
          "function_name": "main",
          "code": "modeling()               # What is a game?"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 227,
          "function_name": "game_evaluation",
          "code": "def game_evaluation():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 228,
          "function_name": "game_evaluation",
          "code": "link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Fgame-evaluation.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[Autumn 2023 lecture]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Fgame-evaluation.js&mode=print6pp",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 230,
          "function_name": "game_evaluation",
          "code": "text(\"Given a game and a policy for each player...\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Given a game and a policy for each player...",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 231,
          "function_name": "game_evaluation",
          "code": "text(\"...the **value** (expected utility) of a game over all possible rollouts\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...the **value** (expected utility) of a game over all possible rollouts",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 234,
          "function_name": "game_evaluation",
          "code": "def always_choose_a_policy(state: State) -> dict[Action, float]:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 238,
          "function_name": "game_evaluation",
          "code": "def random_policy(state: State) -> dict[Action, float]:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 242,
          "function_name": "game_evaluation",
          "code": "\"agent\": always_choose_a_policy,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 243,
          "function_name": "game_evaluation",
          "code": "\"opp\": random_policy,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 241,
          "function_name": "game_evaluation",
          "code": "policies = {"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 246,
          "function_name": "game_evaluation",
          "code": "game = Game1()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 248,
          "function_name": "game_evaluation",
          "code": "text(\"Let's play the game!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's play the game!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 249,
          "function_name": "game_evaluation",
          "code": "set_random_seed(1)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        },
        {
          "path": "games.py",
          "line_number": 207,
          "function_name": "simulate",
          "code": "def simulate(game: Game, policies: dict[str, Policy]) -> Rollout:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        },
        {
          "path": "games.py",
          "line_number": 209,
          "function_name": "simulate",
          "code": "state = game.start_state()  # @inspect state @stepover"
        }
      ],
      "env": {
        "state": {
          "type": "str",
          "contents": "root",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        },
        {
          "path": "games.py",
          "line_number": 210,
          "function_name": "simulate",
          "code": "steps = []"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        },
        {
          "path": "games.py",
          "line_number": 212,
          "function_name": "simulate",
          "code": "while not game.is_end(state):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        },
        {
          "path": "games.py",
          "line_number": 214,
          "function_name": "simulate",
          "code": "player = game.player(state)  # @inspect player @stepover"
        }
      ],
      "env": {
        "player": {
          "type": "str",
          "contents": "agent",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        },
        {
          "path": "games.py",
          "line_number": 215,
          "function_name": "simulate",
          "code": "actions = policies[player](state)  # @inspect actions @stepover"
        }
      ],
      "env": {
        "actions": {
          "type": "dict",
          "contents": {
            "A": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        },
        {
          "path": "games.py",
          "line_number": 216,
          "function_name": "simulate",
          "code": "action = sample_dict(actions)  # @inspect action @stepover"
        }
      ],
      "env": {
        "action": {
          "type": "numpy.str_",
          "contents": "A",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        },
        {
          "path": "games.py",
          "line_number": 219,
          "function_name": "simulate",
          "code": "state = game.successors(state)[action]  # @inspect state @stepover"
        }
      ],
      "env": {
        "state": {
          "type": "str",
          "contents": "A",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        },
        {
          "path": "games.py",
          "line_number": 220,
          "function_name": "simulate",
          "code": "steps.append(Step(action=action, state=state))  # @inspect steps"
        }
      ],
      "env": {
        "steps": {
          "type": "list",
          "contents": [
            {
              "type": "games.Step",
              "contents": {
                "action": {
                  "type": "numpy.str_",
                  "contents": "A",
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "str",
                  "contents": "A",
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        },
        {
          "path": "games.py",
          "line_number": 212,
          "function_name": "simulate",
          "code": "while not game.is_end(state):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        },
        {
          "path": "games.py",
          "line_number": 214,
          "function_name": "simulate",
          "code": "player = game.player(state)  # @inspect player @stepover"
        }
      ],
      "env": {
        "player": {
          "type": "str",
          "contents": "opp",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        },
        {
          "path": "games.py",
          "line_number": 215,
          "function_name": "simulate",
          "code": "actions = policies[player](state)  # @inspect actions @stepover"
        }
      ],
      "env": {
        "actions": {
          "type": "dict",
          "contents": {
            "1": {
              "type": "float",
              "contents": 0.5,
              "dtype": null,
              "shape": null
            },
            "2": {
              "type": "float",
              "contents": 0.5,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        },
        {
          "path": "games.py",
          "line_number": 216,
          "function_name": "simulate",
          "code": "action = sample_dict(actions)  # @inspect action @stepover"
        }
      ],
      "env": {
        "action": {
          "type": "numpy.str_",
          "contents": "2",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        },
        {
          "path": "games.py",
          "line_number": 219,
          "function_name": "simulate",
          "code": "state = game.successors(state)[action]  # @inspect state @stepover"
        }
      ],
      "env": {
        "state": {
          "type": "str",
          "contents": "A2",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        },
        {
          "path": "games.py",
          "line_number": 220,
          "function_name": "simulate",
          "code": "steps.append(Step(action=action, state=state))  # @inspect steps"
        }
      ],
      "env": {
        "steps": {
          "type": "list",
          "contents": [
            {
              "type": "games.Step",
              "contents": {
                "action": {
                  "type": "numpy.str_",
                  "contents": "A",
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "str",
                  "contents": "A",
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "games.Step",
              "contents": {
                "action": {
                  "type": "numpy.str_",
                  "contents": "2",
                  "dtype": null,
                  "shape": null
                },
                "state": {
                  "type": "str",
                  "contents": "A2",
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        },
        {
          "path": "games.py",
          "line_number": 212,
          "function_name": "simulate",
          "code": "while not game.is_end(state):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        },
        {
          "path": "games.py",
          "line_number": 223,
          "function_name": "simulate",
          "code": "utility = game.utility(state)  # @inspect utility @stepover"
        }
      ],
      "env": {
        "utility": {
          "type": "int",
          "contents": 50,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        },
        {
          "path": "games.py",
          "line_number": 224,
          "function_name": "simulate",
          "code": "return Rollout(steps=steps, utility=utility)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 250,
          "function_name": "game_evaluation",
          "code": "utility = simulate(game, policies)  # @inspect utility"
        }
      ],
      "env": {
        "utility": {
          "type": "games.Rollout",
          "contents": {
            "steps": {
              "type": "list",
              "contents": [
                {
                  "type": "games.Step",
                  "contents": {
                    "action": {
                      "type": "numpy.str_",
                      "contents": "A",
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "str",
                      "contents": "A",
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "games.Step",
                  "contents": {
                    "action": {
                      "type": "numpy.str_",
                      "contents": "2",
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "str",
                      "contents": "A2",
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "utility": {
              "type": "int",
              "contents": 50,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 252,
          "function_name": "game_evaluation",
          "code": "text(\"Do it multiple times and average:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Do it multiple times and average:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 253,
          "function_name": "game_evaluation",
          "code": "utilities = [simulate(game, policies).utility for _ in range(20)]  # @inspect utilities @stepover"
        }
      ],
      "env": {
        "utilities": {
          "type": "list",
          "contents": [
            {
              "type": "int",
              "contents": -50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": -50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": -50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": -50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": -50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": -50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": -50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 50,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 50,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 254,
          "function_name": "game_evaluation",
          "code": "mean_utility = np.mean(utilities)  # @inspect mean_utility"
        }
      ],
      "env": {
        "mean_utility": {
          "type": "numpy.float64",
          "contents": 15.0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 256,
          "function_name": "game_evaluation",
          "code": "text(\"Can we compute the game value exactly without simulation?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Can we compute the game value exactly without simulation?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 258,
          "function_name": "game_evaluation",
          "code": "text(\"Yes, by defining a recurrence!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Yes, by defining a recurrence!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 259,
          "function_name": "game_evaluation",
          "code": "image(\"images/game-evaluation-graphical.png\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/game-evaluation-graphical.png",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 260,
          "function_name": "game_evaluation",
          "code": "image(\"images/game-evaluation-recurrence.png\", width=600)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/game-evaluation-recurrence.png",
          "style": {
            "width": 600
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 261,
          "function_name": "game_evaluation",
          "code": "state = game.start_state()  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 262,
          "function_name": "game_evaluation",
          "code": "value = V_eval(game, policies, state)  # @inspect value"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 262,
          "function_name": "game_evaluation",
          "code": "value = V_eval(game, policies, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 274,
          "function_name": "V_eval",
          "code": "def V_eval(game: Game, policies: dict[str, Policy], state: Any) -> float:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 262,
          "function_name": "game_evaluation",
          "code": "value = V_eval(game, policies, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 277,
          "function_name": "V_eval",
          "code": "if game.is_end(state):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 262,
          "function_name": "game_evaluation",
          "code": "value = V_eval(game, policies, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 281,
          "function_name": "V_eval",
          "code": "player = game.player(state)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 262,
          "function_name": "game_evaluation",
          "code": "value = V_eval(game, policies, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 282,
          "function_name": "V_eval",
          "code": "policy = policies[player]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 262,
          "function_name": "game_evaluation",
          "code": "value = V_eval(game, policies, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 285,
          "function_name": "V_eval",
          "code": "value = 0  # @inspect value"
        }
      ],
      "env": {
        "value": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 262,
          "function_name": "game_evaluation",
          "code": "value = V_eval(game, policies, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 286,
          "function_name": "V_eval",
          "code": "for action, prob in policy(state).items():  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 262,
          "function_name": "game_evaluation",
          "code": "value = V_eval(game, policies, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 287,
          "function_name": "V_eval",
          "code": "next_state = game.successors(state)[action]  # @stepover @inspect next_state"
        }
      ],
      "env": {
        "next_state": {
          "type": "str",
          "contents": "A",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 262,
          "function_name": "game_evaluation",
          "code": "value = V_eval(game, policies, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 288,
          "function_name": "V_eval",
          "code": "value += prob * V_eval(game, policies, next_state)  # @stepover @inspect value"
        }
      ],
      "env": {
        "value": {
          "type": "float",
          "contents": 0.0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 262,
          "function_name": "game_evaluation",
          "code": "value = V_eval(game, policies, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 286,
          "function_name": "V_eval",
          "code": "for action, prob in policy(state).items():  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 262,
          "function_name": "game_evaluation",
          "code": "value = V_eval(game, policies, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 290,
          "function_name": "V_eval",
          "code": "return value"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 262,
          "function_name": "game_evaluation",
          "code": "value = V_eval(game, policies, state)  # @inspect value"
        }
      ],
      "env": {
        "value": {
          "type": "float",
          "contents": 0.0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 263,
          "function_name": "game_evaluation",
          "code": "text(\"This computation is exact, but could take exponential time!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This computation is exact, but could take exponential time!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 265,
          "function_name": "game_evaluation",
          "code": "image(\"images/game-evaluation.png\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/game-evaluation.png",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 267,
          "function_name": "game_evaluation",
          "code": "text(\"Summary:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 268,
          "function_name": "game_evaluation",
          "code": "text(\"- Value is the expected utility of the game\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Value is the expected utility of the game",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 269,
          "function_name": "game_evaluation",
          "code": "text(\"- Monte Carlo: we can simulate the game and average the utilities\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Monte Carlo: we can simulate the game and average the utilities",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 270,
          "function_name": "game_evaluation",
          "code": "text(\"- Recurrence to compute value exactly (but could take exponential time!)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Recurrence to compute value exactly (but could take exponential time!)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        },
        {
          "path": "games.py",
          "line_number": 271,
          "function_name": "game_evaluation",
          "code": "text(\"- Analogous to policy evaluation in MDPs\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Analogous to policy evaluation in MDPs",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 26,
          "function_name": "main",
          "code": "game_evaluation()        # Play the game and see who wins"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 293,
          "function_name": "expectimax",
          "code": "def expectimax():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 294,
          "function_name": "expectimax",
          "code": "link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Fexpectimax.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[Autumn 2023 lecture]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Fexpectimax.js&mode=print6pp",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 296,
          "function_name": "expectimax",
          "code": "text(\"Previously: we can evaluate a fixed agent policy\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Previously: we can evaluate a fixed agent policy",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 297,
          "function_name": "expectimax",
          "code": "text(\"Now: find the optimal agent policy\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now: find the optimal agent policy",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 299,
          "function_name": "expectimax",
          "code": "image(\"images/expectimax-graphical.png\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/expectimax-graphical.png",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 300,
          "function_name": "expectimax",
          "code": "image(\"images/expectimax-recurrence.png\", width=600)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/expectimax-recurrence.png",
          "style": {
            "width": 600
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 303,
          "function_name": "expectimax",
          "code": "def random_policy(state: Any) -> Any:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 306,
          "function_name": "expectimax",
          "code": "image(\"images/expectimax.png\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/expectimax.png",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 308,
          "function_name": "expectimax",
          "code": "game = Game1()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 309,
          "function_name": "expectimax",
          "code": "state = game.start_state()  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 310,
          "function_name": "expectimax",
          "code": "value = V_exptmax(game, random_policy, state)  # @inspect value"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 310,
          "function_name": "expectimax",
          "code": "value = V_exptmax(game, random_policy, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 318,
          "function_name": "V_exptmax",
          "code": "def V_exptmax(game: Game, opp_policy: Policy, state: Any) -> float:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 310,
          "function_name": "expectimax",
          "code": "value = V_exptmax(game, random_policy, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 321,
          "function_name": "V_exptmax",
          "code": "if game.is_end(state):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 310,
          "function_name": "expectimax",
          "code": "value = V_exptmax(game, random_policy, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 325,
          "function_name": "V_exptmax",
          "code": "player = game.player(state)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 310,
          "function_name": "expectimax",
          "code": "value = V_exptmax(game, random_policy, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 327,
          "function_name": "V_exptmax",
          "code": "if player == \"agent\":"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 310,
          "function_name": "expectimax",
          "code": "value = V_exptmax(game, random_policy, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 329,
          "function_name": "V_exptmax",
          "code": "next_states = list(game.successors(state).values())  # @stepover @inspect next_states"
        }
      ],
      "env": {
        "next_states": {
          "type": "list",
          "contents": [
            {
              "type": "str",
              "contents": "A",
              "dtype": null,
              "shape": null
            },
            {
              "type": "str",
              "contents": "B",
              "dtype": null,
              "shape": null
            },
            {
              "type": "str",
              "contents": "C",
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 310,
          "function_name": "expectimax",
          "code": "value = V_exptmax(game, random_policy, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 330,
          "function_name": "V_exptmax",
          "code": "values = [V_exptmax(game, opp_policy, next_state) for next_state in next_states]  # @stepover @inspect values"
        }
      ],
      "env": {
        "values": {
          "type": "list",
          "contents": [
            {
              "type": "numpy.float64",
              "contents": 0.0,
              "dtype": null,
              "shape": null
            },
            {
              "type": "numpy.float64",
              "contents": 2.0,
              "dtype": null,
              "shape": null
            },
            {
              "type": "numpy.float64",
              "contents": 5.0,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 310,
          "function_name": "expectimax",
          "code": "value = V_exptmax(game, random_policy, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 331,
          "function_name": "V_exptmax",
          "code": "value = np.max(values)  # @inspect value"
        }
      ],
      "env": {
        "value": {
          "type": "numpy.float64",
          "contents": 5.0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 310,
          "function_name": "expectimax",
          "code": "value = V_exptmax(game, random_policy, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 332,
          "function_name": "V_exptmax",
          "code": "return value"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 310,
          "function_name": "expectimax",
          "code": "value = V_exptmax(game, random_policy, state)  # @inspect value"
        }
      ],
      "env": {
        "value": {
          "type": "numpy.float64",
          "contents": 5.0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 311,
          "function_name": "expectimax",
          "code": "text(\"Now the optimal action is to choose C!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now the optimal action is to choose C!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 313,
          "function_name": "expectimax",
          "code": "text(\"Summary:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 314,
          "function_name": "expectimax",
          "code": "text(\"- Expectimax: find the optimal agent policy with respect to a fixed opponent policy\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Expectimax: find the optimal agent policy with respect to a fixed opponent policy",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        },
        {
          "path": "games.py",
          "line_number": 315,
          "function_name": "expectimax",
          "code": "text(\"- Analogous to value iteration in MDPs\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Analogous to value iteration in MDPs",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 27,
          "function_name": "main",
          "code": "expectimax()             # Assume the opponent is playing a fixed strategy"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 345,
          "function_name": "minimax",
          "code": "def minimax():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 346,
          "function_name": "minimax",
          "code": "link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Fminimax.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[Autumn 2023 lecture]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Fminimax.js&mode=print6pp",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 348,
          "function_name": "minimax",
          "code": "text(\"Previously: assumed the opponent policy was known (expectimax)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Previously: assumed the opponent policy was known (expectimax)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 349,
          "function_name": "minimax",
          "code": "text(\"The whole point of games is that we don't know the opponent policy!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The whole point of games is that we don't know the opponent policy!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 350,
          "function_name": "minimax",
          "code": "text(\"What should we do?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "What should we do?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 352,
          "function_name": "minimax",
          "code": "text(\"**Minimax**: assume the opponent plays their best possible strategy\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Minimax**: assume the opponent plays their best possible strategy",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 354,
          "function_name": "minimax",
          "code": "text(\"Here is the minimax recurrence:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Here is the minimax recurrence:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 355,
          "function_name": "minimax",
          "code": "image(\"images/minimax-graphical.png\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/minimax-graphical.png",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 356,
          "function_name": "minimax",
          "code": "image(\"images/minimax-recurrence.png\", width=600)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/minimax-recurrence.png",
          "style": {
            "width": 600
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 358,
          "function_name": "minimax",
          "code": "text(\"Here's what it looks like for game 1:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Here's what it looks like for game 1:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 359,
          "function_name": "minimax",
          "code": "image(\"images/minimax.png\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/minimax.png",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 361,
          "function_name": "minimax",
          "code": "game = Game1()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 362,
          "function_name": "minimax",
          "code": "state = game.start_state()  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 363,
          "function_name": "minimax",
          "code": "value = V_minmax(game, state)  # @inspect value"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 363,
          "function_name": "minimax",
          "code": "value = V_minmax(game, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 404,
          "function_name": "V_minmax",
          "code": "def V_minmax(game: Game, state: Any) -> tuple[float, Action]:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 363,
          "function_name": "minimax",
          "code": "value = V_minmax(game, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 407,
          "function_name": "V_minmax",
          "code": "if game.is_end(state):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 363,
          "function_name": "minimax",
          "code": "value = V_minmax(game, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 411,
          "function_name": "V_minmax",
          "code": "player = game.player(state)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 363,
          "function_name": "minimax",
          "code": "value = V_minmax(game, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 414,
          "function_name": "V_minmax",
          "code": "successors = game.successors(state)  # @stepover @inspect successors"
        }
      ],
      "env": {
        "successors": {
          "type": "dict",
          "contents": {
            "A": {
              "type": "str",
              "contents": "A",
              "dtype": null,
              "shape": null
            },
            "B": {
              "type": "str",
              "contents": "B",
              "dtype": null,
              "shape": null
            },
            "C": {
              "type": "str",
              "contents": "C",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 363,
          "function_name": "minimax",
          "code": "value = V_minmax(game, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 415,
          "function_name": "V_minmax",
          "code": "values = {action: V_minmax(game, next_state)[0] for action, next_state in successors.items()}  # @stepover @inspect values"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 363,
          "function_name": "minimax",
          "code": "value = V_minmax(game, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 415,
          "function_name": "V_minmax",
          "code": "values = {action: V_minmax(game, next_state)[0] for action, next_state in successors.items()}  # @stepover @inspect values"
        },
        {
          "path": "games.py",
          "line_number": 415,
          "function_name": "<dictcomp>",
          "code": "values = {action: V_minmax(game, next_state)[0] for action, next_state in successors.items()}  # @stepover @inspect values"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 363,
          "function_name": "minimax",
          "code": "value = V_minmax(game, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 415,
          "function_name": "V_minmax",
          "code": "values = {action: V_minmax(game, next_state)[0] for action, next_state in successors.items()}  # @stepover @inspect values"
        }
      ],
      "env": {
        "values": {
          "type": "dict",
          "contents": {
            "A": {
              "type": "int",
              "contents": -50,
              "dtype": null,
              "shape": null
            },
            "B": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            "C": {
              "type": "int",
              "contents": -5,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 363,
          "function_name": "minimax",
          "code": "value = V_minmax(game, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 417,
          "function_name": "V_minmax",
          "code": "if player == \"agent\":  # Agent maximizes utility"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 363,
          "function_name": "minimax",
          "code": "value = V_minmax(game, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 418,
          "function_name": "V_minmax",
          "code": "action, value = max(values.items(), key=lambda x: x[1])  # @inspect action value"
        }
      ],
      "env": {
        "action": {
          "type": "str",
          "contents": "B",
          "dtype": null,
          "shape": null
        },
        "value": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 363,
          "function_name": "minimax",
          "code": "value = V_minmax(game, state)  # @inspect value"
        },
        {
          "path": "games.py",
          "line_number": 424,
          "function_name": "V_minmax",
          "code": "return value, action"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 363,
          "function_name": "minimax",
          "code": "value = V_minmax(game, state)  # @inspect value"
        }
      ],
      "env": {
        "value": {
          "type": "tuple",
          "contents": [
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "str",
              "contents": "B",
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 365,
          "function_name": "minimax",
          "code": "text(\"Let's look at the minimax solution for the halving game:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's look at the minimax solution for the halving game:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 366,
          "function_name": "minimax",
          "code": "game = HalvingGame(n=11)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 368,
          "function_name": "minimax",
          "code": "def minimax_policy(state: HalvingState) -> dict[Action, float]:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 373,
          "function_name": "minimax",
          "code": "def random_policy(state: HalvingState) -> dict[Action, float]:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 377,
          "function_name": "minimax",
          "code": "\"agent\": minimax_policy,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 378,
          "function_name": "minimax",
          "code": "\"opp\": random_policy,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 376,
          "function_name": "minimax",
          "code": "policies = {"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 381,
          "function_name": "minimax",
          "code": "set_random_seed(1)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 382,
          "function_name": "minimax",
          "code": "rollout = simulate(game, policies)  # @inspect rollout @stepover"
        }
      ],
      "env": {
        "rollout": {
          "type": "games.Rollout",
          "contents": {
            "steps": {
              "type": "list",
              "contents": [
                {
                  "type": "games.Step",
                  "contents": {
                    "action": {
                      "type": "numpy.str_",
                      "contents": "decrement",
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "games.HalvingState",
                      "contents": {
                        "n": {
                          "type": "int",
                          "contents": 10,
                          "dtype": null,
                          "shape": null
                        },
                        "player": {
                          "type": "str",
                          "contents": "opp",
                          "dtype": null,
                          "shape": null
                        }
                      },
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "games.Step",
                  "contents": {
                    "action": {
                      "type": "numpy.str_",
                      "contents": "half",
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "games.HalvingState",
                      "contents": {
                        "n": {
                          "type": "int",
                          "contents": 5,
                          "dtype": null,
                          "shape": null
                        },
                        "player": {
                          "type": "str",
                          "contents": "agent",
                          "dtype": null,
                          "shape": null
                        }
                      },
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "games.Step",
                  "contents": {
                    "action": {
                      "type": "numpy.str_",
                      "contents": "decrement",
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "games.HalvingState",
                      "contents": {
                        "n": {
                          "type": "int",
                          "contents": 4,
                          "dtype": null,
                          "shape": null
                        },
                        "player": {
                          "type": "str",
                          "contents": "opp",
                          "dtype": null,
                          "shape": null
                        }
                      },
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "games.Step",
                  "contents": {
                    "action": {
                      "type": "numpy.str_",
                      "contents": "decrement",
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "games.HalvingState",
                      "contents": {
                        "n": {
                          "type": "int",
                          "contents": 3,
                          "dtype": null,
                          "shape": null
                        },
                        "player": {
                          "type": "str",
                          "contents": "agent",
                          "dtype": null,
                          "shape": null
                        }
                      },
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "games.Step",
                  "contents": {
                    "action": {
                      "type": "numpy.str_",
                      "contents": "half",
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "games.HalvingState",
                      "contents": {
                        "n": {
                          "type": "int",
                          "contents": 1,
                          "dtype": null,
                          "shape": null
                        },
                        "player": {
                          "type": "str",
                          "contents": "opp",
                          "dtype": null,
                          "shape": null
                        }
                      },
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "games.Step",
                  "contents": {
                    "action": {
                      "type": "numpy.str_",
                      "contents": "decrement",
                      "dtype": null,
                      "shape": null
                    },
                    "state": {
                      "type": "games.HalvingState",
                      "contents": {
                        "n": {
                          "type": "int",
                          "contents": 0,
                          "dtype": null,
                          "shape": null
                        },
                        "player": {
                          "type": "str",
                          "contents": "agent",
                          "dtype": null,
                          "shape": null
                        }
                      },
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "utility": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 383,
          "function_name": "minimax",
          "code": "utilities = [simulate(game, policies).utility for _ in range(10)]  # @inspect utilities @stepover"
        }
      ],
      "env": {
        "utilities": {
          "type": "list",
          "contents": [
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 384,
          "function_name": "minimax",
          "code": "mean_utility = np.mean(utilities)  # @inspect mean_utility"
        }
      ],
      "env": {
        "mean_utility": {
          "type": "numpy.float64",
          "contents": 1.0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 385,
          "function_name": "minimax",
          "code": "text(\"The minimax policy crushes the random policy!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The minimax policy crushes the random policy!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 387,
          "function_name": "minimax",
          "code": "text(\"We can compute the minimax value and optimal action for each state:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We can compute the minimax value and optimal action for each state:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 388,
          "function_name": "minimax",
          "code": "results = {n: V_minmax(game, HalvingState(n=n, player=\"agent\")) for n in range(1, 12)}  # @inspect results @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 388,
          "function_name": "minimax",
          "code": "results = {n: V_minmax(game, HalvingState(n=n, player=\"agent\")) for n in range(1, 12)}  # @inspect results @stepover"
        },
        {
          "path": "games.py",
          "line_number": 388,
          "function_name": "<dictcomp>",
          "code": "results = {n: V_minmax(game, HalvingState(n=n, player=\"agent\")) for n in range(1, 12)}  # @inspect results @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 388,
          "function_name": "minimax",
          "code": "results = {n: V_minmax(game, HalvingState(n=n, player=\"agent\")) for n in range(1, 12)}  # @inspect results @stepover"
        }
      ],
      "env": {
        "results": {
          "type": "dict",
          "contents": {
            "1": {
              "type": "tuple",
              "contents": [
                {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "str",
                  "contents": "decrement",
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "2": {
              "type": "tuple",
              "contents": [
                {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "str",
                  "contents": "decrement",
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "3": {
              "type": "tuple",
              "contents": [
                {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "str",
                  "contents": "half",
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "4": {
              "type": "tuple",
              "contents": [
                {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "str",
                  "contents": "decrement",
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "5": {
              "type": "tuple",
              "contents": [
                {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "str",
                  "contents": "decrement",
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "6": {
              "type": "tuple",
              "contents": [
                {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "str",
                  "contents": "decrement",
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "7": {
              "type": "tuple",
              "contents": [
                {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "str",
                  "contents": "decrement",
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "8": {
              "type": "tuple",
              "contents": [
                {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "str",
                  "contents": "half",
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "9": {
              "type": "tuple",
              "contents": [
                {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "str",
                  "contents": "half",
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "10": {
              "type": "tuple",
              "contents": [
                {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "str",
                  "contents": "decrement",
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "11": {
              "type": "tuple",
              "contents": [
                {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "str",
                  "contents": "decrement",
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 389,
          "function_name": "minimax",
          "code": "text(\"If the value is 1, agent is guaranteed to win no matter what the opponent does.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "If the value is 1, agent is guaranteed to win no matter what the opponent does.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 390,
          "function_name": "minimax",
          "code": "text(\"If the value is -1, opponent is guaranteed to win **if** they play optimally.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "If the value is -1, opponent is guaranteed to win **if** they play optimally.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 392,
          "function_name": "minimax",
          "code": "text(\"When agent and opponent play optimally, this is **perfect play**.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "When agent and opponent play optimally, this is **perfect play**.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 393,
          "function_name": "minimax",
          "code": "text(\"A game is **solved** if the outcome under perfect play is known.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "A game is **solved** if the outcome under perfect play is known.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 394,
          "function_name": "minimax",
          "code": "text(\"Strongly solved games: tic-tac-toe, nim, connect four\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Strongly solved games: tic-tac-toe, nim, connect four",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 395,
          "function_name": "minimax",
          "code": "text(\"Weakly solved games (from initial position): checkers, Othello\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Weakly solved games (from initial position): checkers, Othello",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 396,
          "function_name": "minimax",
          "code": "text(\"Unsolved games: chess, Go (even if computers are superhuman!)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Unsolved games: chess, Go (even if computers are superhuman!)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 398,
          "function_name": "minimax",
          "code": "text(\"Summary:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 399,
          "function_name": "minimax",
          "code": "text(\"- Agent maximizes utility, opponent minimizes utility\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Agent maximizes utility, opponent minimizes utility",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 400,
          "function_name": "minimax",
          "code": "text(\"- Unlike expectimax, no fixed policies given\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Unlike expectimax, no fixed policies given",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        },
        {
          "path": "games.py",
          "line_number": 401,
          "function_name": "minimax",
          "code": "text(\"- No analogy in MDPs\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- No analogy in MDPs",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 28,
          "function_name": "main",
          "code": "minimax()                # Assume the opponent is playing the best possible strategy"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 427,
          "function_name": "face_off",
          "code": "def face_off():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 428,
          "function_name": "face_off",
          "code": "text(\"Computing recurrences produce different policies:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Computing recurrences produce different policies:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 429,
          "function_name": "face_off",
          "code": "text(\"- V_minmax \u2192 \u03c0_max (agent), \u03c0_min (opponent)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- V_minmax \u2192 \u03c0_max (agent), \u03c0_min (opponent)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 430,
          "function_name": "face_off",
          "code": "text(\"- V_exptmax \u2192 \u03c0_exptmax(7) (agent), \u03c0_7 (opponent)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- V_exptmax \u2192 \u03c0_exptmax(7) (agent), \u03c0_7 (opponent)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 432,
          "function_name": "face_off",
          "code": "text(\"Each 'optimal' policy bakes in assumptions about how the other player plays.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Each 'optimal' policy bakes in assumptions about how the other player plays.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 433,
          "function_name": "face_off",
          "code": "text(\"- Minimax: \u03c0_max is optimal against \u03c0_min\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Minimax: \u03c0_max is optimal against \u03c0_min",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 434,
          "function_name": "face_off",
          "code": "text(\"- Minimax: \u03c0_min is optimal against \u03c0_max\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Minimax: \u03c0_min is optimal against \u03c0_max",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 435,
          "function_name": "face_off",
          "code": "text(\"- Expectimax: \u03c0_exptmax(7) is optimal against \u03c0_7\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Expectimax: \u03c0_exptmax(7) is optimal against \u03c0_7",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 436,
          "function_name": "face_off",
          "code": "text(\"What happens when these polices play different policies?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "What happens when these polices play different policies?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 438,
          "function_name": "face_off",
          "code": "text(\"V(\u03c0_agent, \u03c0_opp): value of game when \u03c0_agent plays \u03c0_opp\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "V(\u03c0_agent, \u03c0_opp): value of game when \u03c0_agent plays \u03c0_opp",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 440,
          "function_name": "face_off",
          "code": "text(\"We can play the policies against each other:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We can play the policies against each other:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 441,
          "function_name": "face_off",
          "code": "image(\"images/face-off.png\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/face-off.png",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 443,
          "function_name": "face_off",
          "code": "text(\"Property 1: \u03c0_max is the best policy against \u03c0_min\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Property 1: \u03c0_max is the best policy against \u03c0_min",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 444,
          "function_name": "face_off",
          "code": "image(\"images/minimax-prop1.png\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/minimax-prop1.png",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 445,
          "function_name": "face_off",
          "code": "text(\"V(\u03c0_exptmax(7), \u03c0_min) \u2264 V(\u03c0_max, \u03c0_min)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "V(\u03c0_exptmax(7), \u03c0_min) \u2264 V(\u03c0_max, \u03c0_min)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 447,
          "function_name": "face_off",
          "code": "text(\"Property 2: \u03c0_min is the best policy against \u03c0_max\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Property 2: \u03c0_min is the best policy against \u03c0_max",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 448,
          "function_name": "face_off",
          "code": "image(\"images/minimax-prop2.png\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/minimax-prop2.png",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 449,
          "function_name": "face_off",
          "code": "text(\"V(\u03c0_max, \u03c0_min) \u2264 V(\u03c0_max, \u03c0_7)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "V(\u03c0_max, \u03c0_min) \u2264 V(\u03c0_max, \u03c0_7)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 450,
          "function_name": "face_off",
          "code": "text(\"If the minimax value is 1, that means agent is guaranteed to win no matter what the opponent does!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "If the minimax value is 1, that means agent is guaranteed to win no matter what the opponent does!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 452,
          "function_name": "face_off",
          "code": "text(\"Property 3: \u03c0_exptmax(7) is optimal against \u03c0_7\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Property 3: \u03c0_exptmax(7) is optimal against \u03c0_7",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 453,
          "function_name": "face_off",
          "code": "image(\"images/minimax-prop3.png\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/minimax-prop3.png",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 454,
          "function_name": "face_off",
          "code": "text(\"V(\u03c0_max, \u03c0_7) \u2264 V(\u03c0_exptmax(7), \u03c0_7)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "V(\u03c0_max, \u03c0_7) \u2264 V(\u03c0_exptmax(7), \u03c0_7)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 455,
          "function_name": "face_off",
          "code": "text(\"You can do better than minimax if you know your opponent!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "You can do better than minimax if you know your opponent!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 457,
          "function_name": "face_off",
          "code": "text(\"Putting everything together:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Putting everything together:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 458,
          "function_name": "face_off",
          "code": "image(\"images/face-off-rel.png\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/face-off-rel.png",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 460,
          "function_name": "face_off",
          "code": "text(\"Summary:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 461,
          "function_name": "face_off",
          "code": "text(\"- Always think about optimality with respect to what?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Always think about optimality with respect to what?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        },
        {
          "path": "games.py",
          "line_number": 462,
          "function_name": "face_off",
          "code": "text(\"- Minimax provides both optimality and a lower bound against any (unknown) opponent\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Minimax provides both optimality and a lower bound against any (unknown) opponent",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 29,
          "function_name": "main",
          "code": "face_off()               # Relationships between values"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 30,
          "function_name": "main",
          "code": "expectiminimax()         # ...and there is randomness in the game"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 30,
          "function_name": "main",
          "code": "expectiminimax()         # ...and there is randomness in the game"
        },
        {
          "path": "games.py",
          "line_number": 465,
          "function_name": "expectiminimax",
          "code": "def expectiminimax():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 30,
          "function_name": "main",
          "code": "expectiminimax()         # ...and there is randomness in the game"
        },
        {
          "path": "games.py",
          "line_number": 466,
          "function_name": "expectiminimax",
          "code": "link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Fexpectiminimax.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[Autumn 2023 lecture]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Fexpectiminimax.js&mode=print6pp",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 30,
          "function_name": "main",
          "code": "expectiminimax()         # ...and there is randomness in the game"
        },
        {
          "path": "games.py",
          "line_number": 468,
          "function_name": "expectiminimax",
          "code": "image(\"images/game2.png\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/game2.png",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 30,
          "function_name": "main",
          "code": "expectiminimax()         # ...and there is randomness in the game"
        },
        {
          "path": "games.py",
          "line_number": 470,
          "function_name": "expectiminimax",
          "code": "text(\"Let's draw the game tree for this game:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's draw the game tree for this game:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 30,
          "function_name": "main",
          "code": "expectiminimax()         # ...and there is randomness in the game"
        },
        {
          "path": "games.py",
          "line_number": 471,
          "function_name": "expectiminimax",
          "code": "image(\"images/expectiminimax.png\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/expectiminimax.png",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 30,
          "function_name": "main",
          "code": "expectiminimax()         # ...and there is randomness in the game"
        },
        {
          "path": "games.py",
          "line_number": 473,
          "function_name": "expectiminimax",
          "code": "text(\"Here's the recurrence:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Here's the recurrence:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 30,
          "function_name": "main",
          "code": "expectiminimax()         # ...and there is randomness in the game"
        },
        {
          "path": "games.py",
          "line_number": 474,
          "function_name": "expectiminimax",
          "code": "image(\"images/expectiminimax-graphical.png\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/expectiminimax-graphical.png",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 30,
          "function_name": "main",
          "code": "expectiminimax()         # ...and there is randomness in the game"
        },
        {
          "path": "games.py",
          "line_number": 475,
          "function_name": "expectiminimax",
          "code": "image(\"images/expectiminimax-recurrence.png\", width=600)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/expectiminimax-recurrence.png",
          "style": {
            "width": 600
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 30,
          "function_name": "main",
          "code": "expectiminimax()         # ...and there is randomness in the game"
        },
        {
          "path": "games.py",
          "line_number": 477,
          "function_name": "expectiminimax",
          "code": "text(\"In general, one could imagine many possible extensions:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In general, one could imagine many possible extensions:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 30,
          "function_name": "main",
          "code": "expectiminimax()         # ...and there is randomness in the game"
        },
        {
          "path": "games.py",
          "line_number": 478,
          "function_name": "expectiminimax",
          "code": "text(\"- More than two players (either agents or opponents)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- More than two players (either agents or opponents)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 30,
          "function_name": "main",
          "code": "expectiminimax()         # ...and there is randomness in the game"
        },
        {
          "path": "games.py",
          "line_number": 479,
          "function_name": "expectiminimax",
          "code": "text(\"- Players taking extra turns or choosing who to go next\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Players taking extra turns or choosing who to go next",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 30,
          "function_name": "main",
          "code": "expectiminimax()         # ...and there is randomness in the game"
        },
        {
          "path": "games.py",
          "line_number": 480,
          "function_name": "expectiminimax",
          "code": "text(\"Just define recurrence V_...() generally!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Just define recurrence V_...() generally!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 30,
          "function_name": "main",
          "code": "expectiminimax()         # ...and there is randomness in the game"
        },
        {
          "path": "games.py",
          "line_number": 482,
          "function_name": "expectiminimax",
          "code": "text(\"Things that aren't covered by game trees:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Things that aren't covered by game trees:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 30,
          "function_name": "main",
          "code": "expectiminimax()         # ...and there is randomness in the game"
        },
        {
          "path": "games.py",
          "line_number": 483,
          "function_name": "expectiminimax",
          "code": "text(\"- Games with imperfect information (e.g., poker)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Games with imperfect information (e.g., poker)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 30,
          "function_name": "main",
          "code": "expectiminimax()         # ...and there is randomness in the game"
        },
        {
          "path": "games.py",
          "line_number": 484,
          "function_name": "expectiminimax",
          "code": "text(\"- Non-zero-sum games (e.g., prisoner's dilemma)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Non-zero-sum games (e.g., prisoner's dilemma)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 30,
          "function_name": "main",
          "code": "expectiminimax()         # ...and there is randomness in the game"
        },
        {
          "path": "games.py",
          "line_number": 485,
          "function_name": "expectiminimax",
          "code": "text(\"- Non-turn-based games (e.g., rock-paper-scissors)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Non-turn-based games (e.g., rock-paper-scissors)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 30,
          "function_name": "main",
          "code": "expectiminimax()         # ...and there is randomness in the game"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 488,
          "function_name": "alpha_beta_pruning",
          "code": "def alpha_beta_pruning():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 489,
          "function_name": "alpha_beta_pruning",
          "code": "link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Falpha-beta-pruning.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[Autumn 2023 lecture]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Falpha-beta-pruning.js&mode=print6pp",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 491,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"Now let's go back to the basic minimax formulation.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now let's go back to the basic minimax formulation.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 492,
          "function_name": "alpha_beta_pruning",
          "code": "image(\"images/minimax-recurrence.png\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/minimax-recurrence.png",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 493,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"Recall that it takes exponential time in general!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall that it takes exponential time in general!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 494,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"How can we speed it up?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "How can we speed it up?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 496,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"**Alpha-beta pruning**: don't visit states that we know aren't going to be optimal.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Alpha-beta pruning**: don't visit states that we know aren't going to be optimal.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 497,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"But how do we know if we don't look?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "But how do we know if we don't look?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 499,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"Simple example:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Simple example:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 500,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"- A has value in [3, 5]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- A has value in [3, 5]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 501,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"- B has value in [5, 100]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- B has value in [5, 100]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 502,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"Which one would you choose?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Which one would you choose?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 503,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"No matter what A and B turn out to be, B will always be better.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "No matter what A and B turn out to be, B will always be better.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 504,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"And we don't need to compute A and B exactly!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "And we don't need to compute A and B exactly!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 505,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"This idea is called **branch and bound**, used heavily in combinatorial optimization.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This idea is called **branch and bound**, used heavily in combinatorial optimization.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 507,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"Let's consider the following game tree:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's consider the following game tree:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 508,
          "function_name": "alpha_beta_pruning",
          "code": "image(\"images/alpha-beta-example.png\", width=300)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/alpha-beta-example.png",
          "style": {
            "width": 300
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 509,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"Root computes max(3, min(2, X)) = 3 no matter what X is...so don't need to explore X!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Root computes max(3, min(2, X)) = 3 no matter what X is...so don't need to explore X!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 511,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"In general:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In general:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 512,
          "function_name": "alpha_beta_pruning",
          "code": "image(\"images/alpha-beta-optimal-path.png\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/alpha-beta-optimal-path.png",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 513,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"- While we're exploring, each max (min) node has a lower (upper) bound on its value\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- While we're exploring, each max (min) node has a lower (upper) bound on its value",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 514,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"- The minimax value came from some leaf\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- The minimax value came from some leaf",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 515,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"- **Optimal path** is path taken by minimax policies to that leaf\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- **Optimal path** is path taken by minimax policies to that leaf",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 516,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"- This optimal path should be within the lower/upper bounds\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- This optimal path should be within the lower/upper bounds",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 517,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"- Prune a node if its bounds doesn't overlap every ancestor's bounds\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Prune a node if its bounds doesn't overlap every ancestor's bounds",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 519,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"Let's work this out on the board:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's work this out on the board:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 520,
          "function_name": "alpha_beta_pruning",
          "code": "image(\"images/alpha-beta-example2.png\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/alpha-beta-example2.png",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 522,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"Ordering:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Ordering:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 523,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"- The order in which the children are visited impacts what you can prune\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- The order in which the children are visited impacts what you can prune",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 524,
          "function_name": "alpha_beta_pruning",
          "code": "image(\"images/move-ordering-example.png\", width=300)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/move-ordering-example.png",
          "style": {
            "width": 300
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 525,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"In practice, use a heuristic (evaluation function later) to order the children:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In practice, use a heuristic (evaluation function later) to order the children:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 526,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"- Decreasing for max nodes\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Decreasing for max nodes",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 527,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"- Increasing for min nodes\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Increasing for min nodes",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 529,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"Summary:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 530,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"- Alpha-beta pruning: speed up minimax search, exact computation\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Alpha-beta pruning: speed up minimax search, exact computation",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        },
        {
          "path": "games.py",
          "line_number": 531,
          "function_name": "alpha_beta_pruning",
          "code": "text(\"- Want to order actions to shrink the bounds as fast as possible\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Want to order actions to shrink the bounds as fast as possible",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 32,
          "function_name": "main",
          "code": "alpha_beta_pruning()     # Speed up search (exact)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        },
        {
          "path": "games.py",
          "line_number": 534,
          "function_name": "evaluation_functions",
          "code": "def evaluation_functions():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        },
        {
          "path": "games.py",
          "line_number": 535,
          "function_name": "evaluation_functions",
          "code": "link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Feval-functions.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[Autumn 2023 lecture]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://stanford-cs221.github.io/autumn2023/modules/module.html#include=games%2Feval-functions.js&mode=print6pp",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        },
        {
          "path": "games.py",
          "line_number": 537,
          "function_name": "evaluation_functions",
          "code": "text(\"Now let's go back to the basic minimax formulation.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now let's go back to the basic minimax formulation.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        },
        {
          "path": "games.py",
          "line_number": 538,
          "function_name": "evaluation_functions",
          "code": "image(\"images/minimax-recurrence.png\", width=600)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/minimax-recurrence.png",
          "style": {
            "width": 600
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        },
        {
          "path": "games.py",
          "line_number": 539,
          "function_name": "evaluation_functions",
          "code": "text(\"Recall that it takes exponential time in general!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall that it takes exponential time in general!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        },
        {
          "path": "games.py",
          "line_number": 540,
          "function_name": "evaluation_functions",
          "code": "text(\"How can we compute things approximately?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "How can we compute things approximately?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        },
        {
          "path": "games.py",
          "line_number": 542,
          "function_name": "evaluation_functions",
          "code": "text(\"Key idea: define **evaluation function**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Key idea: define **evaluation function**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        },
        {
          "path": "games.py",
          "line_number": 543,
          "function_name": "evaluation_functions",
          "code": "text(\"- In the game, only thing that matters is who wins at the end\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- In the game, only thing that matters is who wins at the end",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        },
        {
          "path": "games.py",
          "line_number": 544,
          "function_name": "evaluation_functions",
          "code": "text(\"- Evaluation function captures prior knowledge about what might be good\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Evaluation function captures prior knowledge about what might be good",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        },
        {
          "path": "games.py",
          "line_number": 545,
          "function_name": "evaluation_functions",
          "code": "image(\"images/eval-functions-chess.png\", width=500)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/eval-functions-chess.png",
          "style": {
            "width": 500
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        },
        {
          "path": "games.py",
          "line_number": 547,
          "function_name": "evaluation_functions",
          "code": "text(\"Using an evaluation function, can define a recurrence that keeps track of a depth d:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Using an evaluation function, can define a recurrence that keeps track of a depth d:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        },
        {
          "path": "games.py",
          "line_number": 548,
          "function_name": "evaluation_functions",
          "code": "image(\"images/eval-functions-recurrence.png\", width=600)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/eval-functions-recurrence.png",
          "style": {
            "width": 600
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        },
        {
          "path": "games.py",
          "line_number": 549,
          "function_name": "evaluation_functions",
          "code": "text(\"- No guarantees that we will find the optimal policy!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- No guarantees that we will find the optimal policy!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        },
        {
          "path": "games.py",
          "line_number": 551,
          "function_name": "evaluation_functions",
          "code": "text(\"Summary:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        },
        {
          "path": "games.py",
          "line_number": 552,
          "function_name": "evaluation_functions",
          "code": "text(\"- Evaluation function: prior knowledge that evaluates a state\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Evaluation function: prior knowledge that evaluates a state",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        },
        {
          "path": "games.py",
          "line_number": 553,
          "function_name": "evaluation_functions",
          "code": "text(\"- Do search to a certain depth, and then use the evaluation function\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Do search to a certain depth, and then use the evaluation function",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        },
        {
          "path": "games.py",
          "line_number": 554,
          "function_name": "evaluation_functions",
          "code": "text(\"- Analogy: FutureCost in search problems\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Analogy: FutureCost in search problems",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 33,
          "function_name": "main",
          "code": "evaluation_functions()   # Speed up search (approximate)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 35,
          "function_name": "main",
          "code": "text(\"Summary:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 36,
          "function_name": "main",
          "code": "text(\"- Games: agent tries to maximize utility, opponent strategy is unknown\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Games: agent tries to maximize utility, opponent strategy is unknown",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 37,
          "function_name": "main",
          "code": "text(\"- Minimax principle: assume the opponent tries to minimize utility\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Minimax principle: assume the opponent tries to minimize utility",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 38,
          "function_name": "main",
          "code": "text(\"- Recurrences define various (game, policy) outcomes (evaluation, expectimax, minimax, expectiminimax)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Recurrences define various (game, policy) outcomes (evaluation, expectimax, minimax, expectiminimax)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 39,
          "function_name": "main",
          "code": "text(\"- Alpha-beta pruning: branch and bound to speed up minimax (exact)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Alpha-beta pruning: branch and bound to speed up minimax (exact)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "games.py",
          "line_number": 40,
          "function_name": "main",
          "code": "text(\"- Evaluation functions: prior knowledge that speeds up (approximately)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Evaluation functions: prior knowledge that speeds up (approximately)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    }
  ]
}
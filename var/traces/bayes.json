{
  "files": {
    "bayes.py": "from typing import Callable\nfrom edtrace import text, image, link\nfrom einops import einsum\nfrom collections import defaultdict\nimport numpy as np\nfrom util import set_random_seed\nfrom transformers import AutoModelForCausalLM\n\ndef main():\n    text(\"### Lecture 12: Bayesian networks\")\n    link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=bayesian-networks%2Fdefinitions.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")\n\n    model_based_motivation()\n    review_probability()\n    introduce_probabilistic_inference()\n    introduce_alarm()\n    introduce_medical_diagnosis()\n    introduce_bayesian_networks()\n    language_models()\n    introduce_rejection_sampling()\n    discussion()\n\n    text(\"Summary\")\n    text(\"- Probability: joint distributions, marginalization, conditioning\")\n    text(\"- Probability tables are tensors, can use einsum to express computations\")\n    text(\"- Bayesian networks: directed acyclic graphs of random variables\")\n    text(\"- Probabilistic inference: ask questions P(query | evidence)\")\n    text(\"- Probabilistic programming: programs as representations of joint distributions\")\n    text(\"- Rejection sampling: approximate inference by drawing samples\")\n\n    text(\"Next time: better probabilistic inference!\")\n\n\ndef model_based_motivation():\n    text(\"Recall the ingredients of intelligence:\")\n    image(\"images/perceive-reason-act-learn.png\", width=600)\n\n    text(\"Where we started:\")\n    text(\"- Machine learning: percepts \u2192 actions (predictor)\")\n\n    text(\"Last few weeks: state-based models for reasoning\")\n    text(\"- Search problems: actions have deterministic outcomes\")\n    text(\"- MDPs: actions have stochastic outcomes\")\n    text(\"- Games: exists adversary (or unknown opponent strategy)\")\n\n    text(\"Model-free methods\")\n    text(\"- We just know what actions to take and how much utility it will produce\")\n    text(\"- Examples: classification, regression, SARSA, Q-learning, TD learning\")\n\n    text(\"Model-based methods\")\n    text(\"- We understand how the world works\")\n    text(\"- Examples: search, value iteration (MDPs), minimax (games)\")\n    image(\"images/game-tree.png\", width=400)\n\n    text(\"Model-free methods are more direct and cheaper\")\n    text(\"...but model-based methods are more flexible\")\n    text(\"(can change the reward function without changing the transitions).\")\n\n    text(\"How should we represent the state of the world?\")\n\n\ndef review_probability():\n    text(\"Represent the state of the world by a set of variables.\")\n\n    text(\"**Random variables** (representing attributes of the world):\")\n    text(\"- sunshine S \u2208 {0, 1}\")\n    text(\"- rain R \u2208 {0, 1}\")\n\n    text(\"Possible states of the world (**assignments** to random variables):\")\n    text(\"- {S = 0, R = 0}: no sunshine and no rain\")\n    text(\"- {S = 0, R = 1}: no sunshine and rain\")\n    text(\"- {S = 1, R = 0}: sunshine and no rain\")\n    text(\"- {S = 1, R = 1}: sunshine and rain\")\n\n    text(\"**Joint distribution** (probability of each assignment):\")\n    text(\"- P(S = 0, R = 0) = 0.20\")\n    text(\"- P(S = 0, R = 1) = 0.08\")\n    text(\"- P(S = 1, R = 0) = 0.70\")\n    text(\"- P(S = 1, R = 1) = 0.02\")\n    P_SR = ProbTable(\"S R\", [[0.20, 0.08], [0.70, 0.02]])  # @inspect P_SR @stepover\n\n    text(\"**Marginalization**:\")\n    text(\"- Marginalizing out a variable R means collapsing assignments that only differ in R\")\n    text(\"- P(S = 0) = P(S = 0, R = 0) + P(S = 0, R = 1) = 0.20 + 0.08 = 0.28\")\n    text(\"- P(S = 1) = P(S = 1, R = 0) + P(S = 1, R = 1) = 0.70 + 0.02 = 0.72\")\n\n    text(\"Probability tables are just tensors.\")\n    text(\"Thus can use einops to express computations!\")\n    text(\"Recall einsum: for all s, P(S = s) = \u03a3_r P(S = s, R = r)\")\n    P_S = ProbTable(\"S\", einsum(P_SR.p, \"s r -> s\"))  # @inspect P_S @stepover\n\n    text(\"**Conditioning**:\")  # @clear p_s p_s_table\n    text(\"- Conditioning on R = 1 means selecting only assignments that satisfy the condition:\")\n    text(\"- P(S = 0, R = 1) = 0.08\")\n    text(\"- P(S = 1, R = 1) = 0.02\")\n    text(\"- We then compute the probability of the evidence:\")\n    text(\"- P(R = 1) = P(S = 0, R = 1) + P(S = 1, R = 1) = 0.08 + 0.02 = 0.1\")\n    text(\"- Then divide by this probability:\")\n    text(\"- P(S = 0 | R = 1) = P(S = 0, R = 1) / P(R = 1) = 0.08 / 0.1 = 0.8\")\n    text(\"- P(S = 1 | R = 1) = P(S = 1, R = 1) / P(R = 1) = 0.02 / 0.1 = 0.2\")\n    \n    text(\"We can also use einops to compute the conditional distribution,\")\n    text(\"...but there are a few steps.\")\n    R1 = np.array([0, 1])  # Evidence [R = 1]\n    P_SR1 = ProbTable(\"S R=1\", einsum(P_SR.p, R1, \"s r, r -> s\"))  # Filter to r = 1 @inspect P_SR1 @stepover\n    P_R1 = ProbTable(\"R=1\", einsum(P_SR1.p, \"s ->\"))  # @inspect P_R1 @stepover\n    P_S_given_R1 = ProbTable(\"S | R=1\", P_SR1.p / P_R1.p)  # @inspect P_S_given_R1 @stepover\n\n    text(\"Summary:\")\n    text(\"- Joint distribution: source of truth\")\n    text(\"- Marginalization: collapse assignments that differ only in marginalized variables\")\n    text(\"- Conditioning: select via evidence, compute probability of evidence, then divide\")\n    text(\"- Probability tables are tensors, so we can use einops to express computations!\")\n\n\ndef introduce_probabilistic_inference():\n    text(\"Random variables:\")\n    text(\"- S \u2208 {0, 1} (sunshine)\")\n    text(\"- R \u2208 {0, 1} (rain)\")\n    text(\"- T \u2208 {0, 1} (traffic)\")\n    text(\"- A \u2208 {0, 1} (autumn)\")\n\n    text(\"Joint distribution (source of truth):\")\n    text(\"- P(S, R, T, A)\")\n\n    text(\"What is the probability of rain given that there's traffic and its autumn?\")\n\n    text(\"**Probabilistic inference**: answer questions on the joint distribution\")\n    text(\"Analogy: executing SQL queries on a database\")\n\n    text(\"A question includes:\")\n    text(\"- **Condition** on evidence: [T = 1, A = 1] (traffic and autumn)\")\n    text(\"- Interested in **query**: R (rain?)\")\n\n    text(\"In probability notation:\")\n    text(\"- P(R | T = 1, A = 1)\")\n\n    text(\"Note: all variables not in evidence/query are marginalized out (S)\")\n\n\nclass ProbTable:\n    \"\"\"\n    Represents an arbitrary probability table: could be a local conditional\n    distribution, a marginal distribution, or a conditional distribution.\n\n    description:\n\n      A         B=1          | C          D=1\n      gen-vars  gen-vals       cond-vars  cond-vals\n\n    data could be:\n    - tensor corresponding to the probabilities (axes are cond-vars + gen-vars)\n    - function mapping cond-vars + gen-vars assignments to probabilities\n\n    shape: only needed if data is a function, to determine the shape of the tensor\n    \"\"\"\n    def __init__(self, description: str, data: np.ndarray | Callable, shape: tuple[int] | None = None):\n        if isinstance(data, Callable):\n            # Build up the probabilities\n            self.probs = np.empty(shape)\n            def recurse(assignment: list[int]):\n                if len(assignment) == len(shape):\n                    self.probs[tuple(assignment)] = data(*assignment)\n                else:\n                    for i in range(shape[len(assignment)]):\n                        recurse(assignment + [i])\n            recurse([])\n        else:\n            self.probs = np.array(data)\n\n        # Parse the description into variables and values for both the generation and conditioning side\n        self.cond_vars = []\n        self.gen_vars = []\n        self.cond_vals = []\n        self.gen_vals = []\n\n        items = description.split(\" \")\n        on_conditioning_side = False\n        for item in items:\n            if item == \"|\":\n                on_conditioning_side = True\n            elif on_conditioning_side:\n                if \"=\" in item:\n                    self.cond_vals.append(item)\n                else:\n                    self.cond_vars.append(item)\n            else:\n                if \"=\" in item:\n                    self.gen_vals.append(item)\n                else:\n                    self.gen_vars.append(item)\n\n        assert len(self.cond_vars) + len(self.gen_vars) == len(self.probs.shape), [self.cond_vars, self.gen_vars, self.probs.shape]\n\n    @property\n    def p(self):\n        return self.probs\n\n    def asdict(self):\n        \"\"\"\n        Returns a nice matrix representation of the probability table.\n        a  b  P(A = a, B = b)\n        0  0  0.1\n        0  1  0.2\n        1  0  0.3\n        1  1  0.4\n        \"\"\"\n        vars = self.cond_vars + self.gen_vars\n\n        # Description string (e.g., \"P(A = a, B = b)\")\n        output = []\n        output.append(\", \".join([f\"{var}={var.lower()}\" for var in self.gen_vars] + self.gen_vals))\n        if len(self.cond_vars) > 0 or len(self.cond_vals) > 0:\n            output.append(\"|\")\n            output.append(\", \".join([f\"{var}={var.lower()}\" for var in self.cond_vars] + self.cond_vals))\n        prob_str = \"P(\" + \" \".join(output) + \")\"\n\n        rows = []\n        rows.append([var.lower() for var in vars] + [prob_str])\n        def recurse(assignment: list):\n            if len(assignment) == len(vars):\n                rows.append(assignment + [self.probs[tuple(assignment)]])\n            else:\n                for value in range(self.probs.shape[len(assignment)]):\n                    recurse(assignment + [value])\n        recurse([])\n        return np.array(rows)\n\n\ndef introduce_alarm():\n    text(\"\ud83d\udea8 Problem: earthquakes, burglaries, and alarms\")\n    text(\"- Earthquakes and burglaries are independent events (probability \u03b5 = 0.05)\")\n    text(\"- Either will cause an alarm to go off.\")\n    text(\"- Suppose you get an alarm.\")\n    text(\"- How does hearing that there's an earthquake change the probability of a burglary?\")\n\n    text(\"Joint distribution: P(E, B, A)\")\n    text(\"Which is larger?\")\n    text(\"- P(B = 1 | A = 1): burglary given alarm only\")\n    text(\"- P(B = 1 | A = 1, E = 1): burglary given alarm and earthquake\")\n\n    text(\"To solve this problem, let's use Bayesian networks.\")\n    text(\"We need to do two things:\")\n    text(\"- Construct a joint distribution\")\n    text(\"- Perform probabilistic inference\")\n\n    text(\"### Constructing the joint distribution\")\n    text(\"Let's start by constructing the joint distribution.\")\n    text(\"We could write down a huge table directly,\")\n    text(\"...but let's do it in a more intuitive way.\")\n\n    text(\"There are 4 steps:\")\n    text(\"1. Define the variables (B, E, A)\")\n    text(\"2. Connect the variables with directed edges (B \u2192 A, E \u2192 A)\")\n    text(\"3. Write down local conditional probabilities for each variable (e.g., p(e | b, a))\")\n    text(\"4. Define the joint distribution as the product of the local conditional probabilities\")\n\n    text(\"**Step 1**: Define the variables (B, E, A)\")\n\n    text(\"**Step 2**: Connect the variables with directed edges suggesting direct influence (B \u2192 A, E \u2192 A)\")\n    image(\"images/alarm-bayes.png\", width=300)\n\n    text(\"**Step 3**: Write down local conditional probabilities for each variable (e.g., p(e | b, a))\")\n    epsilon = 0.05  # Probability of rare event\n    p_b = ProbTable(\"B\", [1 - epsilon, epsilon]) # p(b) @inspect p_b @stepover\n    p_e = ProbTable(\"E\", [1 - epsilon, epsilon]) # p(e) @inspect p_e @stepover\n    p_a_given_be = ProbTable(\"A | B E\", lambda b, e, a: a == (b or e), shape=(2, 2, 2))  # p(a | b, e) @inspect p_a_given_be @stepover\n\n    text(\"**Step 4**: Define the joint distribution as the product of the local conditional probabilities\")\n\n    text(\"For all b, e, a: P(B = b, E = e, A = a) = p(b) p(e) p(a | b, e)\")\n    P_BEA = ProbTable(\"B E A\", einsum(p_b.p, p_e.p, p_a_given_be.p, \"b, e, b e a -> b e a\"))  # P(B, E, A) @inspect P_BEA @stepover\n\n    text(\"### Probabilistic inference\")\n    text(\"Now given the joint distribution, we can answer any query we want.\")\n\n    text(\"**P(B = 1)**: burglary given no information\")\n\n    P_B = ProbTable(\"B\", einsum(P_BEA.p, \"b e a -> b\"))  # P(B) @inspect P_B @stepover\n    text(\"Note: marginal P(B = b) matches the local conditional p(b) (low chance of burglary).\")\n\n    text(\"**P(B = 1 | A = 1)**: burglary given alarm only\")\n\n    text(\"First select based on the evidence (A = 1):\")\n    a1 = np.array([0, 1]) # Evidence [A = 1]\n    P_BA1 = ProbTable(\"B A=1\", einsum(P_BEA.p, a1, \"b e a, a -> b\"))  # P(B | A = 1) @inspect P_BA1 @stepover\n\n    text(\"Compute probability of evidence (A = 1):\")\n    P_A1 = ProbTable(\"A=1\", einsum(P_BA1.p, \"b ->\"))  # P(A = 1) @inspect P_A1 @stepover\n\n    text(\"Divide by probability of evidence to get the conditional distribution:\")\n    P_B_given_A1 = ProbTable(\"B | A=1\", P_BA1.p / P_A1.p)  # P(B | A = 1) @inspect P_B_given_A1 @stepover\n\n    text(\"Note: burglary is much more likely!\")\n\n    text(\"**P(B = 1 | A = 1, E = 1)**: burglary given alarm and earthquake\")\n\n    text(\"Select based on the evidence:\")\n    a1 = np.array([0, 1]) # Evidence [A = 1]\n    e1 = np.array([0, 1]) # Evidence [E = 1]\n    P_BA1E1 = ProbTable(\"B A=1 E=1\", einsum(P_BEA.p, a1, e1, \"b e a, a, e -> b\"))  # P(B, A = 1, E = 1) @inspect P_BA1E1 @stepover\n\n    text(\"Compute probability of evidence (A = 1, E = 1):\")\n    P_A1E1 = ProbTable(\"A=1 E=1\", einsum(P_BA1E1.p, \"b ->\"))  # P(A = 1, E = 1) @inspect P_A1E1 @stepover\n\n    text(\"Divide by probability of evidence to get the conditional distribution:\")\n    P_B_given_A1E1 = ProbTable(\"B | A=1 E=1\", P_BA1E1.p / P_A1E1.p)  # P(B | A = 1, E = 1) @inspect P_B_given_A1E1 @stepover\n\n    text(\"Note: burglary is again unlikely.\")\n    text(\"Intuition: why did the alarm sound?  Earthquake explains away the alarm.\")\n\n    text(\"Key idea: **explaining away**\")\n    image(\"images/alarm-bayes.png\", width=300)\n    text(\"- Suppose you have two causes (B, E) positively influencing an effect (A).\")\n    text(\"- Condition on the effect (A = 1).\")\n    text(\"- Further conditioning on one cause (E = 1) reduces the probability of the other cause (B = 1).\")\n    text(\"- In symbols: P(B = 1 | A = 1, E = 1) < P(B = 1 | A = 1).\")\n    text(\"- Important: even if causes are independent!\")\n\n    text(\"Reminder about notation:\")\n    text(\"- Lowercase names (e): particular values\")\n    text(\"- Uppercase names (E): random variable\")\n    text(\"- Lowercase p(e): local conditional probabilities (by definition)\")\n    text(\"- Uppercase P(E): marginals/conditionals derived from the joint distribution (by laws of probability)\")\n    text(\"- Uppercase P(E = e): probability (number) from a marginal/conditional distribution\")\n\n    text(\"Summary:\")\n    text(\"- Define joint distribution: 4 steps (variables, edges, local conditional probabilities, joint distribution)\")\n    text(\"- Perform probabilistic inference: select based on evidence, compute probability of evidence, then divide\")\n    text(\"- Explaining away: qualitative reasoning pattern that follows from the math\")\n\n\ndef introduce_medical_diagnosis():\n    text(\"\ud83e\ude7a Problem: medical diagnosis\")\n    text(\"- You are coughing and have itchy eyes.\")\n    text(\"- Do you have a cold?\")\n\n    text(\"Let's model this problem using a Bayesian network.\")\n\n    text(\"**Step 1**: Define the random variables\")\n    text(\"- Cold C \u2208 {0, 1}\")\n    text(\"- Allergies A \u2208 {0, 1}\")\n    text(\"- Cough H \u2208 {0, 1}\")\n    text(\"- Itchy eyes I \u2208 {0, 1}\")\n\n    text(\"**Step 2**: Connect the variables with directed edges\")\n    image(\"images/medical-bayes.png\", width=300)\n\n    text(\"**Step 3**: Write down local conditional probabilities for each variable\")\n    p_c = ProbTable(\"C\", [0.9, 0.1]) # p(c) @inspect p_c @stepover\n    p_a = ProbTable(\"A\", [0.8, 0.2]) # p(a) @inspect p_a @stepover\n    p_h_given_ca = ProbTable(\"H | C A\", lambda c, a, h: 0.9 if h == (c or a) else 0.1, shape=(2, 2, 2)) # p(h | c, a) @inspect p_h_given_ca @stepover\n    p_i_given_a = ProbTable(\"I | A\", lambda a, i: 0.9 if i == a else 0.1, shape=(2, 2)) # p(i | a) @inspect p_i_given_a @stepover\n\n    text(\"**Step 4**: Define the joint distribution as the product of the local conditional probabilities\")\n    P_CAHI = ProbTable(\"C A H I\", einsum(p_c.p, p_a.p, p_h_given_ca.p, p_i_given_a.p, \"c, a, c a h, a i -> c a h i\"))  # P(C, A, H, I) @inspect P_CAHI @stepover\n\n    text(\"Now we can answer any question we want.\")  # @clear p_c p_a p_h_given_ca p_i_given_a\n\n    text(\"**P(C = 1 | H = 1)**: cold given cough?\")\n    \n    text(\"Select based on the evidence, marginalizing out non-query/evidence:\")\n    h1 = np.array([0, 1]) # Evidence [H = 1]\n    P_CH1 = ProbTable(\"C H=1\", einsum(P_CAHI.p, h1, \"c a h i, h -> c\"))  # P(C | H = 1) @inspect P_CH1 @clear P_CAHI @stepover\n\n    text(\"Compute probability of evidence (H = 1):\")\n    P_H1 = ProbTable(\"H=1\", einsum(P_CH1.p, \"c ->\"))  # P(H = 1) @inspect P_H1 @stepover\n\n    text(\"Divide by probability of evidence to get the conditional distribution:\")\n    P_C_given_H1 = ProbTable(\"C | H=1\", P_CH1.p / P_H1.p)  # P(C | H = 1) @inspect P_C_given_H1 @stepover\n\n    text(\"**P(C = 1 | H = 1, I = 1)**: cold given cough and itchy eyes?\")  # @clear P_CH1 P_H1 P_C_given_H1 @inspect P_CAHI\n\n    text(\"Select based on the evidence, marginalizing out non-query/evidence:\")\n    h1 = np.array([0, 1]) # Evidence [H = 1]\n    i1 = np.array([0, 1]) # Evidence [I = 1]\n    P_CH1I1 = ProbTable(\"C H=1 I=1\", einsum(P_CAHI.p, h1, i1, \"c a h i, h, i -> c\"))  # P(C, H = 1, I = 1) @inspect P_CH1I1 @clear P_CAHI @stepover\n\n    text(\"Compute probability of evidence (H = 1, I = 1):\")\n    P_H1I1 = ProbTable(\"H=1 I=1\", einsum(P_CH1I1.p, \"c ->\"))  # P(H = 1, I = 1) @inspect P_H1I1 @stepover\n\n    text(\"Divide by probability of evidence to get the conditional distribution:\")\n    P_C_given_H1I1 = ProbTable(\"C | H=1 I=1\", P_CH1I1.p / P_H1I1.p)  # P(C | H = 1, I = 1) @inspect P_C_given_H1I1 @stepover\n\n    text(\"Note: the probability of cold is lower if you add itchy eyes!\")\n    assert P_C_given_H1I1.p[1] < P_C_given_H1.p[1]  # @stepover @clear P_CH1I1 P_H1I1 @inspect P_C_given_H1\n\n    text(\"This is another more subtle example of explaining away!\")\n    image(\"images/medical-bayes.png\", width=200)\n    text(\"- Effect (H) has two causes (C, A).\")\n    text(\"- Itchy eyes (I) is not a cause of the effect (H)...\")\n    text(\"- But observing itchy eyes (I = 1) increases the probability of A, which is a cause!\")\n\n    text(\"Summary:\")\n    text(\"- Same recipe (joint distribution + probabilistic inference)\")\n    text(\"- Explaining away shows up in more complex ways\")\n    text(\"- In general, observing evidence increases/decreases the probability of other nodes, propagating through the network.\")\n\n\ndef introduce_bayesian_networks():\n    text(\"We have seen two examples of Bayesian networks:\")\n    text(\"Alarm\")\n    image(\"images/alarm-bayes.png\", width=100)\n    text(\"Medical diagnosis\")\n    image(\"images/medical-bayes.png\", width=100)\n\n    text(\"Now let's introduce the general case.\")\n    text(\"1. Define a set of random variables X = (X_1, ..., X_n).\")\n    text(\"2. Define any directed acyclic graph (DAG) over the variables.\")\n    text(\"3. For each node X_i, define a local conditional distribution p(x_i | parents(x_i)).\")\n    text(\"4. Define the joint distribution: P(X_1, ..., X_n) = \u03a0_i p(x_i | parents(x_i))\")\n\n    text(\"Reminders:\")\n    text(\"- One local conditional distribution per node (not edge!)\")\n    text(\"- Local conditional distribution depends on *all* parents at once\")\n    text(\"- Difference between p and P\")\n\n    text(\"**Probabilistic inference**\")\n    text(\"Given:\")\n    text(\"- Bayesian network P(X_1, ..., X_n)\")\n    text(\"- Evidence E = e where E \u2286 X (e.g., E = (X_3, X_7), e = (0, 1))\")\n    text(\"- Query Q \u2286 X (e.g., Q = (X_2, X_4)\")\n    text(\"Output:\")\n    text(\"- P(Q | E = e)\")\n\n\ndef language_models():\n    text(\"Lots of things are secretely Bayesian networks.\")\n    text(\"For example, autoregressive language models.\")\n\n    text(\"1. Random variables: tokens X_1, ..., X_T\")\n    text(\"2. Edges from all previous tokens to current token (X_1, ... X_{t-1} to X_t)\")\n    text(\"3. Local conditional distribution (Transformer): p(x_t | x_1, ..., x_{t-1})\")\n    text(\"4. Joint distribution: P(X_1, ..., X_T) = \u03a0_t p(x_t | x_1, ..., x_{t-1})\")\n\n    text(\"Typically, you just sample forward using a language model (prompt \u2192 response)\")\n    text(\"X_1, X_2, X_3 \u2192 X_4, X_5, X_6\")\n\n    text(\"What would doing probabilistic inference mean?\")\n    text(\"X_4, X_5, X_6 \u2192 X_1, X_2, X_3\")\n    text(\"Application: jailbreaking language models \"), link(\"https://arxiv.org/abs/2502.01236\")\n    text(\"Given a particular response (e.g., \\\"Sure, here's how you make a bomb\\\")\")\n    text(\"...find prompts that likely generated it.\")\n    \n\ndef Bernoulli(prob: float) -> int:\n    \"\"\"Return 1 with probability `prob` and 0 with probability `1 - prob`.\"\"\"\n    return np.random.choice([0, 1], p=[1 - prob, prob])\n\n\ndef introduce_rejection_sampling():\n    text(\"So far: we have defined Bayesian networks via writing down local conditional distributions.\")\n    text(\"Now: we will define them via **probabilistic programs**.\")\n    set_random_seed(3)\n\n    text(\"Let's revisit our old alarm example.\")\n    sample = alarm()  # @inspect sample\n    sample = alarm()  # @inspect sample @stepover\n    sample = alarm()  # @inspect sample @stepover\n    sample = alarm()  # @inspect sample @stepover\n    sample = alarm()  # @inspect sample @stepover\n    sample = alarm()  # @inspect sample @stepover\n    sample = alarm()  # @inspect sample @stepover\n    sample = alarm()  # @inspect sample @stepover\n    sample = alarm()  # @inspect sample @stepover\n    sample = alarm()  # @inspect sample @stepover\n\n    text(\"Now let's do probabilistic inference.\")\n    text(\"Example: P(B | A = 1)\")\n\n    text(\"Writing down a distribution in a program\")\n    text(\"...gives us a natural way to approximately do probabilistic inference\")\n    text(\"...**rejection sampling**!\")\n\n    text(\"Key idea:\")\n    text(\"- Draw a ton of samples\")\n    text(\"- Select the samples that match the evidence\")\n    text(\"- Record the query\")\n\n    text(\"Note: we generalize evidence (e.g., A = 1) and query (B) to \")\n    query = lambda sample: sample[\"B\"]\n    evidence = lambda sample: sample[\"A\"] == 1\n    result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result\n    result = rejection_sampling(alarm, query, evidence, num_samples=1000)  # @inspect result @stepover\n\n    text(\"Downside: if evidence is rare, this is very inefficient\")\n    text(\"But as number of samples increases to infinity, this converges to the true probability!\")\n\n    text(\"**Medical diagnosis**\")\n    text(\"Example: cold given cough? P(C | H = 1)\")\n    sample = medical_diagnosis()  # @inspect sample\n    query = lambda sample: sample[\"C\"]\n    evidence = lambda sample: sample[\"H\"] == 1\n    result = rejection_sampling(medical_diagnosis, query, evidence, num_samples=200)  # @inspect result @stepover\n\n    text(\"**Hidden Markov models for object tracking**\")\n    image(\"images/hmm.png\", width=400)\n    text(\"Example: where is object at time 3 given sensor reading at time 5? P(H_3 | E_5 = 2)\")\n    sample = hidden_markov_model()\n    query = lambda sample: sample[\"H\"][2]\n    evidence = lambda sample: sample[\"E\"][4] == 2\n    result = rejection_sampling(hidden_markov_model, query, evidence, num_samples=200)  # @inspect result @stepover\n\n    text(\"Summary:\")\n    text(\"- Probabilistic programming: programs as representations of joint distributions\")\n    text(\"- Rejection sampling: approximate inference by drawing samples (very flexible and very slow)\")\n\n\ndef alarm():\n    B = Bernoulli(0.05)  # Burglary @stepover @inspect B\n    E = Bernoulli(0.05)  # Earthquake @stepover @inspect E\n    A = B or E           # Alarm @inspect A\n    return {\"B\": B, \"E\": E, \"A\": A}\n\n\ndef medical_diagnosis():\n    C = Bernoulli(0.1)                      # Cold @stepover @inspect C\n    A = Bernoulli(0.2)                      # Allergies @stepover @inspect A\n    H = Bernoulli(0.9 if C or A else 0.1)   # Cough @stepover @inspect H\n    I = Bernoulli(0.9 if A else 0.1)        # Itchy eyes @stepover @inspect I\n    return {\"C\": C, \"A\": A, \"H\": H, \"I\": I}\n\n\ndef hidden_markov_model():\n    \"\"\"\n    This is a simple hidden Markov model.\n    The hidden variables are the positions of the objects (H_1, ..., H_T).\n    The observed variables are the sensor readings (O_1, ..., O_T).\n    \"\"\"\n    num_steps = 5\n    H = [None] * num_steps  # Positions @inspect H\n    E = [None] * num_steps  # Sensor readings @inspect E\n\n    for t in range(num_steps):\n        H[t] = (H[t - 1] if t > 0 else 0) + Bernoulli(0.5)  # @stepover\n        E[t] = H[t] + Bernoulli(0.5)  # @stepover\n\n    return {\"H\": H, \"E\": E}\n\n\ndef rejection_sampling(program: Callable, query: Callable, evidence: Callable, num_samples: int) -> float:\n    \"\"\"Perform rejection sampling given:\n    - program: defines the Bayesian network, returns a sample\n    - query: sample -> value of interest\n    - evidence: sample -> whether to keep the sample\n    - num_samples: number of samples to draw\n    \"\"\"\n    counts = defaultdict(int)  # Record how many of each query value we got  @inspect counts\n\n    for _ in range(num_samples):\n        sample = program()  # @inspect sample @stepover\n        if evidence(sample):  # @stepover\n            counts[query(sample)] += 1  # @stepover @inspect counts\n    \n    # Normalize counts to obtain probabilities\n    total_count = sum(counts.values())  # @inspect total_count\n    probs = {q: counts[q] / total_count for q in counts}  # @inspect probs\n\n    return probs\n\n\ndef discussion():\n    text(\"If you're used to thinking about classifiers, using Bayesian networks requires a shift in mindset.\")\n    image(\"images/medical-bayes.png\", width=200)\n    text(\"Example: predict cold given cough?\")\n    text(\"- Traditional machine learning: input \u2192 output\")\n    text(\"- Bayesian networks: output, hidden \u2192 input\")\n\n    text(\"Advantages of Bayesian networks:\")\n    text(\"- Handle **heterogenously** missing information, both at training and test time\")\n    text(\"- Incorporate **prior knowledge** (e.g., Mendelian inheritance, laws of physics)\")\n    text(\"- Can **interpret** all the intermediate variables\")\n    text(\"- Precursor to **causal** models (can do interventions and counterfactuals)\")\n\n\nif __name__ == \"__main__\":\n    main()"
  },
  "hidden_line_numbers": {
    "bayes.py": []
  },
  "steps": [
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 9,
          "function_name": "main",
          "code": "def main():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 10,
          "function_name": "main",
          "code": "text(\"### Lecture 12: Bayesian networks\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### Lecture 12: Bayesian networks",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 11,
          "function_name": "main",
          "code": "link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=bayesian-networks%2Fdefinitions.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[Autumn 2023 lecture]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://stanford-cs221.github.io/autumn2023/modules/module.html#include=bayesian-networks%2Fdefinitions.js&mode=print6pp",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 34,
          "function_name": "model_based_motivation",
          "code": "def model_based_motivation():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 35,
          "function_name": "model_based_motivation",
          "code": "text(\"Recall the ingredients of intelligence:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall the ingredients of intelligence:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 36,
          "function_name": "model_based_motivation",
          "code": "image(\"images/perceive-reason-act-learn.png\", width=600)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/perceive-reason-act-learn.png",
          "style": {
            "width": 600
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 38,
          "function_name": "model_based_motivation",
          "code": "text(\"Where we started:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Where we started:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 39,
          "function_name": "model_based_motivation",
          "code": "text(\"- Machine learning: percepts \u2192 actions (predictor)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Machine learning: percepts \u2192 actions (predictor)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 41,
          "function_name": "model_based_motivation",
          "code": "text(\"Last few weeks: state-based models for reasoning\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Last few weeks: state-based models for reasoning",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 42,
          "function_name": "model_based_motivation",
          "code": "text(\"- Search problems: actions have deterministic outcomes\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Search problems: actions have deterministic outcomes",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 43,
          "function_name": "model_based_motivation",
          "code": "text(\"- MDPs: actions have stochastic outcomes\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- MDPs: actions have stochastic outcomes",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 44,
          "function_name": "model_based_motivation",
          "code": "text(\"- Games: exists adversary (or unknown opponent strategy)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Games: exists adversary (or unknown opponent strategy)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 46,
          "function_name": "model_based_motivation",
          "code": "text(\"Model-free methods\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Model-free methods",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 47,
          "function_name": "model_based_motivation",
          "code": "text(\"- We just know what actions to take and how much utility it will produce\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- We just know what actions to take and how much utility it will produce",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 48,
          "function_name": "model_based_motivation",
          "code": "text(\"- Examples: classification, regression, SARSA, Q-learning, TD learning\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Examples: classification, regression, SARSA, Q-learning, TD learning",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 50,
          "function_name": "model_based_motivation",
          "code": "text(\"Model-based methods\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Model-based methods",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 51,
          "function_name": "model_based_motivation",
          "code": "text(\"- We understand how the world works\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- We understand how the world works",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 52,
          "function_name": "model_based_motivation",
          "code": "text(\"- Examples: search, value iteration (MDPs), minimax (games)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Examples: search, value iteration (MDPs), minimax (games)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 53,
          "function_name": "model_based_motivation",
          "code": "image(\"images/game-tree.png\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/game-tree.png",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 55,
          "function_name": "model_based_motivation",
          "code": "text(\"Model-free methods are more direct and cheaper\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Model-free methods are more direct and cheaper",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 56,
          "function_name": "model_based_motivation",
          "code": "text(\"...but model-based methods are more flexible\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...but model-based methods are more flexible",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 57,
          "function_name": "model_based_motivation",
          "code": "text(\"(can change the reward function without changing the transitions).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "(can change the reward function without changing the transitions).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        },
        {
          "path": "bayes.py",
          "line_number": 59,
          "function_name": "model_based_motivation",
          "code": "text(\"How should we represent the state of the world?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "How should we represent the state of the world?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 13,
          "function_name": "main",
          "code": "model_based_motivation()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 62,
          "function_name": "review_probability",
          "code": "def review_probability():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 63,
          "function_name": "review_probability",
          "code": "text(\"Represent the state of the world by a set of variables.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Represent the state of the world by a set of variables.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 65,
          "function_name": "review_probability",
          "code": "text(\"**Random variables** (representing attributes of the world):\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Random variables** (representing attributes of the world):",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 66,
          "function_name": "review_probability",
          "code": "text(\"- sunshine S \u2208 {0, 1}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- sunshine S \u2208 {0, 1}",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 67,
          "function_name": "review_probability",
          "code": "text(\"- rain R \u2208 {0, 1}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- rain R \u2208 {0, 1}",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 69,
          "function_name": "review_probability",
          "code": "text(\"Possible states of the world (**assignments** to random variables):\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Possible states of the world (**assignments** to random variables):",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 70,
          "function_name": "review_probability",
          "code": "text(\"- {S = 0, R = 0}: no sunshine and no rain\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- {S = 0, R = 0}: no sunshine and no rain",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 71,
          "function_name": "review_probability",
          "code": "text(\"- {S = 0, R = 1}: no sunshine and rain\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- {S = 0, R = 1}: no sunshine and rain",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 72,
          "function_name": "review_probability",
          "code": "text(\"- {S = 1, R = 0}: sunshine and no rain\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- {S = 1, R = 0}: sunshine and no rain",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 73,
          "function_name": "review_probability",
          "code": "text(\"- {S = 1, R = 1}: sunshine and rain\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- {S = 1, R = 1}: sunshine and rain",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 75,
          "function_name": "review_probability",
          "code": "text(\"**Joint distribution** (probability of each assignment):\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Joint distribution** (probability of each assignment):",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 76,
          "function_name": "review_probability",
          "code": "text(\"- P(S = 0, R = 0) = 0.20\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- P(S = 0, R = 0) = 0.20",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 77,
          "function_name": "review_probability",
          "code": "text(\"- P(S = 0, R = 1) = 0.08\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- P(S = 0, R = 1) = 0.08",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 78,
          "function_name": "review_probability",
          "code": "text(\"- P(S = 1, R = 0) = 0.70\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- P(S = 1, R = 0) = 0.70",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 79,
          "function_name": "review_probability",
          "code": "text(\"- P(S = 1, R = 1) = 0.02\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- P(S = 1, R = 1) = 0.02",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 80,
          "function_name": "review_probability",
          "code": "P_SR = ProbTable(\"S R\", [[0.20, 0.08], [0.70, 0.02]])  # @inspect P_SR @stepover"
        }
      ],
      "env": {
        "P_SR": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "s",
              "r",
              "P(S=s, R=r)"
            ],
            [
              "0",
              "0",
              "0.2"
            ],
            [
              "0",
              "1",
              "0.08"
            ],
            [
              "1",
              "0",
              "0.7"
            ],
            [
              "1",
              "1",
              "0.02"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            5,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 82,
          "function_name": "review_probability",
          "code": "text(\"**Marginalization**:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Marginalization**:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 83,
          "function_name": "review_probability",
          "code": "text(\"- Marginalizing out a variable R means collapsing assignments that only differ in R\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Marginalizing out a variable R means collapsing assignments that only differ in R",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 84,
          "function_name": "review_probability",
          "code": "text(\"- P(S = 0) = P(S = 0, R = 0) + P(S = 0, R = 1) = 0.20 + 0.08 = 0.28\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- P(S = 0) = P(S = 0, R = 0) + P(S = 0, R = 1) = 0.20 + 0.08 = 0.28",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 85,
          "function_name": "review_probability",
          "code": "text(\"- P(S = 1) = P(S = 1, R = 0) + P(S = 1, R = 1) = 0.70 + 0.02 = 0.72\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- P(S = 1) = P(S = 1, R = 0) + P(S = 1, R = 1) = 0.70 + 0.02 = 0.72",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 87,
          "function_name": "review_probability",
          "code": "text(\"Probability tables are just tensors.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Probability tables are just tensors.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 88,
          "function_name": "review_probability",
          "code": "text(\"Thus can use einops to express computations!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Thus can use einops to express computations!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 89,
          "function_name": "review_probability",
          "code": "text(\"Recall einsum: for all s, P(S = s) = \u03a3_r P(S = s, R = r)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall einsum: for all s, P(S = s) = \u03a3_r P(S = s, R = r)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 90,
          "function_name": "review_probability",
          "code": "P_S = ProbTable(\"S\", einsum(P_SR.p, \"s r -> s\"))  # @inspect P_S @stepover"
        }
      ],
      "env": {
        "P_S": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "s",
              "P(S=s)"
            ],
            [
              "0",
              "0.28"
            ],
            [
              "1",
              "0.72"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            3,
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 92,
          "function_name": "review_probability",
          "code": "text(\"**Conditioning**:\")  # @clear p_s p_s_table"
        }
      ],
      "env": {
        "p_s": null,
        "p_s_table": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "**Conditioning**:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 93,
          "function_name": "review_probability",
          "code": "text(\"- Conditioning on R = 1 means selecting only assignments that satisfy the condition:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Conditioning on R = 1 means selecting only assignments that satisfy the condition:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 94,
          "function_name": "review_probability",
          "code": "text(\"- P(S = 0, R = 1) = 0.08\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- P(S = 0, R = 1) = 0.08",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 95,
          "function_name": "review_probability",
          "code": "text(\"- P(S = 1, R = 1) = 0.02\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- P(S = 1, R = 1) = 0.02",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 96,
          "function_name": "review_probability",
          "code": "text(\"- We then compute the probability of the evidence:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- We then compute the probability of the evidence:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 97,
          "function_name": "review_probability",
          "code": "text(\"- P(R = 1) = P(S = 0, R = 1) + P(S = 1, R = 1) = 0.08 + 0.02 = 0.1\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- P(R = 1) = P(S = 0, R = 1) + P(S = 1, R = 1) = 0.08 + 0.02 = 0.1",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 98,
          "function_name": "review_probability",
          "code": "text(\"- Then divide by this probability:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Then divide by this probability:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 99,
          "function_name": "review_probability",
          "code": "text(\"- P(S = 0 | R = 1) = P(S = 0, R = 1) / P(R = 1) = 0.08 / 0.1 = 0.8\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- P(S = 0 | R = 1) = P(S = 0, R = 1) / P(R = 1) = 0.08 / 0.1 = 0.8",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 100,
          "function_name": "review_probability",
          "code": "text(\"- P(S = 1 | R = 1) = P(S = 1, R = 1) / P(R = 1) = 0.02 / 0.1 = 0.2\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- P(S = 1 | R = 1) = P(S = 1, R = 1) / P(R = 1) = 0.02 / 0.1 = 0.2",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 102,
          "function_name": "review_probability",
          "code": "text(\"We can also use einops to compute the conditional distribution,\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We can also use einops to compute the conditional distribution,",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 103,
          "function_name": "review_probability",
          "code": "text(\"...but there are a few steps.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...but there are a few steps.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 104,
          "function_name": "review_probability",
          "code": "R1 = np.array([0, 1])  # Evidence [R = 1]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 105,
          "function_name": "review_probability",
          "code": "P_SR1 = ProbTable(\"S R=1\", einsum(P_SR.p, R1, \"s r, r -> s\"))  # Filter to r = 1 @inspect P_SR1 @stepover"
        }
      ],
      "env": {
        "P_SR1": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "s",
              "P(S=s, R=1)"
            ],
            [
              "0",
              "0.08"
            ],
            [
              "1",
              "0.02"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            3,
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 106,
          "function_name": "review_probability",
          "code": "P_R1 = ProbTable(\"R=1\", einsum(P_SR1.p, \"s ->\"))  # @inspect P_R1 @stepover"
        }
      ],
      "env": {
        "P_R1": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "P(R=1)"
            ],
            [
              "0.1"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            2,
            1
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 107,
          "function_name": "review_probability",
          "code": "P_S_given_R1 = ProbTable(\"S | R=1\", P_SR1.p / P_R1.p)  # @inspect P_S_given_R1 @stepover"
        }
      ],
      "env": {
        "P_S_given_R1": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "s",
              "P(S=s | R=1)"
            ],
            [
              "0",
              "0.7999999999999999"
            ],
            [
              "1",
              "0.19999999999999998"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            3,
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 109,
          "function_name": "review_probability",
          "code": "text(\"Summary:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 110,
          "function_name": "review_probability",
          "code": "text(\"- Joint distribution: source of truth\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Joint distribution: source of truth",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 111,
          "function_name": "review_probability",
          "code": "text(\"- Marginalization: collapse assignments that differ only in marginalized variables\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Marginalization: collapse assignments that differ only in marginalized variables",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 112,
          "function_name": "review_probability",
          "code": "text(\"- Conditioning: select via evidence, compute probability of evidence, then divide\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Conditioning: select via evidence, compute probability of evidence, then divide",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        },
        {
          "path": "bayes.py",
          "line_number": 113,
          "function_name": "review_probability",
          "code": "text(\"- Probability tables are tensors, so we can use einops to express computations!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Probability tables are tensors, so we can use einops to express computations!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 14,
          "function_name": "main",
          "code": "review_probability()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        },
        {
          "path": "bayes.py",
          "line_number": 116,
          "function_name": "introduce_probabilistic_inference",
          "code": "def introduce_probabilistic_inference():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        },
        {
          "path": "bayes.py",
          "line_number": 117,
          "function_name": "introduce_probabilistic_inference",
          "code": "text(\"Random variables:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Random variables:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        },
        {
          "path": "bayes.py",
          "line_number": 118,
          "function_name": "introduce_probabilistic_inference",
          "code": "text(\"- S \u2208 {0, 1} (sunshine)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- S \u2208 {0, 1} (sunshine)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        },
        {
          "path": "bayes.py",
          "line_number": 119,
          "function_name": "introduce_probabilistic_inference",
          "code": "text(\"- R \u2208 {0, 1} (rain)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- R \u2208 {0, 1} (rain)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        },
        {
          "path": "bayes.py",
          "line_number": 120,
          "function_name": "introduce_probabilistic_inference",
          "code": "text(\"- T \u2208 {0, 1} (traffic)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- T \u2208 {0, 1} (traffic)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        },
        {
          "path": "bayes.py",
          "line_number": 121,
          "function_name": "introduce_probabilistic_inference",
          "code": "text(\"- A \u2208 {0, 1} (autumn)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- A \u2208 {0, 1} (autumn)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        },
        {
          "path": "bayes.py",
          "line_number": 123,
          "function_name": "introduce_probabilistic_inference",
          "code": "text(\"Joint distribution (source of truth):\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Joint distribution (source of truth):",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        },
        {
          "path": "bayes.py",
          "line_number": 124,
          "function_name": "introduce_probabilistic_inference",
          "code": "text(\"- P(S, R, T, A)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- P(S, R, T, A)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        },
        {
          "path": "bayes.py",
          "line_number": 126,
          "function_name": "introduce_probabilistic_inference",
          "code": "text(\"What is the probability of rain given that there's traffic and its autumn?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "What is the probability of rain given that there's traffic and its autumn?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        },
        {
          "path": "bayes.py",
          "line_number": 128,
          "function_name": "introduce_probabilistic_inference",
          "code": "text(\"**Probabilistic inference**: answer questions on the joint distribution\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Probabilistic inference**: answer questions on the joint distribution",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        },
        {
          "path": "bayes.py",
          "line_number": 129,
          "function_name": "introduce_probabilistic_inference",
          "code": "text(\"Analogy: executing SQL queries on a database\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Analogy: executing SQL queries on a database",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        },
        {
          "path": "bayes.py",
          "line_number": 131,
          "function_name": "introduce_probabilistic_inference",
          "code": "text(\"A question includes:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "A question includes:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        },
        {
          "path": "bayes.py",
          "line_number": 132,
          "function_name": "introduce_probabilistic_inference",
          "code": "text(\"- **Condition** on evidence: [T = 1, A = 1] (traffic and autumn)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- **Condition** on evidence: [T = 1, A = 1] (traffic and autumn)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        },
        {
          "path": "bayes.py",
          "line_number": 133,
          "function_name": "introduce_probabilistic_inference",
          "code": "text(\"- Interested in **query**: R (rain?)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Interested in **query**: R (rain?)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        },
        {
          "path": "bayes.py",
          "line_number": 135,
          "function_name": "introduce_probabilistic_inference",
          "code": "text(\"In probability notation:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In probability notation:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        },
        {
          "path": "bayes.py",
          "line_number": 136,
          "function_name": "introduce_probabilistic_inference",
          "code": "text(\"- P(R | T = 1, A = 1)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- P(R | T = 1, A = 1)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        },
        {
          "path": "bayes.py",
          "line_number": 138,
          "function_name": "introduce_probabilistic_inference",
          "code": "text(\"Note: all variables not in evidence/query are marginalized out (S)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note: all variables not in evidence/query are marginalized out (S)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 15,
          "function_name": "main",
          "code": "introduce_probabilistic_inference()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 230,
          "function_name": "introduce_alarm",
          "code": "def introduce_alarm():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 231,
          "function_name": "introduce_alarm",
          "code": "text(\"\ud83d\udea8 Problem: earthquakes, burglaries, and alarms\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "\ud83d\udea8 Problem: earthquakes, burglaries, and alarms",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 232,
          "function_name": "introduce_alarm",
          "code": "text(\"- Earthquakes and burglaries are independent events (probability \u03b5 = 0.05)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Earthquakes and burglaries are independent events (probability \u03b5 = 0.05)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 233,
          "function_name": "introduce_alarm",
          "code": "text(\"- Either will cause an alarm to go off.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Either will cause an alarm to go off.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 234,
          "function_name": "introduce_alarm",
          "code": "text(\"- Suppose you get an alarm.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Suppose you get an alarm.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 235,
          "function_name": "introduce_alarm",
          "code": "text(\"- How does hearing that there's an earthquake change the probability of a burglary?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- How does hearing that there's an earthquake change the probability of a burglary?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 237,
          "function_name": "introduce_alarm",
          "code": "text(\"Joint distribution: P(E, B, A)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Joint distribution: P(E, B, A)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 238,
          "function_name": "introduce_alarm",
          "code": "text(\"Which is larger?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Which is larger?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 239,
          "function_name": "introduce_alarm",
          "code": "text(\"- P(B = 1 | A = 1): burglary given alarm only\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- P(B = 1 | A = 1): burglary given alarm only",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 240,
          "function_name": "introduce_alarm",
          "code": "text(\"- P(B = 1 | A = 1, E = 1): burglary given alarm and earthquake\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- P(B = 1 | A = 1, E = 1): burglary given alarm and earthquake",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 242,
          "function_name": "introduce_alarm",
          "code": "text(\"To solve this problem, let's use Bayesian networks.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "To solve this problem, let's use Bayesian networks.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 243,
          "function_name": "introduce_alarm",
          "code": "text(\"We need to do two things:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We need to do two things:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 244,
          "function_name": "introduce_alarm",
          "code": "text(\"- Construct a joint distribution\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Construct a joint distribution",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 245,
          "function_name": "introduce_alarm",
          "code": "text(\"- Perform probabilistic inference\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Perform probabilistic inference",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 247,
          "function_name": "introduce_alarm",
          "code": "text(\"### Constructing the joint distribution\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### Constructing the joint distribution",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 248,
          "function_name": "introduce_alarm",
          "code": "text(\"Let's start by constructing the joint distribution.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's start by constructing the joint distribution.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 249,
          "function_name": "introduce_alarm",
          "code": "text(\"We could write down a huge table directly,\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We could write down a huge table directly,",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 250,
          "function_name": "introduce_alarm",
          "code": "text(\"...but let's do it in a more intuitive way.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...but let's do it in a more intuitive way.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 252,
          "function_name": "introduce_alarm",
          "code": "text(\"There are 4 steps:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "There are 4 steps:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 253,
          "function_name": "introduce_alarm",
          "code": "text(\"1. Define the variables (B, E, A)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "1. Define the variables (B, E, A)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 254,
          "function_name": "introduce_alarm",
          "code": "text(\"2. Connect the variables with directed edges (B \u2192 A, E \u2192 A)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "2. Connect the variables with directed edges (B \u2192 A, E \u2192 A)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 255,
          "function_name": "introduce_alarm",
          "code": "text(\"3. Write down local conditional probabilities for each variable (e.g., p(e | b, a))\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "3. Write down local conditional probabilities for each variable (e.g., p(e | b, a))",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 256,
          "function_name": "introduce_alarm",
          "code": "text(\"4. Define the joint distribution as the product of the local conditional probabilities\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "4. Define the joint distribution as the product of the local conditional probabilities",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 258,
          "function_name": "introduce_alarm",
          "code": "text(\"**Step 1**: Define the variables (B, E, A)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Step 1**: Define the variables (B, E, A)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 260,
          "function_name": "introduce_alarm",
          "code": "text(\"**Step 2**: Connect the variables with directed edges suggesting direct influence (B \u2192 A, E \u2192 A)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Step 2**: Connect the variables with directed edges suggesting direct influence (B \u2192 A, E \u2192 A)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 261,
          "function_name": "introduce_alarm",
          "code": "image(\"images/alarm-bayes.png\", width=300)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/alarm-bayes.png",
          "style": {
            "width": 300
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 263,
          "function_name": "introduce_alarm",
          "code": "text(\"**Step 3**: Write down local conditional probabilities for each variable (e.g., p(e | b, a))\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Step 3**: Write down local conditional probabilities for each variable (e.g., p(e | b, a))",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 264,
          "function_name": "introduce_alarm",
          "code": "epsilon = 0.05  # Probability of rare event"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 265,
          "function_name": "introduce_alarm",
          "code": "p_b = ProbTable(\"B\", [1 - epsilon, epsilon]) # p(b) @inspect p_b @stepover"
        }
      ],
      "env": {
        "p_b": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "b",
              "P(B=b)"
            ],
            [
              "0",
              "0.95"
            ],
            [
              "1",
              "0.05"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            3,
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 266,
          "function_name": "introduce_alarm",
          "code": "p_e = ProbTable(\"E\", [1 - epsilon, epsilon]) # p(e) @inspect p_e @stepover"
        }
      ],
      "env": {
        "p_e": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "e",
              "P(E=e)"
            ],
            [
              "0",
              "0.95"
            ],
            [
              "1",
              "0.05"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            3,
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 267,
          "function_name": "introduce_alarm",
          "code": "p_a_given_be = ProbTable(\"A | B E\", lambda b, e, a: a == (b or e), shape=(2, 2, 2))  # p(a | b, e) @inspect p_a_given_be @stepover"
        }
      ],
      "env": {
        "p_a_given_be": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "b",
              "e",
              "a",
              "P(A=a | B=b, E=e)"
            ],
            [
              "0",
              "0",
              "0",
              "1.0"
            ],
            [
              "0",
              "0",
              "1",
              "0.0"
            ],
            [
              "0",
              "1",
              "0",
              "0.0"
            ],
            [
              "0",
              "1",
              "1",
              "1.0"
            ],
            [
              "1",
              "0",
              "0",
              "0.0"
            ],
            [
              "1",
              "0",
              "1",
              "1.0"
            ],
            [
              "1",
              "1",
              "0",
              "0.0"
            ],
            [
              "1",
              "1",
              "1",
              "1.0"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            9,
            4
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 269,
          "function_name": "introduce_alarm",
          "code": "text(\"**Step 4**: Define the joint distribution as the product of the local conditional probabilities\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Step 4**: Define the joint distribution as the product of the local conditional probabilities",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 271,
          "function_name": "introduce_alarm",
          "code": "text(\"For all b, e, a: P(B = b, E = e, A = a) = p(b) p(e) p(a | b, e)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "For all b, e, a: P(B = b, E = e, A = a) = p(b) p(e) p(a | b, e)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 272,
          "function_name": "introduce_alarm",
          "code": "P_BEA = ProbTable(\"B E A\", einsum(p_b.p, p_e.p, p_a_given_be.p, \"b, e, b e a -> b e a\"))  # P(B, E, A) @inspect P_BEA @stepover"
        }
      ],
      "env": {
        "P_BEA": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "b",
              "e",
              "a",
              "P(B=b, E=e, A=a)"
            ],
            [
              "0",
              "0",
              "0",
              "0.9025"
            ],
            [
              "0",
              "0",
              "1",
              "0.0"
            ],
            [
              "0",
              "1",
              "0",
              "0.0"
            ],
            [
              "0",
              "1",
              "1",
              "0.0475"
            ],
            [
              "1",
              "0",
              "0",
              "0.0"
            ],
            [
              "1",
              "0",
              "1",
              "0.0475"
            ],
            [
              "1",
              "1",
              "0",
              "0.0"
            ],
            [
              "1",
              "1",
              "1",
              "0.0025000000000000005"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            9,
            4
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 274,
          "function_name": "introduce_alarm",
          "code": "text(\"### Probabilistic inference\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### Probabilistic inference",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 275,
          "function_name": "introduce_alarm",
          "code": "text(\"Now given the joint distribution, we can answer any query we want.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now given the joint distribution, we can answer any query we want.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 277,
          "function_name": "introduce_alarm",
          "code": "text(\"**P(B = 1)**: burglary given no information\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**P(B = 1)**: burglary given no information",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 279,
          "function_name": "introduce_alarm",
          "code": "P_B = ProbTable(\"B\", einsum(P_BEA.p, \"b e a -> b\"))  # P(B) @inspect P_B @stepover"
        }
      ],
      "env": {
        "P_B": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "b",
              "P(B=b)"
            ],
            [
              "0",
              "0.95"
            ],
            [
              "1",
              "0.05"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            3,
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 280,
          "function_name": "introduce_alarm",
          "code": "text(\"Note: marginal P(B = b) matches the local conditional p(b) (low chance of burglary).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note: marginal P(B = b) matches the local conditional p(b) (low chance of burglary).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 282,
          "function_name": "introduce_alarm",
          "code": "text(\"**P(B = 1 | A = 1)**: burglary given alarm only\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**P(B = 1 | A = 1)**: burglary given alarm only",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 284,
          "function_name": "introduce_alarm",
          "code": "text(\"First select based on the evidence (A = 1):\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "First select based on the evidence (A = 1):",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 285,
          "function_name": "introduce_alarm",
          "code": "a1 = np.array([0, 1]) # Evidence [A = 1]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 286,
          "function_name": "introduce_alarm",
          "code": "P_BA1 = ProbTable(\"B A=1\", einsum(P_BEA.p, a1, \"b e a, a -> b\"))  # P(B | A = 1) @inspect P_BA1 @stepover"
        }
      ],
      "env": {
        "P_BA1": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "b",
              "P(B=b, A=1)"
            ],
            [
              "0",
              "0.0475"
            ],
            [
              "1",
              "0.05"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            3,
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 288,
          "function_name": "introduce_alarm",
          "code": "text(\"Compute probability of evidence (A = 1):\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Compute probability of evidence (A = 1):",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 289,
          "function_name": "introduce_alarm",
          "code": "P_A1 = ProbTable(\"A=1\", einsum(P_BA1.p, \"b ->\"))  # P(A = 1) @inspect P_A1 @stepover"
        }
      ],
      "env": {
        "P_A1": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "P(A=1)"
            ],
            [
              "0.0975"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            2,
            1
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 291,
          "function_name": "introduce_alarm",
          "code": "text(\"Divide by probability of evidence to get the conditional distribution:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Divide by probability of evidence to get the conditional distribution:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 292,
          "function_name": "introduce_alarm",
          "code": "P_B_given_A1 = ProbTable(\"B | A=1\", P_BA1.p / P_A1.p)  # P(B | A = 1) @inspect P_B_given_A1 @stepover"
        }
      ],
      "env": {
        "P_B_given_A1": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "b",
              "P(B=b | A=1)"
            ],
            [
              "0",
              "0.48717948717948717"
            ],
            [
              "1",
              "0.5128205128205129"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            3,
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 294,
          "function_name": "introduce_alarm",
          "code": "text(\"Note: burglary is much more likely!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note: burglary is much more likely!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 296,
          "function_name": "introduce_alarm",
          "code": "text(\"**P(B = 1 | A = 1, E = 1)**: burglary given alarm and earthquake\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**P(B = 1 | A = 1, E = 1)**: burglary given alarm and earthquake",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 298,
          "function_name": "introduce_alarm",
          "code": "text(\"Select based on the evidence:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Select based on the evidence:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 299,
          "function_name": "introduce_alarm",
          "code": "a1 = np.array([0, 1]) # Evidence [A = 1]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 300,
          "function_name": "introduce_alarm",
          "code": "e1 = np.array([0, 1]) # Evidence [E = 1]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 301,
          "function_name": "introduce_alarm",
          "code": "P_BA1E1 = ProbTable(\"B A=1 E=1\", einsum(P_BEA.p, a1, e1, \"b e a, a, e -> b\"))  # P(B, A = 1, E = 1) @inspect P_BA1E1 @stepover"
        }
      ],
      "env": {
        "P_BA1E1": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "b",
              "P(B=b, A=1, E=1)"
            ],
            [
              "0",
              "0.0475"
            ],
            [
              "1",
              "0.0025000000000000005"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            3,
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 303,
          "function_name": "introduce_alarm",
          "code": "text(\"Compute probability of evidence (A = 1, E = 1):\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Compute probability of evidence (A = 1, E = 1):",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 304,
          "function_name": "introduce_alarm",
          "code": "P_A1E1 = ProbTable(\"A=1 E=1\", einsum(P_BA1E1.p, \"b ->\"))  # P(A = 1, E = 1) @inspect P_A1E1 @stepover"
        }
      ],
      "env": {
        "P_A1E1": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "P(A=1, E=1)"
            ],
            [
              "0.05"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            2,
            1
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 306,
          "function_name": "introduce_alarm",
          "code": "text(\"Divide by probability of evidence to get the conditional distribution:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Divide by probability of evidence to get the conditional distribution:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 307,
          "function_name": "introduce_alarm",
          "code": "P_B_given_A1E1 = ProbTable(\"B | A=1 E=1\", P_BA1E1.p / P_A1E1.p)  # P(B | A = 1, E = 1) @inspect P_B_given_A1E1 @stepover"
        }
      ],
      "env": {
        "P_B_given_A1E1": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "b",
              "P(B=b | A=1, E=1)"
            ],
            [
              "0",
              "0.95"
            ],
            [
              "1",
              "0.05000000000000001"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            3,
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 309,
          "function_name": "introduce_alarm",
          "code": "text(\"Note: burglary is again unlikely.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note: burglary is again unlikely.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 310,
          "function_name": "introduce_alarm",
          "code": "text(\"Intuition: why did the alarm sound?  Earthquake explains away the alarm.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Intuition: why did the alarm sound?  Earthquake explains away the alarm.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 312,
          "function_name": "introduce_alarm",
          "code": "text(\"Key idea: **explaining away**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Key idea: **explaining away**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 313,
          "function_name": "introduce_alarm",
          "code": "image(\"images/alarm-bayes.png\", width=300)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/alarm-bayes.png",
          "style": {
            "width": 300
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 314,
          "function_name": "introduce_alarm",
          "code": "text(\"- Suppose you have two causes (B, E) positively influencing an effect (A).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Suppose you have two causes (B, E) positively influencing an effect (A).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 315,
          "function_name": "introduce_alarm",
          "code": "text(\"- Condition on the effect (A = 1).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Condition on the effect (A = 1).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 316,
          "function_name": "introduce_alarm",
          "code": "text(\"- Further conditioning on one cause (E = 1) reduces the probability of the other cause (B = 1).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Further conditioning on one cause (E = 1) reduces the probability of the other cause (B = 1).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 317,
          "function_name": "introduce_alarm",
          "code": "text(\"- In symbols: P(B = 1 | A = 1, E = 1) < P(B = 1 | A = 1).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- In symbols: P(B = 1 | A = 1, E = 1) < P(B = 1 | A = 1).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 318,
          "function_name": "introduce_alarm",
          "code": "text(\"- Important: even if causes are independent!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Important: even if causes are independent!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 320,
          "function_name": "introduce_alarm",
          "code": "text(\"Reminder about notation:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Reminder about notation:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 321,
          "function_name": "introduce_alarm",
          "code": "text(\"- Lowercase names (e): particular values\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Lowercase names (e): particular values",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 322,
          "function_name": "introduce_alarm",
          "code": "text(\"- Uppercase names (E): random variable\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Uppercase names (E): random variable",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 323,
          "function_name": "introduce_alarm",
          "code": "text(\"- Lowercase p(e): local conditional probabilities (by definition)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Lowercase p(e): local conditional probabilities (by definition)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 324,
          "function_name": "introduce_alarm",
          "code": "text(\"- Uppercase P(E): marginals/conditionals derived from the joint distribution (by laws of probability)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Uppercase P(E): marginals/conditionals derived from the joint distribution (by laws of probability)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 325,
          "function_name": "introduce_alarm",
          "code": "text(\"- Uppercase P(E = e): probability (number) from a marginal/conditional distribution\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Uppercase P(E = e): probability (number) from a marginal/conditional distribution",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 327,
          "function_name": "introduce_alarm",
          "code": "text(\"Summary:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 328,
          "function_name": "introduce_alarm",
          "code": "text(\"- Define joint distribution: 4 steps (variables, edges, local conditional probabilities, joint distribution)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Define joint distribution: 4 steps (variables, edges, local conditional probabilities, joint distribution)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 329,
          "function_name": "introduce_alarm",
          "code": "text(\"- Perform probabilistic inference: select based on evidence, compute probability of evidence, then divide\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Perform probabilistic inference: select based on evidence, compute probability of evidence, then divide",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        },
        {
          "path": "bayes.py",
          "line_number": 330,
          "function_name": "introduce_alarm",
          "code": "text(\"- Explaining away: qualitative reasoning pattern that follows from the math\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Explaining away: qualitative reasoning pattern that follows from the math",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 16,
          "function_name": "main",
          "code": "introduce_alarm()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 333,
          "function_name": "introduce_medical_diagnosis",
          "code": "def introduce_medical_diagnosis():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 334,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"\ud83e\ude7a Problem: medical diagnosis\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "\ud83e\ude7a Problem: medical diagnosis",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 335,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"- You are coughing and have itchy eyes.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- You are coughing and have itchy eyes.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 336,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"- Do you have a cold?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Do you have a cold?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 338,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"Let's model this problem using a Bayesian network.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's model this problem using a Bayesian network.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 340,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"**Step 1**: Define the random variables\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Step 1**: Define the random variables",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 341,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"- Cold C \u2208 {0, 1}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Cold C \u2208 {0, 1}",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 342,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"- Allergies A \u2208 {0, 1}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Allergies A \u2208 {0, 1}",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 343,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"- Cough H \u2208 {0, 1}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Cough H \u2208 {0, 1}",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 344,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"- Itchy eyes I \u2208 {0, 1}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Itchy eyes I \u2208 {0, 1}",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 346,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"**Step 2**: Connect the variables with directed edges\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Step 2**: Connect the variables with directed edges",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 347,
          "function_name": "introduce_medical_diagnosis",
          "code": "image(\"images/medical-bayes.png\", width=300)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/medical-bayes.png",
          "style": {
            "width": 300
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 349,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"**Step 3**: Write down local conditional probabilities for each variable\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Step 3**: Write down local conditional probabilities for each variable",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 350,
          "function_name": "introduce_medical_diagnosis",
          "code": "p_c = ProbTable(\"C\", [0.9, 0.1]) # p(c) @inspect p_c @stepover"
        }
      ],
      "env": {
        "p_c": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "c",
              "P(C=c)"
            ],
            [
              "0",
              "0.9"
            ],
            [
              "1",
              "0.1"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            3,
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 351,
          "function_name": "introduce_medical_diagnosis",
          "code": "p_a = ProbTable(\"A\", [0.8, 0.2]) # p(a) @inspect p_a @stepover"
        }
      ],
      "env": {
        "p_a": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "a",
              "P(A=a)"
            ],
            [
              "0",
              "0.8"
            ],
            [
              "1",
              "0.2"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            3,
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 352,
          "function_name": "introduce_medical_diagnosis",
          "code": "p_h_given_ca = ProbTable(\"H | C A\", lambda c, a, h: 0.9 if h == (c or a) else 0.1, shape=(2, 2, 2)) # p(h | c, a) @inspect p_h_given_ca @stepover"
        }
      ],
      "env": {
        "p_h_given_ca": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "c",
              "a",
              "h",
              "P(H=h | C=c, A=a)"
            ],
            [
              "0",
              "0",
              "0",
              "0.9"
            ],
            [
              "0",
              "0",
              "1",
              "0.1"
            ],
            [
              "0",
              "1",
              "0",
              "0.1"
            ],
            [
              "0",
              "1",
              "1",
              "0.9"
            ],
            [
              "1",
              "0",
              "0",
              "0.1"
            ],
            [
              "1",
              "0",
              "1",
              "0.9"
            ],
            [
              "1",
              "1",
              "0",
              "0.1"
            ],
            [
              "1",
              "1",
              "1",
              "0.9"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            9,
            4
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 353,
          "function_name": "introduce_medical_diagnosis",
          "code": "p_i_given_a = ProbTable(\"I | A\", lambda a, i: 0.9 if i == a else 0.1, shape=(2, 2)) # p(i | a) @inspect p_i_given_a @stepover"
        }
      ],
      "env": {
        "p_i_given_a": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "a",
              "i",
              "P(I=i | A=a)"
            ],
            [
              "0",
              "0",
              "0.9"
            ],
            [
              "0",
              "1",
              "0.1"
            ],
            [
              "1",
              "0",
              "0.1"
            ],
            [
              "1",
              "1",
              "0.9"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            5,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 355,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"**Step 4**: Define the joint distribution as the product of the local conditional probabilities\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Step 4**: Define the joint distribution as the product of the local conditional probabilities",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 356,
          "function_name": "introduce_medical_diagnosis",
          "code": "P_CAHI = ProbTable(\"C A H I\", einsum(p_c.p, p_a.p, p_h_given_ca.p, p_i_given_a.p, \"c, a, c a h, a i -> c a h i\"))  # P(C, A, H, I) @inspect P_CAHI @stepover"
        }
      ],
      "env": {
        "P_CAHI": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "c",
              "a",
              "h",
              "i",
              "P(C=c, A=a, H=h, I=i)"
            ],
            [
              "0",
              "0",
              "0",
              "0",
              "0.5832000000000002"
            ],
            [
              "0",
              "0",
              "0",
              "1",
              "0.06480000000000001"
            ],
            [
              "0",
              "0",
              "1",
              "0",
              "0.06480000000000001"
            ],
            [
              "0",
              "0",
              "1",
              "1",
              "0.0072000000000000015"
            ],
            [
              "0",
              "1",
              "0",
              "0",
              "0.0018000000000000004"
            ],
            [
              "0",
              "1",
              "0",
              "1",
              "0.016200000000000003"
            ],
            [
              "0",
              "1",
              "1",
              "0",
              "0.016200000000000003"
            ],
            [
              "0",
              "1",
              "1",
              "1",
              "0.14580000000000004"
            ],
            [
              "1",
              "0",
              "0",
              "0",
              "0.0072000000000000015"
            ],
            [
              "1",
              "0",
              "0",
              "1",
              "0.0008000000000000003"
            ],
            [
              "1",
              "0",
              "1",
              "0",
              "0.06480000000000002"
            ],
            [
              "1",
              "0",
              "1",
              "1",
              "0.007200000000000002"
            ],
            [
              "1",
              "1",
              "0",
              "0",
              "0.00020000000000000006"
            ],
            [
              "1",
              "1",
              "0",
              "1",
              "0.0018000000000000004"
            ],
            [
              "1",
              "1",
              "1",
              "0",
              "0.0018000000000000006"
            ],
            [
              "1",
              "1",
              "1",
              "1",
              "0.016200000000000006"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            17,
            5
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 358,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"Now we can answer any question we want.\")  # @clear p_c p_a p_h_given_ca p_i_given_a"
        }
      ],
      "env": {
        "p_c": null,
        "p_a": null,
        "p_h_given_ca": null,
        "p_i_given_a": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "Now we can answer any question we want.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 360,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"**P(C = 1 | H = 1)**: cold given cough?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**P(C = 1 | H = 1)**: cold given cough?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 362,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"Select based on the evidence, marginalizing out non-query/evidence:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Select based on the evidence, marginalizing out non-query/evidence:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 363,
          "function_name": "introduce_medical_diagnosis",
          "code": "h1 = np.array([0, 1]) # Evidence [H = 1]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 364,
          "function_name": "introduce_medical_diagnosis",
          "code": "P_CH1 = ProbTable(\"C H=1\", einsum(P_CAHI.p, h1, \"c a h i, h -> c\"))  # P(C | H = 1) @inspect P_CH1 @clear P_CAHI @stepover"
        }
      ],
      "env": {
        "P_CH1": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "c",
              "P(C=c, H=1)"
            ],
            [
              "0",
              "0.23400000000000007"
            ],
            [
              "1",
              "0.09000000000000002"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            3,
            2
          ]
        },
        "P_CAHI": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 366,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"Compute probability of evidence (H = 1):\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Compute probability of evidence (H = 1):",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 367,
          "function_name": "introduce_medical_diagnosis",
          "code": "P_H1 = ProbTable(\"H=1\", einsum(P_CH1.p, \"c ->\"))  # P(H = 1) @inspect P_H1 @stepover"
        }
      ],
      "env": {
        "P_H1": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "P(H=1)"
            ],
            [
              "0.32400000000000007"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            2,
            1
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 369,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"Divide by probability of evidence to get the conditional distribution:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Divide by probability of evidence to get the conditional distribution:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 370,
          "function_name": "introduce_medical_diagnosis",
          "code": "P_C_given_H1 = ProbTable(\"C | H=1\", P_CH1.p / P_H1.p)  # P(C | H = 1) @inspect P_C_given_H1 @stepover"
        }
      ],
      "env": {
        "P_C_given_H1": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "c",
              "P(C=c | H=1)"
            ],
            [
              "0",
              "0.7222222222222223"
            ],
            [
              "1",
              "0.2777777777777778"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            3,
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 372,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"**P(C = 1 | H = 1, I = 1)**: cold given cough and itchy eyes?\")  # @clear P_CH1 P_H1 P_C_given_H1 @inspect P_CAHI"
        }
      ],
      "env": {
        "P_CAHI": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "c",
              "a",
              "h",
              "i",
              "P(C=c, A=a, H=h, I=i)"
            ],
            [
              "0",
              "0",
              "0",
              "0",
              "0.5832000000000002"
            ],
            [
              "0",
              "0",
              "0",
              "1",
              "0.06480000000000001"
            ],
            [
              "0",
              "0",
              "1",
              "0",
              "0.06480000000000001"
            ],
            [
              "0",
              "0",
              "1",
              "1",
              "0.0072000000000000015"
            ],
            [
              "0",
              "1",
              "0",
              "0",
              "0.0018000000000000004"
            ],
            [
              "0",
              "1",
              "0",
              "1",
              "0.016200000000000003"
            ],
            [
              "0",
              "1",
              "1",
              "0",
              "0.016200000000000003"
            ],
            [
              "0",
              "1",
              "1",
              "1",
              "0.14580000000000004"
            ],
            [
              "1",
              "0",
              "0",
              "0",
              "0.0072000000000000015"
            ],
            [
              "1",
              "0",
              "0",
              "1",
              "0.0008000000000000003"
            ],
            [
              "1",
              "0",
              "1",
              "0",
              "0.06480000000000002"
            ],
            [
              "1",
              "0",
              "1",
              "1",
              "0.007200000000000002"
            ],
            [
              "1",
              "1",
              "0",
              "0",
              "0.00020000000000000006"
            ],
            [
              "1",
              "1",
              "0",
              "1",
              "0.0018000000000000004"
            ],
            [
              "1",
              "1",
              "1",
              "0",
              "0.0018000000000000006"
            ],
            [
              "1",
              "1",
              "1",
              "1",
              "0.016200000000000006"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            17,
            5
          ]
        },
        "P_CH1": null,
        "P_H1": null,
        "P_C_given_H1": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "**P(C = 1 | H = 1, I = 1)**: cold given cough and itchy eyes?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 374,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"Select based on the evidence, marginalizing out non-query/evidence:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Select based on the evidence, marginalizing out non-query/evidence:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 375,
          "function_name": "introduce_medical_diagnosis",
          "code": "h1 = np.array([0, 1]) # Evidence [H = 1]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 376,
          "function_name": "introduce_medical_diagnosis",
          "code": "i1 = np.array([0, 1]) # Evidence [I = 1]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 377,
          "function_name": "introduce_medical_diagnosis",
          "code": "P_CH1I1 = ProbTable(\"C H=1 I=1\", einsum(P_CAHI.p, h1, i1, \"c a h i, h, i -> c\"))  # P(C, H = 1, I = 1) @inspect P_CH1I1 @clear P_CAHI @stepover"
        }
      ],
      "env": {
        "P_CH1I1": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "c",
              "P(C=c, H=1, I=1)"
            ],
            [
              "0",
              "0.15300000000000005"
            ],
            [
              "1",
              "0.023400000000000008"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            3,
            2
          ]
        },
        "P_CAHI": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 379,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"Compute probability of evidence (H = 1, I = 1):\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Compute probability of evidence (H = 1, I = 1):",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 380,
          "function_name": "introduce_medical_diagnosis",
          "code": "P_H1I1 = ProbTable(\"H=1 I=1\", einsum(P_CH1I1.p, \"c ->\"))  # P(H = 1, I = 1) @inspect P_H1I1 @stepover"
        }
      ],
      "env": {
        "P_H1I1": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "P(H=1, I=1)"
            ],
            [
              "0.17640000000000006"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            2,
            1
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 382,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"Divide by probability of evidence to get the conditional distribution:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Divide by probability of evidence to get the conditional distribution:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 383,
          "function_name": "introduce_medical_diagnosis",
          "code": "P_C_given_H1I1 = ProbTable(\"C | H=1 I=1\", P_CH1I1.p / P_H1I1.p)  # P(C | H = 1, I = 1) @inspect P_C_given_H1I1 @stepover"
        }
      ],
      "env": {
        "P_C_given_H1I1": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "c",
              "P(C=c | H=1, I=1)"
            ],
            [
              "0",
              "0.8673469387755103"
            ],
            [
              "1",
              "0.1326530612244898"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            3,
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 385,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"Note: the probability of cold is lower if you add itchy eyes!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note: the probability of cold is lower if you add itchy eyes!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 386,
          "function_name": "introduce_medical_diagnosis",
          "code": "assert P_C_given_H1I1.p[1] < P_C_given_H1.p[1]  # @stepover @clear P_CH1I1 P_H1I1 @inspect P_C_given_H1"
        }
      ],
      "env": {
        "P_C_given_H1": {
          "type": "numpy.ndarray",
          "contents": [
            [
              "c",
              "P(C=c | H=1)"
            ],
            [
              "0",
              "0.7222222222222223"
            ],
            [
              "1",
              "0.2777777777777778"
            ]
          ],
          "dtype": "<U32",
          "shape": [
            3,
            2
          ]
        },
        "P_CH1I1": null,
        "P_H1I1": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 388,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"This is another more subtle example of explaining away!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This is another more subtle example of explaining away!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 389,
          "function_name": "introduce_medical_diagnosis",
          "code": "image(\"images/medical-bayes.png\", width=200)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/medical-bayes.png",
          "style": {
            "width": 200
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 390,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"- Effect (H) has two causes (C, A).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Effect (H) has two causes (C, A).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 391,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"- Itchy eyes (I) is not a cause of the effect (H)...\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Itchy eyes (I) is not a cause of the effect (H)...",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 392,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"- But observing itchy eyes (I = 1) increases the probability of A, which is a cause!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- But observing itchy eyes (I = 1) increases the probability of A, which is a cause!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 394,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"Summary:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 395,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"- Same recipe (joint distribution + probabilistic inference)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Same recipe (joint distribution + probabilistic inference)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 396,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"- Explaining away shows up in more complex ways\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Explaining away shows up in more complex ways",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        },
        {
          "path": "bayes.py",
          "line_number": 397,
          "function_name": "introduce_medical_diagnosis",
          "code": "text(\"- In general, observing evidence increases/decreases the probability of other nodes, propagating through the network.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- In general, observing evidence increases/decreases the probability of other nodes, propagating through the network.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 17,
          "function_name": "main",
          "code": "introduce_medical_diagnosis()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 400,
          "function_name": "introduce_bayesian_networks",
          "code": "def introduce_bayesian_networks():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 401,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"We have seen two examples of Bayesian networks:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We have seen two examples of Bayesian networks:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 402,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"Alarm\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Alarm",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 403,
          "function_name": "introduce_bayesian_networks",
          "code": "image(\"images/alarm-bayes.png\", width=100)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/alarm-bayes.png",
          "style": {
            "width": 100
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 404,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"Medical diagnosis\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Medical diagnosis",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 405,
          "function_name": "introduce_bayesian_networks",
          "code": "image(\"images/medical-bayes.png\", width=100)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/medical-bayes.png",
          "style": {
            "width": 100
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 407,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"Now let's introduce the general case.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now let's introduce the general case.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 408,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"1. Define a set of random variables X = (X_1, ..., X_n).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "1. Define a set of random variables X = (X_1, ..., X_n).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 409,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"2. Define any directed acyclic graph (DAG) over the variables.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "2. Define any directed acyclic graph (DAG) over the variables.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 410,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"3. For each node X_i, define a local conditional distribution p(x_i | parents(x_i)).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "3. For each node X_i, define a local conditional distribution p(x_i | parents(x_i)).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 411,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"4. Define the joint distribution: P(X_1, ..., X_n) = \u03a0_i p(x_i | parents(x_i))\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "4. Define the joint distribution: P(X_1, ..., X_n) = \u03a0_i p(x_i | parents(x_i))",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 413,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"Reminders:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Reminders:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 414,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"- One local conditional distribution per node (not edge!)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- One local conditional distribution per node (not edge!)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 415,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"- Local conditional distribution depends on *all* parents at once\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Local conditional distribution depends on *all* parents at once",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 416,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"- Difference between p and P\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Difference between p and P",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 418,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"**Probabilistic inference**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Probabilistic inference**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 419,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"Given:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Given:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 420,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"- Bayesian network P(X_1, ..., X_n)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Bayesian network P(X_1, ..., X_n)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 421,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"- Evidence E = e where E \u2286 X (e.g., E = (X_3, X_7), e = (0, 1))\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Evidence E = e where E \u2286 X (e.g., E = (X_3, X_7), e = (0, 1))",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 422,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"- Query Q \u2286 X (e.g., Q = (X_2, X_4)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Query Q \u2286 X (e.g., Q = (X_2, X_4)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 423,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"Output:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Output:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        },
        {
          "path": "bayes.py",
          "line_number": 424,
          "function_name": "introduce_bayesian_networks",
          "code": "text(\"- P(Q | E = e)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- P(Q | E = e)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 18,
          "function_name": "main",
          "code": "introduce_bayesian_networks()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 19,
          "function_name": "main",
          "code": "language_models()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 19,
          "function_name": "main",
          "code": "language_models()"
        },
        {
          "path": "bayes.py",
          "line_number": 427,
          "function_name": "language_models",
          "code": "def language_models():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 19,
          "function_name": "main",
          "code": "language_models()"
        },
        {
          "path": "bayes.py",
          "line_number": 428,
          "function_name": "language_models",
          "code": "text(\"Lots of things are secretely Bayesian networks.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Lots of things are secretely Bayesian networks.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 19,
          "function_name": "main",
          "code": "language_models()"
        },
        {
          "path": "bayes.py",
          "line_number": 429,
          "function_name": "language_models",
          "code": "text(\"For example, autoregressive language models.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "For example, autoregressive language models.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 19,
          "function_name": "main",
          "code": "language_models()"
        },
        {
          "path": "bayes.py",
          "line_number": 431,
          "function_name": "language_models",
          "code": "text(\"1. Random variables: tokens X_1, ..., X_T\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "1. Random variables: tokens X_1, ..., X_T",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 19,
          "function_name": "main",
          "code": "language_models()"
        },
        {
          "path": "bayes.py",
          "line_number": 432,
          "function_name": "language_models",
          "code": "text(\"2. Edges from all previous tokens to current token (X_1, ... X_{t-1} to X_t)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "2. Edges from all previous tokens to current token (X_1, ... X_{t-1} to X_t)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 19,
          "function_name": "main",
          "code": "language_models()"
        },
        {
          "path": "bayes.py",
          "line_number": 433,
          "function_name": "language_models",
          "code": "text(\"3. Local conditional distribution (Transformer): p(x_t | x_1, ..., x_{t-1})\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "3. Local conditional distribution (Transformer): p(x_t | x_1, ..., x_{t-1})",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 19,
          "function_name": "main",
          "code": "language_models()"
        },
        {
          "path": "bayes.py",
          "line_number": 434,
          "function_name": "language_models",
          "code": "text(\"4. Joint distribution: P(X_1, ..., X_T) = \u03a0_t p(x_t | x_1, ..., x_{t-1})\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "4. Joint distribution: P(X_1, ..., X_T) = \u03a0_t p(x_t | x_1, ..., x_{t-1})",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 19,
          "function_name": "main",
          "code": "language_models()"
        },
        {
          "path": "bayes.py",
          "line_number": 436,
          "function_name": "language_models",
          "code": "text(\"Typically, you just sample forward using a language model (prompt \u2192 response)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Typically, you just sample forward using a language model (prompt \u2192 response)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 19,
          "function_name": "main",
          "code": "language_models()"
        },
        {
          "path": "bayes.py",
          "line_number": 437,
          "function_name": "language_models",
          "code": "text(\"X_1, X_2, X_3 \u2192 X_4, X_5, X_6\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "X_1, X_2, X_3 \u2192 X_4, X_5, X_6",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 19,
          "function_name": "main",
          "code": "language_models()"
        },
        {
          "path": "bayes.py",
          "line_number": 439,
          "function_name": "language_models",
          "code": "text(\"What would doing probabilistic inference mean?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "What would doing probabilistic inference mean?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 19,
          "function_name": "main",
          "code": "language_models()"
        },
        {
          "path": "bayes.py",
          "line_number": 440,
          "function_name": "language_models",
          "code": "text(\"X_4, X_5, X_6 \u2192 X_1, X_2, X_3\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "X_4, X_5, X_6 \u2192 X_1, X_2, X_3",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 19,
          "function_name": "main",
          "code": "language_models()"
        },
        {
          "path": "bayes.py",
          "line_number": 441,
          "function_name": "language_models",
          "code": "text(\"Application: jailbreaking language models \"), link(\"https://arxiv.org/abs/2502.01236\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Application: jailbreaking language models ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "Eliciting Language Model Behaviors with Investigator Agents",
            "authors": [
              "Xiang Lisa Li",
              "Neil Chowdhury",
              "Daniel D. Johnson",
              "Tatsunori Hashimoto",
              "Percy Liang",
              "Sarah Schwettmann",
              "Jacob Steinhardt"
            ],
            "organization": null,
            "date": "2025-02-03T10:52:44Z",
            "url": "https://arxiv.org/abs/2502.01236",
            "description": "Language models exhibit complex, diverse behaviors when prompted with free-form text, making it difficult to characterize the space of possible outputs. We study the problem of behavior elicitation, where the goal is to search for prompts that induce specific target behaviors (e.g., hallucinations or harmful responses) from a target language model. To navigate the exponentially large space of possible prompts, we train investigator models to map randomly-chosen target behaviors to a diverse distribution of outputs that elicit them, similar to amortized Bayesian inference. We do this through supervised fine-tuning, reinforcement learning via DPO, and a novel Frank-Wolfe training objective to iteratively discover diverse prompting strategies. Our investigator models surface a variety of effective and human-interpretable prompts leading to jailbreaks, hallucinations, and open-ended aberrant behaviors, obtaining a 100% attack success rate on a subset of AdvBench (Harmful Behaviors) and an 85% hallucination rate.",
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 19,
          "function_name": "main",
          "code": "language_models()"
        },
        {
          "path": "bayes.py",
          "line_number": 442,
          "function_name": "language_models",
          "code": "text(\"Given a particular response (e.g., \\\"Sure, here's how you make a bomb\\\")\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Given a particular response (e.g., \"Sure, here's how you make a bomb\")",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 19,
          "function_name": "main",
          "code": "language_models()"
        },
        {
          "path": "bayes.py",
          "line_number": 443,
          "function_name": "language_models",
          "code": "text(\"...find prompts that likely generated it.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...find prompts that likely generated it.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 19,
          "function_name": "main",
          "code": "language_models()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 451,
          "function_name": "introduce_rejection_sampling",
          "code": "def introduce_rejection_sampling():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 452,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"So far: we have defined Bayesian networks via writing down local conditional distributions.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So far: we have defined Bayesian networks via writing down local conditional distributions.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 453,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"Now: we will define them via **probabilistic programs**.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now: we will define them via **probabilistic programs**.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 454,
          "function_name": "introduce_rejection_sampling",
          "code": "set_random_seed(3)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 456,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"Let's revisit our old alarm example.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's revisit our old alarm example.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 457,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = alarm()  # @inspect sample"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 457,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = alarm()  # @inspect sample"
        },
        {
          "path": "bayes.py",
          "line_number": 509,
          "function_name": "alarm",
          "code": "def alarm():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 457,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = alarm()  # @inspect sample"
        },
        {
          "path": "bayes.py",
          "line_number": 510,
          "function_name": "alarm",
          "code": "B = Bernoulli(0.05)  # Burglary @stepover @inspect B"
        }
      ],
      "env": {
        "B": {
          "type": "numpy.int64",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 457,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = alarm()  # @inspect sample"
        },
        {
          "path": "bayes.py",
          "line_number": 511,
          "function_name": "alarm",
          "code": "E = Bernoulli(0.05)  # Earthquake @stepover @inspect E"
        }
      ],
      "env": {
        "E": {
          "type": "numpy.int64",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 457,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = alarm()  # @inspect sample"
        },
        {
          "path": "bayes.py",
          "line_number": 512,
          "function_name": "alarm",
          "code": "A = B or E           # Alarm @inspect A"
        }
      ],
      "env": {
        "A": {
          "type": "numpy.int64",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 457,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = alarm()  # @inspect sample"
        },
        {
          "path": "bayes.py",
          "line_number": 513,
          "function_name": "alarm",
          "code": "return {\"B\": B, \"E\": E, \"A\": A}"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 457,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = alarm()  # @inspect sample"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 458,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = alarm()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 459,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = alarm()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 460,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = alarm()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 461,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = alarm()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 462,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = alarm()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 463,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = alarm()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 464,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = alarm()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 465,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = alarm()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 466,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = alarm()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 468,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"Now let's do probabilistic inference.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now let's do probabilistic inference.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 469,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"Example: P(B | A = 1)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Example: P(B | A = 1)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 471,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"Writing down a distribution in a program\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Writing down a distribution in a program",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 472,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"...gives us a natural way to approximately do probabilistic inference\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...gives us a natural way to approximately do probabilistic inference",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 473,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"...**rejection sampling**!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...**rejection sampling**!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 475,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"Key idea:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Key idea:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 476,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"- Draw a ton of samples\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Draw a ton of samples",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 477,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"- Select the samples that match the evidence\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Select the samples that match the evidence",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 478,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"- Record the query\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Record the query",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 480,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"Note: we generalize evidence (e.g., A = 1) and query (B) to \")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note: we generalize evidence (e.g., A = 1) and query (B) to ",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 481,
          "function_name": "introduce_rejection_sampling",
          "code": "query = lambda sample: sample[\"B\"]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 482,
          "function_name": "introduce_rejection_sampling",
          "code": "evidence = lambda sample: sample[\"A\"] == 1"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 541,
          "function_name": "rejection_sampling",
          "code": "def rejection_sampling(program: Callable, query: Callable, evidence: Callable, num_samples: int) -> float:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 548,
          "function_name": "rejection_sampling",
          "code": "counts = defaultdict(int)  # Record how many of each query value we got  @inspect counts"
        }
      ],
      "env": {
        "counts": {
          "type": "collections.defaultdict",
          "contents": {},
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 550,
          "function_name": "rejection_sampling",
          "code": "for _ in range(num_samples):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 551,
          "function_name": "rejection_sampling",
          "code": "sample = program()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 552,
          "function_name": "rejection_sampling",
          "code": "if evidence(sample):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 550,
          "function_name": "rejection_sampling",
          "code": "for _ in range(num_samples):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 551,
          "function_name": "rejection_sampling",
          "code": "sample = program()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 552,
          "function_name": "rejection_sampling",
          "code": "if evidence(sample):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 550,
          "function_name": "rejection_sampling",
          "code": "for _ in range(num_samples):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 551,
          "function_name": "rejection_sampling",
          "code": "sample = program()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 552,
          "function_name": "rejection_sampling",
          "code": "if evidence(sample):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 550,
          "function_name": "rejection_sampling",
          "code": "for _ in range(num_samples):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 551,
          "function_name": "rejection_sampling",
          "code": "sample = program()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 552,
          "function_name": "rejection_sampling",
          "code": "if evidence(sample):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 550,
          "function_name": "rejection_sampling",
          "code": "for _ in range(num_samples):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 551,
          "function_name": "rejection_sampling",
          "code": "sample = program()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 552,
          "function_name": "rejection_sampling",
          "code": "if evidence(sample):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 550,
          "function_name": "rejection_sampling",
          "code": "for _ in range(num_samples):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 551,
          "function_name": "rejection_sampling",
          "code": "sample = program()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 552,
          "function_name": "rejection_sampling",
          "code": "if evidence(sample):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 553,
          "function_name": "rejection_sampling",
          "code": "counts[query(sample)] += 1  # @stepover @inspect counts"
        }
      ],
      "env": {
        "counts": {
          "type": "collections.defaultdict",
          "contents": {
            "1": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 550,
          "function_name": "rejection_sampling",
          "code": "for _ in range(num_samples):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 551,
          "function_name": "rejection_sampling",
          "code": "sample = program()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 552,
          "function_name": "rejection_sampling",
          "code": "if evidence(sample):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 550,
          "function_name": "rejection_sampling",
          "code": "for _ in range(num_samples):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 551,
          "function_name": "rejection_sampling",
          "code": "sample = program()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 552,
          "function_name": "rejection_sampling",
          "code": "if evidence(sample):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 550,
          "function_name": "rejection_sampling",
          "code": "for _ in range(num_samples):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 551,
          "function_name": "rejection_sampling",
          "code": "sample = program()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 552,
          "function_name": "rejection_sampling",
          "code": "if evidence(sample):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 550,
          "function_name": "rejection_sampling",
          "code": "for _ in range(num_samples):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 551,
          "function_name": "rejection_sampling",
          "code": "sample = program()  # @inspect sample @stepover"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "B": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "E": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 552,
          "function_name": "rejection_sampling",
          "code": "if evidence(sample):  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 550,
          "function_name": "rejection_sampling",
          "code": "for _ in range(num_samples):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 556,
          "function_name": "rejection_sampling",
          "code": "total_count = sum(counts.values())  # @inspect total_count"
        }
      ],
      "env": {
        "total_count": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 557,
          "function_name": "rejection_sampling",
          "code": "probs = {q: counts[q] / total_count for q in counts}  # @inspect probs"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 557,
          "function_name": "rejection_sampling",
          "code": "probs = {q: counts[q] / total_count for q in counts}  # @inspect probs"
        },
        {
          "path": "bayes.py",
          "line_number": 557,
          "function_name": "<dictcomp>",
          "code": "probs = {q: counts[q] / total_count for q in counts}  # @inspect probs"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 557,
          "function_name": "rejection_sampling",
          "code": "probs = {q: counts[q] / total_count for q in counts}  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "type": "dict",
          "contents": {
            "1": {
              "type": "float",
              "contents": 1.0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        },
        {
          "path": "bayes.py",
          "line_number": 559,
          "function_name": "rejection_sampling",
          "code": "return probs"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 483,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=10)  # @inspect result"
        }
      ],
      "env": {
        "result": {
          "type": "dict",
          "contents": {
            "1": {
              "type": "float",
              "contents": 1.0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 484,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(alarm, query, evidence, num_samples=1000)  # @inspect result @stepover"
        }
      ],
      "env": {
        "result": {
          "type": "dict",
          "contents": {
            "1": {
              "type": "float",
              "contents": 0.5686274509803921,
              "dtype": null,
              "shape": null
            },
            "0": {
              "type": "float",
              "contents": 0.43137254901960786,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 486,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"Downside: if evidence is rare, this is very inefficient\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Downside: if evidence is rare, this is very inefficient",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 487,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"But as number of samples increases to infinity, this converges to the true probability!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "But as number of samples increases to infinity, this converges to the true probability!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 489,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"**Medical diagnosis**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Medical diagnosis**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 490,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"Example: cold given cough? P(C | H = 1)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Example: cold given cough? P(C | H = 1)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 491,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = medical_diagnosis()  # @inspect sample"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 491,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = medical_diagnosis()  # @inspect sample"
        },
        {
          "path": "bayes.py",
          "line_number": 516,
          "function_name": "medical_diagnosis",
          "code": "def medical_diagnosis():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 491,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = medical_diagnosis()  # @inspect sample"
        },
        {
          "path": "bayes.py",
          "line_number": 517,
          "function_name": "medical_diagnosis",
          "code": "C = Bernoulli(0.1)                      # Cold @stepover @inspect C"
        }
      ],
      "env": {
        "C": {
          "type": "numpy.int64",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 491,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = medical_diagnosis()  # @inspect sample"
        },
        {
          "path": "bayes.py",
          "line_number": 518,
          "function_name": "medical_diagnosis",
          "code": "A = Bernoulli(0.2)                      # Allergies @stepover @inspect A"
        }
      ],
      "env": {
        "A": {
          "type": "numpy.int64",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 491,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = medical_diagnosis()  # @inspect sample"
        },
        {
          "path": "bayes.py",
          "line_number": 519,
          "function_name": "medical_diagnosis",
          "code": "H = Bernoulli(0.9 if C or A else 0.1)   # Cough @stepover @inspect H"
        }
      ],
      "env": {
        "H": {
          "type": "numpy.int64",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 491,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = medical_diagnosis()  # @inspect sample"
        },
        {
          "path": "bayes.py",
          "line_number": 520,
          "function_name": "medical_diagnosis",
          "code": "I = Bernoulli(0.9 if A else 0.1)        # Itchy eyes @stepover @inspect I"
        }
      ],
      "env": {
        "I": {
          "type": "numpy.int64",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 491,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = medical_diagnosis()  # @inspect sample"
        },
        {
          "path": "bayes.py",
          "line_number": 521,
          "function_name": "medical_diagnosis",
          "code": "return {\"C\": C, \"A\": A, \"H\": H, \"I\": I}"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 491,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = medical_diagnosis()  # @inspect sample"
        }
      ],
      "env": {
        "sample": {
          "type": "dict",
          "contents": {
            "C": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "A": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "H": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            "I": {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 492,
          "function_name": "introduce_rejection_sampling",
          "code": "query = lambda sample: sample[\"C\"]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 493,
          "function_name": "introduce_rejection_sampling",
          "code": "evidence = lambda sample: sample[\"H\"] == 1"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 494,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(medical_diagnosis, query, evidence, num_samples=200)  # @inspect result @stepover"
        }
      ],
      "env": {
        "result": {
          "type": "dict",
          "contents": {
            "0": {
              "type": "float",
              "contents": 0.7313432835820896,
              "dtype": null,
              "shape": null
            },
            "1": {
              "type": "float",
              "contents": 0.26865671641791045,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 496,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"**Hidden Markov models for object tracking**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Hidden Markov models for object tracking**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 497,
          "function_name": "introduce_rejection_sampling",
          "code": "image(\"images/hmm.png\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/hmm.png",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 498,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"Example: where is object at time 3 given sensor reading at time 5? P(H_3 | E_5 = 2)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Example: where is object at time 3 given sensor reading at time 5? P(H_3 | E_5 = 2)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 524,
          "function_name": "hidden_markov_model",
          "code": "def hidden_markov_model():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 530,
          "function_name": "hidden_markov_model",
          "code": "num_steps = 5"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 531,
          "function_name": "hidden_markov_model",
          "code": "H = [None] * num_steps  # Positions @inspect H"
        }
      ],
      "env": {
        "H": {
          "type": "list",
          "contents": [
            {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            },
            {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            },
            {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            },
            {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            },
            {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 532,
          "function_name": "hidden_markov_model",
          "code": "E = [None] * num_steps  # Sensor readings @inspect E"
        }
      ],
      "env": {
        "E": {
          "type": "list",
          "contents": [
            {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            },
            {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            },
            {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            },
            {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            },
            {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 534,
          "function_name": "hidden_markov_model",
          "code": "for t in range(num_steps):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 535,
          "function_name": "hidden_markov_model",
          "code": "H[t] = (H[t - 1] if t > 0 else 0) + Bernoulli(0.5)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 536,
          "function_name": "hidden_markov_model",
          "code": "E[t] = H[t] + Bernoulli(0.5)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 534,
          "function_name": "hidden_markov_model",
          "code": "for t in range(num_steps):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 535,
          "function_name": "hidden_markov_model",
          "code": "H[t] = (H[t - 1] if t > 0 else 0) + Bernoulli(0.5)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 536,
          "function_name": "hidden_markov_model",
          "code": "E[t] = H[t] + Bernoulli(0.5)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 534,
          "function_name": "hidden_markov_model",
          "code": "for t in range(num_steps):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 535,
          "function_name": "hidden_markov_model",
          "code": "H[t] = (H[t - 1] if t > 0 else 0) + Bernoulli(0.5)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 536,
          "function_name": "hidden_markov_model",
          "code": "E[t] = H[t] + Bernoulli(0.5)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 534,
          "function_name": "hidden_markov_model",
          "code": "for t in range(num_steps):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 535,
          "function_name": "hidden_markov_model",
          "code": "H[t] = (H[t - 1] if t > 0 else 0) + Bernoulli(0.5)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 536,
          "function_name": "hidden_markov_model",
          "code": "E[t] = H[t] + Bernoulli(0.5)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 534,
          "function_name": "hidden_markov_model",
          "code": "for t in range(num_steps):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 535,
          "function_name": "hidden_markov_model",
          "code": "H[t] = (H[t - 1] if t > 0 else 0) + Bernoulli(0.5)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 536,
          "function_name": "hidden_markov_model",
          "code": "E[t] = H[t] + Bernoulli(0.5)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 534,
          "function_name": "hidden_markov_model",
          "code": "for t in range(num_steps):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        },
        {
          "path": "bayes.py",
          "line_number": 538,
          "function_name": "hidden_markov_model",
          "code": "return {\"H\": H, \"E\": E}"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 499,
          "function_name": "introduce_rejection_sampling",
          "code": "sample = hidden_markov_model()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 500,
          "function_name": "introduce_rejection_sampling",
          "code": "query = lambda sample: sample[\"H\"][2]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 501,
          "function_name": "introduce_rejection_sampling",
          "code": "evidence = lambda sample: sample[\"E\"][4] == 2"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 502,
          "function_name": "introduce_rejection_sampling",
          "code": "result = rejection_sampling(hidden_markov_model, query, evidence, num_samples=200)  # @inspect result @stepover"
        }
      ],
      "env": {
        "result": {
          "type": "dict",
          "contents": {
            "1": {
              "type": "float",
              "contents": 0.6981132075471698,
              "dtype": null,
              "shape": null
            },
            "2": {
              "type": "float",
              "contents": 0.07547169811320754,
              "dtype": null,
              "shape": null
            },
            "0": {
              "type": "float",
              "contents": 0.22641509433962265,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 504,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"Summary:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 505,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"- Probabilistic programming: programs as representations of joint distributions\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Probabilistic programming: programs as representations of joint distributions",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        },
        {
          "path": "bayes.py",
          "line_number": 506,
          "function_name": "introduce_rejection_sampling",
          "code": "text(\"- Rejection sampling: approximate inference by drawing samples (very flexible and very slow)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Rejection sampling: approximate inference by drawing samples (very flexible and very slow)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 20,
          "function_name": "main",
          "code": "introduce_rejection_sampling()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 21,
          "function_name": "main",
          "code": "discussion()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 21,
          "function_name": "main",
          "code": "discussion()"
        },
        {
          "path": "bayes.py",
          "line_number": 562,
          "function_name": "discussion",
          "code": "def discussion():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 21,
          "function_name": "main",
          "code": "discussion()"
        },
        {
          "path": "bayes.py",
          "line_number": 563,
          "function_name": "discussion",
          "code": "text(\"If you're used to thinking about classifiers, using Bayesian networks requires a shift in mindset.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "If you're used to thinking about classifiers, using Bayesian networks requires a shift in mindset.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 21,
          "function_name": "main",
          "code": "discussion()"
        },
        {
          "path": "bayes.py",
          "line_number": 564,
          "function_name": "discussion",
          "code": "image(\"images/medical-bayes.png\", width=200)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/medical-bayes.png",
          "style": {
            "width": 200
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 21,
          "function_name": "main",
          "code": "discussion()"
        },
        {
          "path": "bayes.py",
          "line_number": 565,
          "function_name": "discussion",
          "code": "text(\"Example: predict cold given cough?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Example: predict cold given cough?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 21,
          "function_name": "main",
          "code": "discussion()"
        },
        {
          "path": "bayes.py",
          "line_number": 566,
          "function_name": "discussion",
          "code": "text(\"- Traditional machine learning: input \u2192 output\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Traditional machine learning: input \u2192 output",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 21,
          "function_name": "main",
          "code": "discussion()"
        },
        {
          "path": "bayes.py",
          "line_number": 567,
          "function_name": "discussion",
          "code": "text(\"- Bayesian networks: output, hidden \u2192 input\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Bayesian networks: output, hidden \u2192 input",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 21,
          "function_name": "main",
          "code": "discussion()"
        },
        {
          "path": "bayes.py",
          "line_number": 569,
          "function_name": "discussion",
          "code": "text(\"Advantages of Bayesian networks:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Advantages of Bayesian networks:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 21,
          "function_name": "main",
          "code": "discussion()"
        },
        {
          "path": "bayes.py",
          "line_number": 570,
          "function_name": "discussion",
          "code": "text(\"- Handle **heterogenously** missing information, both at training and test time\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Handle **heterogenously** missing information, both at training and test time",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 21,
          "function_name": "main",
          "code": "discussion()"
        },
        {
          "path": "bayes.py",
          "line_number": 571,
          "function_name": "discussion",
          "code": "text(\"- Incorporate **prior knowledge** (e.g., Mendelian inheritance, laws of physics)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Incorporate **prior knowledge** (e.g., Mendelian inheritance, laws of physics)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 21,
          "function_name": "main",
          "code": "discussion()"
        },
        {
          "path": "bayes.py",
          "line_number": 572,
          "function_name": "discussion",
          "code": "text(\"- Can **interpret** all the intermediate variables\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Can **interpret** all the intermediate variables",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 21,
          "function_name": "main",
          "code": "discussion()"
        },
        {
          "path": "bayes.py",
          "line_number": 573,
          "function_name": "discussion",
          "code": "text(\"- Precursor to **causal** models (can do interventions and counterfactuals)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Precursor to **causal** models (can do interventions and counterfactuals)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 21,
          "function_name": "main",
          "code": "discussion()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 23,
          "function_name": "main",
          "code": "text(\"Summary\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 24,
          "function_name": "main",
          "code": "text(\"- Probability: joint distributions, marginalization, conditioning\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Probability: joint distributions, marginalization, conditioning",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 25,
          "function_name": "main",
          "code": "text(\"- Probability tables are tensors, can use einsum to express computations\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Probability tables are tensors, can use einsum to express computations",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 26,
          "function_name": "main",
          "code": "text(\"- Bayesian networks: directed acyclic graphs of random variables\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Bayesian networks: directed acyclic graphs of random variables",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 27,
          "function_name": "main",
          "code": "text(\"- Probabilistic inference: ask questions P(query | evidence)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Probabilistic inference: ask questions P(query | evidence)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 28,
          "function_name": "main",
          "code": "text(\"- Probabilistic programming: programs as representations of joint distributions\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Probabilistic programming: programs as representations of joint distributions",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 29,
          "function_name": "main",
          "code": "text(\"- Rejection sampling: approximate inference by drawing samples\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Rejection sampling: approximate inference by drawing samples",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "bayes.py",
          "line_number": 31,
          "function_name": "main",
          "code": "text(\"Next time: better probabilistic inference!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Next time: better probabilistic inference!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    }
  ]
}
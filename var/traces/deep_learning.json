{
  "files": {
    "deep_learning.py": "from edtrace import text, image, link, plot, video\nfrom dataclasses import dataclass\nimport torch\nimport numpy as np\nfrom util import make_plot\nfrom backpropagation import Add, Input, Squared, backpropagation, DotProduct\nfrom torch import nn\nfrom altair import Chart, Data\nfrom graphviz import Digraph\n\n\ndef main():\n    text(\"Last units: linear regression/classification\")\n    text(\"This unit: non-linear regression/classification\")\n\n    pytorch_basics()\n    nonlinear_motivation()\n    multi_layer_perceptron_linear()\n    multi_layer_perceptron()\n\n    deep_neural_networks()\n\n    # Keeping things in balance\n    residual_connections()\n    layer_normalization()\n    initialization()\n    optimizers()\n\n    text(\"Summary:\")\n    text(\"- PyTorch: NumPy + automatic differentiation + pre-defined modules\")\n    text(\"- More (non-linear) layers = more expressivity\")\n    text(\"- Don't vanish/explode: choose activation functions to avoid dead neurons\")\n    text(\"- Don't vanish/explode: use residual connections\")\n    text(\"- Don't vanish/explode: use layer normalization\")\n    text(\"- Don't vanish/explode: use proper initialization\")\n    text(\"- Don't vanish/explode: use better optimizers (Adam)\")\n\n\ndef pytorch_basics():\n    text(\"So far, we've:\")\n    text(\"- used NumPy\")\n    text(\"- built our own computation graph library\")\n    text(\"...to really understand what's going on under the hood.\")\n\n    text(\"In practice, you want to use PyTorch (or JAX), which is:\") # @clear x y z\n    text(\"- much more efficient and industrial grade, and\")\n    text(\"- already implements the many common operations.\")\n    \n    compare_numpy_and_pytorch()\n    node_or_value()\n    linear_models()\n\n\ndef compare_numpy_and_pytorch():\n    text(\"Here's a simple computation graph using NumPy + our own library:\")\n    x = Input(\"x\", np.array([1, 2, 3]))  # @inspect x\n    y = Input(\"y\", np.array([4, 5, 6]))  # @inspect y\n    z = DotProduct(\"z\", x, y)  # @inspect z\n    image(z.get_graphviz().render(\"var/graph-xyz\", format=\"png\"), width=100)\n    backpropagation(z)  # @inspect z\n\n    text(\"The same computation graph using PyTorch:\")  # @clear x y z\n    x = torch.tensor([1., 2, 3], requires_grad=True)  # @inspect x\n    y = torch.tensor([4., 5, 6], requires_grad=True)  # @inspect y\n    z = x @ y  # @inspect z\n    z.backward()  # @inspect x.grad y.grad\n\n    text(\"In PyTorch:\")\n    text(\"- `torch.tensor` are actually nodes in the computation graph\")\n    text(\"- Operations (`@`) are parallel to NumPy\")\n    text(\"- Some minor naming differences (`torch.tensor` versus `np.array`)\")\n    text(\"- Values are computed eagerly during node construction (no `forward()` call)\")\n    text(\"- Call `.backward()` to backpropagate gradients (`.grad`) recursively\")\n    text(\"- Specify `requires_grad=True` to specify what to compute gradients for (parameters)\")\n\n\ndef node_or_value():\n    text(\"There are two ways to use a node:\")\n    text(\"- Use the node directly: new values will backprop through the node\")\n    text(\"- Use the node's value: new values will **not** backprop through the node\")\n\n    x = Input(\"x\", np.array(1.))  # @inspect x\n    y = Squared(\"y\", x)  # @inspect y @clear x\n    z = Squared(\"z\", y)  # By node @inspect z y @clear y\n    u = Input(\"u\", np.array(3.))  # @inspect u\n    l2 = Add(\"l2\", Squared(\"z2\", Input(\"y\", y.value)), u)  # By value @inspect l2 @clear u\n    image(z.get_graphviz().render(\"var/graph-sq-xyz\", format=\"png\"), width=50), image(l2.get_graphviz().render(\"var/graph-sq-xyz2\", format=\"png\"), width=100)\n    backpropagation(l2)  # @inspect z l2  # Doesn't propagate to x!\n    text(\"Note that `u.grad` is computed, but `x.grad` is not.\")\n\n    text(\"In PyTorch, we use tensors (nodes) directly as values (don't do `x.value`).\")  # @clear z l2\n    text(\"By default, PyTorch references by node.\")\n    text(\"To reference by value, we have to wrap a computation using `no_grad()`.\")\n    x = torch.tensor(1., requires_grad=True)  # @inspect x\n    y = x ** 2  # @inspect y\n    z = y ** 2  # @inspect z\n    u = torch.tensor(3., requires_grad=True)  # @inspect u\n    l2 = y.detach() ** 2 + u  # @inspect z2\n    l2.backward()  # @inspect z2 x.grad u.grad\n    text(\"Note that `u.grad` is computed, but `x.grad` is not.\")\n    \n    text(\"Sometimes you want to just compute values with no gradients.\")\n    text(\"Common use case: prediction at test-time (not updating parameters).\")\n    with torch.no_grad():\n        y = x ** 2  # @inspect y\n        z = y ** 2  # @inspect z\n\n    text(\"Now, you can't backpropagate through `z` at all.\")\n    try:\n        z.backward()  # @inspect z\n    except RuntimeError as e:\n        text(f\"RuntimeError: {e}\")\n\n\ndef linear_models():\n    text(\"PyTorch has built-in\")  # @clear x y z z2\n    text(\"- models (e.g., `nn.Linear`)\")\n    text(\"- loss functions (e.g., `nn.CrossEntropyLoss`)\")\n    text(\"- optimizers (e.g., `torch.optim.SGD`)\")\n    text(\"...and much more.\")\n    \n    # Data\n    x = torch.tensor([1., 2, 3, 4])  # @inspect x\n    target_y = torch.tensor([0., 1, 0])  # @inspect target_y\n\n    # Linear model\n    torch.manual_seed(1)\n    model = nn.Linear(4, 3)  # @inspect model.weight model.bias\n    logits = model(x)  # @inspect logits\n\n    # Loss function\n    cross_entropy = nn.CrossEntropyLoss()\n    loss = cross_entropy(logits, target_y)  # compare target_y and softmax(logits) @inspect loss\n    loss.backward()  # @inspect model.weight.grad model.bias.grad\n\n    # Optimizer (SGD = stochastic gradient descent, but using it to just take a gradient)\n    optimizer = torch.optim.SGD(model.parameters(), lr=0.1)\n    optimizer.step()  # Updates the parameters @inspect model.weight model.bias\n\n    # Complete the full loop\n    training_data = get_training_data()  # @inspect training_data @stepover @clear x target_y logits loss model.weight model.bias model.weight.grad model.bias.grad\n    result = train_model(model, training_data)\n    plot(result)\n\n    text(\"Summary:\")\n    text(\"- Define a model (e.g., linear): inputs to logits\")\n    text(\"- Define a loss (e.g., cross entropy): logits, targets to loss\")\n    text(\"- Define an optimizer (e.g., SGD): updates parameters using gradients\")\n\n\n@dataclass(frozen=True)\nclass Example:\n    x: torch.Tensor\n    target_y: torch.Tensor\n\n\ndef get_training_data() -> list[Example]:\n    return [\n        Example(x=torch.tensor([1., 2, 0, 1]), target_y=torch.tensor([0., 1, 0])),\n        Example(x=torch.tensor([-1., 0, 2, 0]), target_y=torch.tensor([1., 0, 0])),\n        Example(x=torch.tensor([0., 3, 1, 0]), target_y=torch.tensor([0., 0, 1])),\n    ]\n\n\ndef train_model(model: nn.Module,  # @inspect training_data num_steps learning_rate\n                training_data: list[Example],\n                optimizer_class=torch.optim.SGD,\n                num_steps=80,\n                learning_rate=0.1):\n    \"\"\"Train the model on `training_data`.\"\"\"\n    # Create data in tensor format (every row is an example)\n    x = torch.stack([example.x for example in training_data])  # @inspect x\n    target_y = torch.stack([example.target_y for example in training_data])  # @inspect target_y\n\n    cross_entropy = nn.CrossEntropyLoss()\n\n    losses: list[float] = []\n    optimizer = optimizer_class(model.parameters(), lr=learning_rate)\n    for step in range(num_steps):  # @inspect step\n        # Forward pass\n        logits = model(x)  # @inspect logits @stepover\n        loss = cross_entropy(logits, target_y)  # @inspect loss\n        losses.append(loss.item())\n\n        # Backward pass\n        optimizer.zero_grad()  # Remember to do this!\n        loss.backward()\n\n        # Update parameters\n        optimizer.step()\n        parameters = list(model.named_parameters())  # @inspect parameters\n\n    return Chart(Data(values=[{\"step\": i, \"loss\": loss} for i, loss in enumerate(losses)])).mark_line().encode(x=\"step:Q\", y=\"loss:Q\").to_dict()\n\n\ndef nonlinear_motivation():\n    link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=machine-learning%2Fnon-linear-features.js&mode=print6pp\", title=\"[Autumn 2023 lecture on non-linear models]\")\n    text(\"So far: linear classifiers\")\n    text(\"Decision boundaries: straight cuts of input space\")\n    def predictor(x: np.ndarray) -> int:\n        return x[0] - x[1] - 1\n    plot(make_plot(\"decision boundary\", \"x0\", \"x1\", lambda x0: x0 - 1))\n\n    text(\"Or in linear regression:\")\n    image(\"images/linear-regressors.png\", width=400)\n\n    text(\"But data sometimes might look like this:\")\n    image(\"images/nonlinear-points.png\", width=400)\n\n    text(\"For these cases, we need **non-linear** models.\")\n    text(\"What should we use?\")\n\n    text(\"There are actually a lot of non-linear models\")\n    text(\"- decision trees, nearest neighbors, neural networks\")\n    text(\"...and even linear models!\")\n    text(\"Wait, what?\")\n\n    text(\"Suppose we wanted to define a quadratic classifier:\")\n    def quadratic_classifier(x: np.ndarray) -> int:  # @inspect x\n        logit = (x[0] - 1) ** 2 + (x[1] - 1) ** 2 - 2  # @inspect logit\n        if logit > 0:\n            predicted_y = 1  # @inspect predicted_y\n        else:\n            predicted_y = -1  # @inspect predicted_y\n        return predicted_y\n    image(\"images/quadratic-classifier.png\", width=300)\n    predicted_y = quadratic_classifier(np.array([1, 1]))  # @inspect predicted_y\n    predicted_y = quadratic_classifier(np.array([3, 0]))  # @inspect predicted_y\n    text(\"The decision boundary is a circle...definitely non-linear.\")\n\n    text(\"But let us define a fixed non-linear feature map:\")\n    def feature_map(x: np.ndarray) -> np.ndarray:\n        return np.array([x[0], x[1], x[0] ** 2 + x[1] ** 2])\n\n    text(\"Then we define a linear predictor:\")\n    def predictor(x: np.ndarray) -> int:  # @inspect x\n        phi = feature_map(x)  # @inspect phi\n        # This is a predictor that is *linear* in phi\n        logit = -2 * phi[0] - 2 * phi[1] + phi[2]  # @inspect logit\n        if logit > 0:\n            predicted_y = 1  # @inspect predicted_y\n        else:\n            predicted_y = -1  # @inspect predicted_y\n        return predicted_y\n\n    predicted_y = predictor(np.array([1, 1]))  # @inspect predicted_y\n    predicted_y = predictor(np.array([3, 0]))  # @inspect predicted_y\n\n    text(\"A linear classifier in a higher-dimensional space\")\n    text(\"...leads to a non-linear classifier in the original space.\")\n    video(\"images/svm-polynomial-kernel.mp4\", width=400)\n\n    text(\"Here's a simple algorithm:\")\n    text(\"1. Preprocess our data by applying `feature_map`.\")\n    text(\"2. Learn a linear predictor on the processed data.\")\n\n    text(\"Drawback: `feature_map` is fixed...can we learn it as well?\")\n\n\ndef multi_layer_perceptron_linear():\n    text(\"Let's try to make the function more expressive by defining two layers.\")\n    text(\"- The first layer is a feature map.\")\n    text(\"- The second layer is the linear predictor.\")\n\n    training_data = get_training_data()  # @inspect training_data @stepover\n    input_dim = len(training_data[0].x)  # @inspect input_dim\n    num_classes = len(training_data[0].target_y)  # @inspect num_classes\n    torch.manual_seed(1)\n    model = LinearMLP(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model\n    logits = model(training_data[0].x)  # @inspect logits\n    result = train_model(model, training_data)  # @stepover\n    plot(result)\n\n    text(\"Claim: this is actually the same as training a linear classifier\")  # @clear training_data input_dim num_classes model logits\n    text(\"This is because matrix muliplication is associative.\")\n    x = torch.tensor([[1., 2, 3], [4, 5, 6]])  # @inspect x\n    w1 = torch.tensor([[1., 2], [3, 4], [5, 6]])  # @inspect w1\n    w2 = torch.tensor([[1., 0, -1], [2, -1, 2]])  # @inspect w2\n    logits = (x @ w1) @ w2  # @inspect logits\n    \n    text(\"Alternatively, collapse `w1` and `w2` into a single matrix:\")\n    w = w1 @ w2  # A single weight vector @inspect w\n    logits2 = x @ w  # This is just a linear classifier!  @inspect logits2\n\n    text(\"Ok, so how do we actually go beyond linear classifiers?\")\n\n\nclass LinearMLP(nn.Module):\n    def __init__(self, input_dim: int, hidden_dim: int, num_classes: int):  # @inspect input_dim hidden_dim num_classes\n        super().__init__()\n        # Maps input to hidden layer pre-nonlinearity\n        self.w1 = nn.Linear(input_dim, hidden_dim)\n        # Maps hidden layer to output logits\n        self.w2 = nn.Linear(hidden_dim, num_classes)\n    \n    def forward(self, x):  # @inspect x\n        # Maps input to hidden layer (learned feature map)\n        hidden = self.w1(x)  # @inspect hidden\n        # Maps hidden layer to output logits\n        logits = self.w2(hidden)  # @inspect logits\n        return logits\n\n    def asdict(self):\n        return list(self.named_parameters())\n\n\ndef multi_layer_perceptron():\n    text(\"Problem: linear networks aren't more expressive (though they are useful for studying training dynamics).\")\n    text(\"We can make things more expressive if we add a non-linear *activation function*.\")\n\n    text(\"There are many choices (sigmoid, tanh, ReLU, GeLU, Swish, etc.).\")\n    text(\"We will use the *rectified linear unit* (ReLU) for simplicity.\")\n    x = torch.tensor([-1., 0, 1])  # @inspect x\n    y = relu(x)  # @inspect y\n    plot(make_plot(\"relu\", \"x\", \"y\", lambda x: np.maximum(x, 0)))  # @stepover\n\n    text(\"Where does the name come from?\")\n    text(\"Perceptrons came from Frank Rosenblatt's 1958 paper (linear classifier)\")\n    text(\"1970s: multi-layer perceptrons (neural networks)\")\n\n    # Data\n    training_data = get_training_data()  # @inspect training_data @stepover\n    input_dim = len(training_data[0].x)\n    num_classes = len(training_data[0].target_y)\n\n    # Model\n    torch.manual_seed(2)\n    model = MultiLayerPerceptron(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model\n    logits = model(training_data[0].x)  # @inspect logits\n    text(\"Terminology: activations = hidden units = neurons\")\n    text(\"Caution: ReLU has zero gradient when x <= 0; can result in \\\"dead neurons\\\".\")\n    text(\"Fix: use activation function that doesn't have (near-)zero gradients (e.g., Leaky ReLU, GeLU, Swish, etc.)\")\n    text(\"Balance tradeoff between linear (better gradients) with non-linear (better expressivity).\")\n\n    # Train\n    result = train_model(model, training_data)  # @stepover\n    plot(result)\n\n    text(\"Summary: x -[linear][relu]-> hidden -[linear]-> logits\")\n\n\ndef relu(x: torch.Tensor) -> torch.Tensor:\n    return torch.maximum(x, torch.zeros_like(x))\n\n\nclass MultiLayerPerceptron(nn.Module):\n    def __init__(self, input_dim: int, hidden_dim: int, num_classes: int):  # @inspect input_dim hidden_dim num_classes\n        super().__init__()\n        # Maps input to hidden layer pre-nonlinearity\n        self.w1 = nn.Linear(input_dim, hidden_dim)\n        # Maps hidden layer to output logits\n        self.w2 = nn.Linear(hidden_dim, num_classes)\n    \n    def forward(self, x):  # @inspect x\n        # Maps input to hidden layer (learned feature map)\n        x_transformed = self.w1(x)  # @inspect x_transformed\n        hidden = relu(x_transformed)  # @inspect hidden\n        # Maps hidden layer to output logits\n        logits = self.w2(hidden)  # @inspect logits\n        return logits\n\n    def asdict(self):\n        return list(self.named_parameters())\n\n\ndef deep_neural_networks():\n    text(\"Problem: a single MLP layer might not be expressive enough.\")\n    text(\"Solution: stack multiple MLP layers.\")\n    image(\"images/more-layers.webp\", width=400)\n\n    text(\"Intuition: each layer learns more abstract features of the input.\")\n    image(\"images/feature-hierarchy.png\", width=400)\n\n    text(\"Formally: compose multiple MLP layers.\")\n    training_data = get_training_data()  # @inspect training_data @stepover\n    input_dim = len(training_data[0].x)\n    num_classes = len(training_data[0].target_y)\n\n    # Model\n    torch.manual_seed(2)\n    model = DNN(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model\n    logits = model(training_data[0].x)  # @inspect logits\n\n    # Train\n    result = train_model(model, training_data) # @stepover @clear logits\n    plot(result)\n    text(\"Training is slower with more layers, especially in the beginning...\")\n\n    vanishing_exploding_gradient_problem()\n\n\ndef vanishing_exploding_gradient_problem():\n    text(\"Historically, it has been extremely hard to train deep neural networks\")  # @clear training_data model\n    text(\"...due to the vanishing/exploding gradient problem.\")\n\n    text(\"Vanishing gradient problem:\")\n    x = torch.tensor(1.)  # @inspect x\n    w = torch.tensor(0.5, requires_grad=True)  # @inspect w\n    for layer in range(20):\n        x = x * w  # @inspect x\n    x.backward()  # @inspect w.grad\n\n    text(\"Exploding gradient problem:\")\n    x = torch.tensor(1.)  # @inspect x\n    w = torch.tensor(2., requires_grad=True)  # @inspect w\n    for layer in range(20):\n        x = x * w  # @inspect x\n    x.backward()  # @inspect w.grad\n\n    text(\"So ideally, you want w close to 1 for stability.\")\n    text(\"The problem occurs for matrices too (want eigenvalues of w to be close to 1).\")\n\n\nclass DNN(nn.Module):\n    def __init__(self, input_dim: int, hidden_dim: int, num_classes: int):  # @inspect input_dim hidden_dim num_classes\n        super().__init__()\n        self.layer1 = MultiLayerPerceptron(input_dim, hidden_dim, hidden_dim)\n        self.layer2 = MultiLayerPerceptron(hidden_dim, hidden_dim, num_classes)\n    \n    def forward(self, x):  # @inspect x\n        x = self.layer1(x)\n        x = self.layer2(x)\n        return x\n\n    def asdict(self):\n        return list(self.named_parameters())\n\n\ndef residual_connections():\n    text(\"Training deep neural networks is challenging because of vanishing gradients..\")\n\n    text(\"Solution: residual connections (skip connections, highway networks)\")\n    text(\"Idea appears in many places:\")\n    text(\"- McCulloch/Pitts 1943, Rosenblatt 1961\")\n    text(\"- LSTMs for sequence modeling (1997)\")\n    text(\"- Residual networks for computer vision (2015)\")\n\n    text(\"No residual connections, each layer computes: x \u2192 f(x)\")\n    text(\"With residual connections, each layer computes: x \u2192 x + f(x)\")\n\n    text(\"For f(x) = w x,\")\n    text(\"each layer computes:x \u2192 (1 + w) x\")\n    text(\"which keeps the multiplier away from zero (still can explode if w is large).\")\n\n    # Data\n    training_data = get_training_data()  # @stepover\n    input_dim = len(training_data[0].x)\n    num_classes = len(training_data[0].target_y)\n\n    # Model\n    model = DNNWithResidual(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model\n    logits = model(training_data[0].x)  # @inspect logits\n\n    # Train\n    result = train_model(model, training_data)  # @stepover\n    plot(result)\n\n    text(\"The training is much faster!\")\n    \n\nclass DNNWithResidual(nn.Module):\n    def __init__(self, input_dim: int, hidden_dim: int, num_classes: int):  # @inspect input_dim hidden_dim num_classes\n        super().__init__()\n        self.layer1 = nn.Linear(input_dim, hidden_dim)\n        self.layer2 = nn.Linear(hidden_dim, hidden_dim)\n        self.layer3 = nn.Linear(hidden_dim, num_classes)\n    \n    def forward(self, x):  # @inspect x\n        x = self.layer1(x)  # @inspect x\n        x = x + self.layer2(x)  # Add residual connection @inspect x\n        x = self.layer3(x)  # @inspect x\n        return x\n\n    def asdict(self):\n        return list(self.named_parameters())\n\n\ndef layer_normalization():\n    text(\"Motivation: don't want the magitude of activations to grow too big or small.\") \n    text(\"Solution: **layer normalization** (also see batch normalization)\"), link(\"https://arxiv.org/abs/1607.06450\")\n\n    text(\"Here's the basic idea:\")\n    def layernorm(x):\n        mean = x.mean()  # @inspect mean\n        std = x.std()  # @inspect std\n        y = (x - mean) / std  # @inspect y\n        return y\n    x = torch.tensor([1., 2, 3])  # @inspect x\n    y = layernorm(x)  # @inspect y\n    x = torch.tensor([100., 200, 300])  # @inspect x @clear y\n    y = layernorm(x)  # @inspect y\n\n    text(\"The real LayerNorm adds three things:\")\n    epsilon = 1e-5  # Prevent dividing by zero  @inspect epsilon\n    gamma = torch.tensor([1., 1, 1])  # Scaling parameters @inspect gamma\n    beta = torch.tensor([0., 0, 0])  # Shifting parameters @inspect beta\n    def layernorm(x, gamma, beta):\n        mean = x.mean()  # @inspect mean\n        var = x.var()  # @inspect std\n        y = (x - mean) / torch.sqrt(var + epsilon)  # @inspect y\n        y = y * gamma + beta  # Scale + shift @inspect y\n        return y\n    x = torch.tensor([1., 2, 3])  # @inspect x @clear y\n    y = layernorm(x, gamma, beta)  # @inspect y\n    x = torch.tensor([100., 200, 300])  # @inspect x @clear y\n    y = layernorm(x, gamma, beta)  # @inspect y\n\n    text(\"In PyTorch:\")\n    layer = nn.LayerNorm(3)  # @clear y gamma beta epsilon\n    parameters = list(layer.named_parameters())  # @inspect parameters\n    x = torch.tensor([1., 2, 3])  # @inspect x\n    y = layer(x)  # @inspect y\n    x = torch.tensor([100., 200, 300])  # @inspect x @clear y\n    y = layer(x)  # @inspect y\n\n    text(\"Summary: layer normalization keeps the magnitude of activations away from zero and infinity.\")\n\n\ndef initialization():\n    text(\"We have seen that the magnitude of activations can grow too big or small.\")\n    text(\"We can avoid this by using proper initialization.\")\n\n    input_dim = 16384\n    output_dim = 32\n    w = nn.Parameter(torch.randn(input_dim, output_dim))\n    x = nn.Parameter(torch.randn(input_dim))\n    y = x @ w  # @inspect y\n    text(f\"Note that each element of `y` scales as sqrt(input_dim): {y[0]}.\")\n    text(\"Large values can cause gradients to blow up and cause training to be unstable.\")\n\n    text(\"We want an initialization that is invariant to `input_dim`.\")\n    text(\"To do that, we simply rescale by 1/sqrt(input_dim)\")\n    w = nn.Parameter(torch.randn(input_dim, output_dim) / np.sqrt(input_dim))\n    y = x @ w  # @inspect y\n    text(f\"Now each element of `y` is constant: {y[0]}.\")\n\n    text(\"Up to a constant, this is Xavier initialization. \"), link(title=\"[paper]\", url=\"https://proceedings.mlr.press/v9/glorot10a/glorot10a.pdf\"), link(title=\"[stackexchange]\", url=\"https://ai.stackexchange.com/questions/30491/is-there-a-proper-initialization-technique-for-the-weight-matrices-in-multi-head\")\n\n    text(\"To be extra safe, we truncate the normal distribution to [-3, 3] to avoid any chance of outliers.\")\n    w = nn.Parameter(nn.init.trunc_normal_(torch.empty(input_dim, output_dim), std=1 / np.sqrt(input_dim), a=-3, b=3))\n\n\ndef optimizers():\n    text(\"So far, we've used gradient descent (GD).\")\n    text(\"Each gradient requires summing over all training examples.\")\n    text(\"For large datasets, this is too much work to make just one update.\")\n    text(\"Instead, we can use a stochastic optimizer.\")\n    text(\"Each step, choose a random subset of the training examples.\")\n    text(\"This is an unbiased estimate of the gradient.\")\n\n    grads = torch.tensor([[1., 2], [3, 4], [5, 6], [7, 8]]) # @inspect grads\n    grad = torch.mean(grads, axis=0)  # @inspect grad\n    torch.manual_seed(1)\n    batch_size = 2\n    indices = torch.randint(0, grads.shape[0], (batch_size,))  # @inspect indices\n    stochastic_grads = grads[indices]  # @inspect stochastic_grads\n    stochastic_grad = torch.mean(stochastic_grads, axis=0)  # @inspect stochastic_grad\n\n    text(\"In practice, we permute the training examples each epoch and take consecutive chunks.\")\n    random_perm = torch.randperm(grads.shape[0]) # @inspect random_perm\n    batches = [random_perm[i:i + batch_size] for i in range(0, len(random_perm), batch_size)] # @inspect batches\n    stochastic_grads = torch.stack([torch.mean(grads[indices], axis=0) for indices in batches])  # @inspect stochastic_grads\n    stochastic_grad = torch.mean(stochastic_grads, axis=0)  # @inspect stochastic_grad\n\n    text(\"Fancier optimizer: use Adam instead of SGD.\")\n\n\ndef nn_graph(labels: list[str]):\n    dot = Digraph()\n    dot.attr(\"node\", shape=\"box\", width=\"0.5\", height=\"3\")\n    for i, label in enumerate(labels):\n        dot.node(str(i), \"\")\n    dot.node(str(i), \"\")\n    for label1, label2 in zip(labels, labels[1:]):\n        dot.edge(str(i), str(i + 1), label=label1)\n    return dot\n\n\nif __name__ == \"__main__\":\n    main()"
  },
  "hidden_line_numbers": {
    "deep_learning.py": []
  },
  "steps": [
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 12,
          "function_name": "main",
          "code": "def main():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 13,
          "function_name": "main",
          "code": "text(\"Last units: linear regression/classification\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Last units: linear regression/classification",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 14,
          "function_name": "main",
          "code": "text(\"This unit: non-linear regression/classification\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This unit: non-linear regression/classification",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 39,
          "function_name": "pytorch_basics",
          "code": "def pytorch_basics():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 40,
          "function_name": "pytorch_basics",
          "code": "text(\"So far, we've:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So far, we've:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 41,
          "function_name": "pytorch_basics",
          "code": "text(\"- used NumPy\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- used NumPy",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 42,
          "function_name": "pytorch_basics",
          "code": "text(\"- built our own computation graph library\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- built our own computation graph library",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 43,
          "function_name": "pytorch_basics",
          "code": "text(\"...to really understand what's going on under the hood.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...to really understand what's going on under the hood.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 45,
          "function_name": "pytorch_basics",
          "code": "text(\"In practice, you want to use PyTorch (or JAX), which is:\") # @clear x y z"
        }
      ],
      "env": {
        "x": null,
        "y": null,
        "z": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "In practice, you want to use PyTorch (or JAX), which is:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 46,
          "function_name": "pytorch_basics",
          "code": "text(\"- much more efficient and industrial grade, and\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- much more efficient and industrial grade, and",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 47,
          "function_name": "pytorch_basics",
          "code": "text(\"- already implements the many common operations.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- already implements the many common operations.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 54,
          "function_name": "compare_numpy_and_pytorch",
          "code": "def compare_numpy_and_pytorch():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 55,
          "function_name": "compare_numpy_and_pytorch",
          "code": "text(\"Here's a simple computation graph using NumPy + our own library:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Here's a simple computation graph using NumPy + our own library:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 56,
          "function_name": "compare_numpy_and_pytorch",
          "code": "x = Input(\"x\", np.array([1, 2, 3]))  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "backpropagation.Input",
          "contents": {
            "name": {
              "type": "str",
              "contents": "x",
              "dtype": null,
              "shape": null
            },
            "value": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                2,
                3
              ],
              "dtype": "int64",
              "shape": [
                3
              ]
            },
            "grad": {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 57,
          "function_name": "compare_numpy_and_pytorch",
          "code": "y = Input(\"y\", np.array([4, 5, 6]))  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "backpropagation.Input",
          "contents": {
            "name": {
              "type": "str",
              "contents": "y",
              "dtype": null,
              "shape": null
            },
            "value": {
              "type": "numpy.ndarray",
              "contents": [
                4,
                5,
                6
              ],
              "dtype": "int64",
              "shape": [
                3
              ]
            },
            "grad": {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 58,
          "function_name": "compare_numpy_and_pytorch",
          "code": "z = DotProduct(\"z\", x, y)  # @inspect z"
        }
      ],
      "env": {
        "z": {
          "type": "backpropagation.DotProduct",
          "contents": {
            "name": {
              "type": "str",
              "contents": "z",
              "dtype": null,
              "shape": null
            },
            "value": {
              "type": "numpy.int64",
              "contents": 32,
              "dtype": null,
              "shape": null
            },
            "grad": {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            },
            "dependencies": {
              "type": "list",
              "contents": [
                {
                  "type": "dict",
                  "contents": {
                    "name": {
                      "type": "str",
                      "contents": "x",
                      "dtype": null,
                      "shape": null
                    },
                    "value": {
                      "type": "numpy.ndarray",
                      "contents": [
                        1,
                        2,
                        3
                      ],
                      "dtype": "int64",
                      "shape": [
                        3
                      ]
                    },
                    "grad": {
                      "type": "NoneType",
                      "contents": "None",
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "dict",
                  "contents": {
                    "name": {
                      "type": "str",
                      "contents": "y",
                      "dtype": null,
                      "shape": null
                    },
                    "value": {
                      "type": "numpy.ndarray",
                      "contents": [
                        4,
                        5,
                        6
                      ],
                      "dtype": "int64",
                      "shape": [
                        3
                      ]
                    },
                    "grad": {
                      "type": "NoneType",
                      "contents": "None",
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 59,
          "function_name": "compare_numpy_and_pytorch",
          "code": "image(z.get_graphviz().render(\"var/graph-xyz\", format=\"png\"), width=100)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "var/graph-xyz.png",
          "style": {
            "width": 100
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 60,
          "function_name": "compare_numpy_and_pytorch",
          "code": "backpropagation(z)  # @inspect z"
        }
      ],
      "env": {
        "z": {
          "type": "backpropagation.DotProduct",
          "contents": {
            "name": {
              "type": "str",
              "contents": "z",
              "dtype": null,
              "shape": null
            },
            "value": {
              "type": "numpy.int64",
              "contents": 32,
              "dtype": null,
              "shape": null
            },
            "grad": {
              "type": "numpy.ndarray",
              "contents": 1,
              "dtype": "int64",
              "shape": []
            },
            "dependencies": {
              "type": "list",
              "contents": [
                {
                  "type": "dict",
                  "contents": {
                    "name": {
                      "type": "str",
                      "contents": "x",
                      "dtype": null,
                      "shape": null
                    },
                    "value": {
                      "type": "numpy.ndarray",
                      "contents": [
                        1,
                        2,
                        3
                      ],
                      "dtype": "int64",
                      "shape": [
                        3
                      ]
                    },
                    "grad": {
                      "type": "numpy.ndarray",
                      "contents": [
                        4,
                        5,
                        6
                      ],
                      "dtype": "int64",
                      "shape": [
                        3
                      ]
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "dict",
                  "contents": {
                    "name": {
                      "type": "str",
                      "contents": "y",
                      "dtype": null,
                      "shape": null
                    },
                    "value": {
                      "type": "numpy.ndarray",
                      "contents": [
                        4,
                        5,
                        6
                      ],
                      "dtype": "int64",
                      "shape": [
                        3
                      ]
                    },
                    "grad": {
                      "type": "numpy.ndarray",
                      "contents": [
                        1,
                        2,
                        3
                      ],
                      "dtype": "int64",
                      "shape": [
                        3
                      ]
                    }
                  },
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 62,
          "function_name": "compare_numpy_and_pytorch",
          "code": "text(\"The same computation graph using PyTorch:\")  # @clear x y z"
        }
      ],
      "env": {
        "x": null,
        "y": null,
        "z": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "The same computation graph using PyTorch:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 63,
          "function_name": "compare_numpy_and_pytorch",
          "code": "x = torch.tensor([1., 2, 3], requires_grad=True)  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            1.0,
            2.0,
            3.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 64,
          "function_name": "compare_numpy_and_pytorch",
          "code": "y = torch.tensor([4., 5, 6], requires_grad=True)  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "torch.Tensor",
          "contents": [
            4.0,
            5.0,
            6.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 65,
          "function_name": "compare_numpy_and_pytorch",
          "code": "z = x @ y  # @inspect z"
        }
      ],
      "env": {
        "z": {
          "type": "torch.Tensor",
          "contents": 32.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 66,
          "function_name": "compare_numpy_and_pytorch",
          "code": "z.backward()  # @inspect x.grad y.grad"
        }
      ],
      "env": {
        "x.grad": {
          "type": "torch.Tensor",
          "contents": [
            4.0,
            5.0,
            6.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        },
        "y.grad": {
          "type": "torch.Tensor",
          "contents": [
            1.0,
            2.0,
            3.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 68,
          "function_name": "compare_numpy_and_pytorch",
          "code": "text(\"In PyTorch:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In PyTorch:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 69,
          "function_name": "compare_numpy_and_pytorch",
          "code": "text(\"- `torch.tensor` are actually nodes in the computation graph\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- `torch.tensor` are actually nodes in the computation graph",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 70,
          "function_name": "compare_numpy_and_pytorch",
          "code": "text(\"- Operations (`@`) are parallel to NumPy\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Operations (`@`) are parallel to NumPy",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 71,
          "function_name": "compare_numpy_and_pytorch",
          "code": "text(\"- Some minor naming differences (`torch.tensor` versus `np.array`)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Some minor naming differences (`torch.tensor` versus `np.array`)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 72,
          "function_name": "compare_numpy_and_pytorch",
          "code": "text(\"- Values are computed eagerly during node construction (no `forward()` call)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Values are computed eagerly during node construction (no `forward()` call)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 73,
          "function_name": "compare_numpy_and_pytorch",
          "code": "text(\"- Call `.backward()` to backpropagate gradients (`.grad`) recursively\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Call `.backward()` to backpropagate gradients (`.grad`) recursively",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 74,
          "function_name": "compare_numpy_and_pytorch",
          "code": "text(\"- Specify `requires_grad=True` to specify what to compute gradients for (parameters)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Specify `requires_grad=True` to specify what to compute gradients for (parameters)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 49,
          "function_name": "pytorch_basics",
          "code": "compare_numpy_and_pytorch()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 77,
          "function_name": "node_or_value",
          "code": "def node_or_value():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 78,
          "function_name": "node_or_value",
          "code": "text(\"There are two ways to use a node:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "There are two ways to use a node:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 79,
          "function_name": "node_or_value",
          "code": "text(\"- Use the node directly: new values will backprop through the node\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Use the node directly: new values will backprop through the node",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 80,
          "function_name": "node_or_value",
          "code": "text(\"- Use the node's value: new values will **not** backprop through the node\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Use the node's value: new values will **not** backprop through the node",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 82,
          "function_name": "node_or_value",
          "code": "x = Input(\"x\", np.array(1.))  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "backpropagation.Input",
          "contents": {
            "name": {
              "type": "str",
              "contents": "x",
              "dtype": null,
              "shape": null
            },
            "value": {
              "type": "numpy.ndarray",
              "contents": 1.0,
              "dtype": "float64",
              "shape": []
            },
            "grad": {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 83,
          "function_name": "node_or_value",
          "code": "y = Squared(\"y\", x)  # @inspect y @clear x"
        }
      ],
      "env": {
        "y": {
          "type": "backpropagation.Squared",
          "contents": {
            "name": {
              "type": "str",
              "contents": "y",
              "dtype": null,
              "shape": null
            },
            "value": {
              "type": "numpy.float64",
              "contents": 1.0,
              "dtype": null,
              "shape": null
            },
            "grad": {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            },
            "dependencies": {
              "type": "list",
              "contents": [
                {
                  "type": "dict",
                  "contents": {
                    "name": {
                      "type": "str",
                      "contents": "x",
                      "dtype": null,
                      "shape": null
                    },
                    "value": {
                      "type": "numpy.ndarray",
                      "contents": 1.0,
                      "dtype": "float64",
                      "shape": []
                    },
                    "grad": {
                      "type": "NoneType",
                      "contents": "None",
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "x": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 84,
          "function_name": "node_or_value",
          "code": "z = Squared(\"z\", y)  # By node @inspect z y @clear y"
        }
      ],
      "env": {
        "z": {
          "type": "backpropagation.Squared",
          "contents": {
            "name": {
              "type": "str",
              "contents": "z",
              "dtype": null,
              "shape": null
            },
            "value": {
              "type": "numpy.float64",
              "contents": 1.0,
              "dtype": null,
              "shape": null
            },
            "grad": {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            },
            "dependencies": {
              "type": "list",
              "contents": [
                {
                  "type": "dict",
                  "contents": {
                    "name": {
                      "type": "str",
                      "contents": "y",
                      "dtype": null,
                      "shape": null
                    },
                    "value": {
                      "type": "numpy.float64",
                      "contents": 1.0,
                      "dtype": null,
                      "shape": null
                    },
                    "grad": {
                      "type": "NoneType",
                      "contents": "None",
                      "dtype": null,
                      "shape": null
                    },
                    "dependencies": {
                      "type": "list",
                      "contents": [
                        {
                          "type": "dict",
                          "contents": {
                            "name": {
                              "type": "str",
                              "contents": "x",
                              "dtype": null,
                              "shape": null
                            },
                            "value": {
                              "type": "numpy.ndarray",
                              "contents": 1.0,
                              "dtype": "float64",
                              "shape": []
                            },
                            "grad": {
                              "type": "NoneType",
                              "contents": "None",
                              "dtype": null,
                              "shape": null
                            }
                          },
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "y": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 85,
          "function_name": "node_or_value",
          "code": "u = Input(\"u\", np.array(3.))  # @inspect u"
        }
      ],
      "env": {
        "u": {
          "type": "backpropagation.Input",
          "contents": {
            "name": {
              "type": "str",
              "contents": "u",
              "dtype": null,
              "shape": null
            },
            "value": {
              "type": "numpy.ndarray",
              "contents": 3.0,
              "dtype": "float64",
              "shape": []
            },
            "grad": {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 86,
          "function_name": "node_or_value",
          "code": "l2 = Add(\"l2\", Squared(\"z2\", Input(\"y\", y.value)), u)  # By value @inspect l2 @clear u"
        }
      ],
      "env": {
        "l2": {
          "type": "backpropagation.Add",
          "contents": {
            "name": {
              "type": "str",
              "contents": "l2",
              "dtype": null,
              "shape": null
            },
            "value": {
              "type": "numpy.float64",
              "contents": 4.0,
              "dtype": null,
              "shape": null
            },
            "grad": {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            },
            "dependencies": {
              "type": "list",
              "contents": [
                {
                  "type": "dict",
                  "contents": {
                    "name": {
                      "type": "str",
                      "contents": "z2",
                      "dtype": null,
                      "shape": null
                    },
                    "value": {
                      "type": "numpy.float64",
                      "contents": 1.0,
                      "dtype": null,
                      "shape": null
                    },
                    "grad": {
                      "type": "NoneType",
                      "contents": "None",
                      "dtype": null,
                      "shape": null
                    },
                    "dependencies": {
                      "type": "list",
                      "contents": [
                        {
                          "type": "dict",
                          "contents": {
                            "name": {
                              "type": "str",
                              "contents": "y",
                              "dtype": null,
                              "shape": null
                            },
                            "value": {
                              "type": "numpy.float64",
                              "contents": 1.0,
                              "dtype": null,
                              "shape": null
                            },
                            "grad": {
                              "type": "NoneType",
                              "contents": "None",
                              "dtype": null,
                              "shape": null
                            }
                          },
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "dict",
                  "contents": {
                    "name": {
                      "type": "str",
                      "contents": "u",
                      "dtype": null,
                      "shape": null
                    },
                    "value": {
                      "type": "numpy.ndarray",
                      "contents": 3.0,
                      "dtype": "float64",
                      "shape": []
                    },
                    "grad": {
                      "type": "NoneType",
                      "contents": "None",
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "u": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 87,
          "function_name": "node_or_value",
          "code": "image(z.get_graphviz().render(\"var/graph-sq-xyz\", format=\"png\"), width=50), image(l2.get_graphviz().render(\"var/graph-sq-xyz2\", format=\"png\"), width=100)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "var/graph-sq-xyz.png",
          "style": {
            "width": 50
          },
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "image",
          "data": "var/graph-sq-xyz2.png",
          "style": {
            "width": 100
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 88,
          "function_name": "node_or_value",
          "code": "backpropagation(l2)  # @inspect z l2  # Doesn't propagate to x!"
        }
      ],
      "env": {
        "z": {
          "type": "backpropagation.Squared",
          "contents": {
            "name": {
              "type": "str",
              "contents": "z",
              "dtype": null,
              "shape": null
            },
            "value": {
              "type": "numpy.float64",
              "contents": 1.0,
              "dtype": null,
              "shape": null
            },
            "grad": {
              "type": "NoneType",
              "contents": "None",
              "dtype": null,
              "shape": null
            },
            "dependencies": {
              "type": "list",
              "contents": [
                {
                  "type": "dict",
                  "contents": {
                    "name": {
                      "type": "str",
                      "contents": "y",
                      "dtype": null,
                      "shape": null
                    },
                    "value": {
                      "type": "numpy.float64",
                      "contents": 1.0,
                      "dtype": null,
                      "shape": null
                    },
                    "grad": {
                      "type": "NoneType",
                      "contents": "None",
                      "dtype": null,
                      "shape": null
                    },
                    "dependencies": {
                      "type": "list",
                      "contents": [
                        {
                          "type": "dict",
                          "contents": {
                            "name": {
                              "type": "str",
                              "contents": "x",
                              "dtype": null,
                              "shape": null
                            },
                            "value": {
                              "type": "numpy.ndarray",
                              "contents": 1.0,
                              "dtype": "float64",
                              "shape": []
                            },
                            "grad": {
                              "type": "NoneType",
                              "contents": "None",
                              "dtype": null,
                              "shape": null
                            }
                          },
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "l2": {
          "type": "backpropagation.Add",
          "contents": {
            "name": {
              "type": "str",
              "contents": "l2",
              "dtype": null,
              "shape": null
            },
            "value": {
              "type": "numpy.float64",
              "contents": 4.0,
              "dtype": null,
              "shape": null
            },
            "grad": {
              "type": "numpy.ndarray",
              "contents": 1.0,
              "dtype": "float64",
              "shape": []
            },
            "dependencies": {
              "type": "list",
              "contents": [
                {
                  "type": "dict",
                  "contents": {
                    "name": {
                      "type": "str",
                      "contents": "z2",
                      "dtype": null,
                      "shape": null
                    },
                    "value": {
                      "type": "numpy.float64",
                      "contents": 1.0,
                      "dtype": null,
                      "shape": null
                    },
                    "grad": {
                      "type": "numpy.ndarray",
                      "contents": 1.0,
                      "dtype": "float64",
                      "shape": []
                    },
                    "dependencies": {
                      "type": "list",
                      "contents": [
                        {
                          "type": "dict",
                          "contents": {
                            "name": {
                              "type": "str",
                              "contents": "y",
                              "dtype": null,
                              "shape": null
                            },
                            "value": {
                              "type": "numpy.float64",
                              "contents": 1.0,
                              "dtype": null,
                              "shape": null
                            },
                            "grad": {
                              "type": "numpy.ndarray",
                              "contents": 2.0,
                              "dtype": "float64",
                              "shape": []
                            }
                          },
                          "dtype": null,
                          "shape": null
                        }
                      ],
                      "dtype": null,
                      "shape": null
                    }
                  },
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "dict",
                  "contents": {
                    "name": {
                      "type": "str",
                      "contents": "u",
                      "dtype": null,
                      "shape": null
                    },
                    "value": {
                      "type": "numpy.ndarray",
                      "contents": 3.0,
                      "dtype": "float64",
                      "shape": []
                    },
                    "grad": {
                      "type": "numpy.ndarray",
                      "contents": 1.0,
                      "dtype": "float64",
                      "shape": []
                    }
                  },
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 89,
          "function_name": "node_or_value",
          "code": "text(\"Note that `u.grad` is computed, but `x.grad` is not.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note that `u.grad` is computed, but `x.grad` is not.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 91,
          "function_name": "node_or_value",
          "code": "text(\"In PyTorch, we use tensors (nodes) directly as values (don't do `x.value`).\")  # @clear z l2"
        }
      ],
      "env": {
        "z": null,
        "l2": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "In PyTorch, we use tensors (nodes) directly as values (don't do `x.value`).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 92,
          "function_name": "node_or_value",
          "code": "text(\"By default, PyTorch references by node.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "By default, PyTorch references by node.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 93,
          "function_name": "node_or_value",
          "code": "text(\"To reference by value, we have to wrap a computation using `no_grad()`.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "To reference by value, we have to wrap a computation using `no_grad()`.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 94,
          "function_name": "node_or_value",
          "code": "x = torch.tensor(1., requires_grad=True)  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 1.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 95,
          "function_name": "node_or_value",
          "code": "y = x ** 2  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "torch.Tensor",
          "contents": 1.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 96,
          "function_name": "node_or_value",
          "code": "z = y ** 2  # @inspect z"
        }
      ],
      "env": {
        "z": {
          "type": "torch.Tensor",
          "contents": 1.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 97,
          "function_name": "node_or_value",
          "code": "u = torch.tensor(3., requires_grad=True)  # @inspect u"
        }
      ],
      "env": {
        "u": {
          "type": "torch.Tensor",
          "contents": 3.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 98,
          "function_name": "node_or_value",
          "code": "l2 = y.detach() ** 2 + u  # @inspect z2"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 99,
          "function_name": "node_or_value",
          "code": "l2.backward()  # @inspect z2 x.grad u.grad"
        }
      ],
      "env": {
        "x.grad": {
          "type": "NoneType",
          "contents": "None",
          "dtype": null,
          "shape": null
        },
        "u.grad": {
          "type": "torch.Tensor",
          "contents": 1.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 100,
          "function_name": "node_or_value",
          "code": "text(\"Note that `u.grad` is computed, but `x.grad` is not.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note that `u.grad` is computed, but `x.grad` is not.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 102,
          "function_name": "node_or_value",
          "code": "text(\"Sometimes you want to just compute values with no gradients.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Sometimes you want to just compute values with no gradients.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 103,
          "function_name": "node_or_value",
          "code": "text(\"Common use case: prediction at test-time (not updating parameters).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Common use case: prediction at test-time (not updating parameters).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 104,
          "function_name": "node_or_value",
          "code": "with torch.no_grad():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 105,
          "function_name": "node_or_value",
          "code": "y = x ** 2  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "torch.Tensor",
          "contents": 1.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 106,
          "function_name": "node_or_value",
          "code": "z = y ** 2  # @inspect z"
        }
      ],
      "env": {
        "z": {
          "type": "torch.Tensor",
          "contents": 1.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 104,
          "function_name": "node_or_value",
          "code": "with torch.no_grad():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 108,
          "function_name": "node_or_value",
          "code": "text(\"Now, you can't backpropagate through `z` at all.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now, you can't backpropagate through `z` at all.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 109,
          "function_name": "node_or_value",
          "code": "try:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 110,
          "function_name": "node_or_value",
          "code": "z.backward()  # @inspect z"
        }
      ],
      "env": {
        "z": {
          "type": "torch.Tensor",
          "contents": 1.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 111,
          "function_name": "node_or_value",
          "code": "except RuntimeError as e:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 112,
          "function_name": "node_or_value",
          "code": "text(f\"RuntimeError: {e}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "RuntimeError: element 0 of tensors does not require grad and does not have a grad_fn",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 50,
          "function_name": "pytorch_basics",
          "code": "node_or_value()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 115,
          "function_name": "linear_models",
          "code": "def linear_models():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 116,
          "function_name": "linear_models",
          "code": "text(\"PyTorch has built-in\")  # @clear x y z z2"
        }
      ],
      "env": {
        "x": null,
        "y": null,
        "z": null,
        "z2": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "PyTorch has built-in",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 117,
          "function_name": "linear_models",
          "code": "text(\"- models (e.g., `nn.Linear`)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- models (e.g., `nn.Linear`)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 118,
          "function_name": "linear_models",
          "code": "text(\"- loss functions (e.g., `nn.CrossEntropyLoss`)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- loss functions (e.g., `nn.CrossEntropyLoss`)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 119,
          "function_name": "linear_models",
          "code": "text(\"- optimizers (e.g., `torch.optim.SGD`)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- optimizers (e.g., `torch.optim.SGD`)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 120,
          "function_name": "linear_models",
          "code": "text(\"...and much more.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...and much more.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 123,
          "function_name": "linear_models",
          "code": "x = torch.tensor([1., 2, 3, 4])  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            1.0,
            2.0,
            3.0,
            4.0
          ],
          "dtype": "torch.float32",
          "shape": [
            4
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 124,
          "function_name": "linear_models",
          "code": "target_y = torch.tensor([0., 1, 0])  # @inspect target_y"
        }
      ],
      "env": {
        "target_y": {
          "type": "torch.Tensor",
          "contents": [
            0.0,
            1.0,
            0.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 127,
          "function_name": "linear_models",
          "code": "torch.manual_seed(1)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 128,
          "function_name": "linear_models",
          "code": "model = nn.Linear(4, 3)  # @inspect model.weight model.bias"
        }
      ],
      "env": {
        "model.weight": {
          "type": "torch.nn.parameter.Parameter",
          "contents": [
            [
              0.2576315999031067,
              -0.22068911790847778,
              -0.09693074226379395,
              0.23468446731567383
            ],
            [
              -0.4707184433937073,
              0.29985862970352173,
              -0.1028626561164856,
              0.2543719410896301
            ],
            [
              0.06950849294662476,
              -0.061222076416015625,
              0.13868045806884766,
              0.024665892124176025
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            4
          ]
        },
        "model.bias": {
          "type": "torch.nn.parameter.Parameter",
          "contents": [
            0.18261408805847168,
            -0.19485050439834595,
            -0.03645437955856323
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 129,
          "function_name": "linear_models",
          "code": "logits = model(x)  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            0.6468130946159363,
            0.6430481672286987,
            0.42531490325927734
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 132,
          "function_name": "linear_models",
          "code": "cross_entropy = nn.CrossEntropyLoss()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 133,
          "function_name": "linear_models",
          "code": "loss = cross_entropy(logits, target_y)  # compare target_y and softmax(logits) @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 1.0325124263763428,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 134,
          "function_name": "linear_models",
          "code": "loss.backward()  # @inspect model.weight.grad model.bias.grad"
        }
      ],
      "env": {
        "model.weight.grad": {
          "type": "torch.Tensor",
          "contents": [
            [
              0.35745441913604736,
              0.7149088382720947,
              1.072363257408142,
              1.4298176765441895
            ],
            [
              -0.6438888311386108,
              -1.2877776622772217,
              -1.9316664934158325,
              -2.5755553245544434
            ],
            [
              0.28643444180488586,
              0.5728688836097717,
              0.85930335521698,
              1.1457377672195435
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            4
          ]
        },
        "model.bias.grad": {
          "type": "torch.Tensor",
          "contents": [
            0.35745441913604736,
            -0.6438888311386108,
            0.28643444180488586
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 137,
          "function_name": "linear_models",
          "code": "optimizer = torch.optim.SGD(model.parameters(), lr=0.1)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 138,
          "function_name": "linear_models",
          "code": "optimizer.step()  # Updates the parameters @inspect model.weight model.bias"
        }
      ],
      "env": {
        "model.weight": {
          "type": "torch.nn.parameter.Parameter",
          "contents": [
            [
              0.22188615798950195,
              -0.29218000173568726,
              -0.20416706800460815,
              0.09170269966125488
            ],
            [
              -0.40632957220077515,
              0.4286364018917084,
              0.09030399471521378,
              0.5119274854660034
            ],
            [
              0.04086504876613617,
              -0.1185089647769928,
              0.0527501218020916,
              -0.08990788459777832
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            4
          ]
        },
        "model.bias": {
          "type": "torch.nn.parameter.Parameter",
          "contents": [
            0.14686864614486694,
            -0.13046161830425262,
            -0.06509782373905182
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 141,
          "function_name": "linear_models",
          "code": "training_data = get_training_data()  # @inspect training_data @stepover @clear x target_y logits loss model.weight model.bias model.weight.grad model.bias.grad"
        }
      ],
      "env": {
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "deep_learning.Example",
              "contents": {
                "x": {
                  "type": "torch.Tensor",
                  "contents": [
                    1.0,
                    2.0,
                    0.0,
                    1.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    4
                  ]
                },
                "target_y": {
                  "type": "torch.Tensor",
                  "contents": [
                    0.0,
                    1.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "deep_learning.Example",
              "contents": {
                "x": {
                  "type": "torch.Tensor",
                  "contents": [
                    -1.0,
                    0.0,
                    2.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    4
                  ]
                },
                "target_y": {
                  "type": "torch.Tensor",
                  "contents": [
                    1.0,
                    0.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "deep_learning.Example",
              "contents": {
                "x": {
                  "type": "torch.Tensor",
                  "contents": [
                    0.0,
                    3.0,
                    1.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    4
                  ]
                },
                "target_y": {
                  "type": "torch.Tensor",
                  "contents": [
                    0.0,
                    0.0,
                    1.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        },
        "x": null,
        "target_y": null,
        "logits": null,
        "loss": null,
        "model.weight": null,
        "model.bias": null,
        "model.weight.grad": null,
        "model.bias.grad": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 165,
          "function_name": "train_model",
          "code": "def train_model(model: nn.Module,  # @inspect training_data num_steps learning_rate"
        }
      ],
      "env": {
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "deep_learning.Example",
              "contents": {
                "x": {
                  "type": "torch.Tensor",
                  "contents": [
                    1.0,
                    2.0,
                    0.0,
                    1.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    4
                  ]
                },
                "target_y": {
                  "type": "torch.Tensor",
                  "contents": [
                    0.0,
                    1.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "deep_learning.Example",
              "contents": {
                "x": {
                  "type": "torch.Tensor",
                  "contents": [
                    -1.0,
                    0.0,
                    2.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    4
                  ]
                },
                "target_y": {
                  "type": "torch.Tensor",
                  "contents": [
                    1.0,
                    0.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "deep_learning.Example",
              "contents": {
                "x": {
                  "type": "torch.Tensor",
                  "contents": [
                    0.0,
                    3.0,
                    1.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    4
                  ]
                },
                "target_y": {
                  "type": "torch.Tensor",
                  "contents": [
                    0.0,
                    0.0,
                    1.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        },
        "num_steps": {
          "type": "int",
          "contents": 80,
          "dtype": null,
          "shape": null
        },
        "learning_rate": {
          "type": "float",
          "contents": 0.1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 172,
          "function_name": "train_model",
          "code": "x = torch.stack([example.x for example in training_data])  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            [
              1.0,
              2.0,
              0.0,
              1.0
            ],
            [
              -1.0,
              0.0,
              2.0,
              0.0
            ],
            [
              0.0,
              3.0,
              1.0,
              0.0
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            4
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 173,
          "function_name": "train_model",
          "code": "target_y = torch.stack([example.target_y for example in training_data])  # @inspect target_y"
        }
      ],
      "env": {
        "target_y": {
          "type": "torch.Tensor",
          "contents": [
            [
              0.0,
              1.0,
              0.0
            ],
            [
              1.0,
              0.0,
              0.0
            ],
            [
              0.0,
              0.0,
              1.0
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 175,
          "function_name": "train_model",
          "code": "cross_entropy = nn.CrossEntropyLoss()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 177,
          "function_name": "train_model",
          "code": "losses: list[float] = []"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 178,
          "function_name": "train_model",
          "code": "optimizer = optimizer_class(model.parameters(), lr=learning_rate)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -0.12390249967575073,
              0.8324090242385864,
              -0.3511585593223572
            ],
            [
              -0.4833516478538513,
              0.4564759135246277,
              -0.00046262890100479126
            ],
            [
              -0.933838427066803,
              1.2457516193389893,
              -0.3678746223449707
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 1.3517507314682007,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      0.1874096393585205,
                      -0.31595349311828613,
                      -0.1532423049211502,
                      0.08412487059831619
                    ],
                    [
                      -0.3762446343898773,
                      0.3796619474887848,
                      0.03196289762854576,
                      0.525542676448822
                    ],
                    [
                      0.04525662213563919,
                      -0.04576100781559944,
                      0.06016645208001137,
                      -0.09594526886940002
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.16331689059734344,
                    -0.15871776640415192,
                    -0.05328992009162903
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -0.19705559313297272,
              0.7499041557312012,
              -0.19550058245658875
            ],
            [
              -0.33057737350463867,
              0.28145265579223633,
              0.021786361932754517
            ],
            [
              -0.9377859234809875,
              1.0122309923171997,
              -0.13040649890899658
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 1.1824523210525513,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      0.15460997819900513,
                      -0.3402476906776428,
                      -0.10544633120298386,
                      0.0768459215760231
                    ],
                    [
                      -0.34726759791374207,
                      0.3403657376766205,
                      -0.019664298743009567,
                      0.5401118993759155
                    ],
                    [
                      0.049079231917858124,
                      0.017829393967986107,
                      0.06399767100811005,
                      -0.10323554277420044
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.178313210606575,
                    -0.1813679188489914,
                    -0.045636095106601715
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -0.2707262635231018,
              0.6922077536582947,
              -0.06413361430168152
            ],
            [
              -0.18718944489955902,
              0.12657107412815094,
              0.033280014991760254
            ],
            [
              -0.9478762745857239,
              0.8200649619102478,
              0.0718497559428215
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 1.0487483739852905,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      0.12362243235111237,
                      -0.36437955498695374,
                      -0.060681167989969254,
                      0.06997144222259521
                    ],
                    [
                      -0.3193225562572479,
                      0.3101876378059387,
                      -0.06517837196588516,
                      0.5554383993148804
                    ],
                    [
                      0.05212174355983734,
                      0.07213936746120453,
                      0.06474658101797104,
                      -0.11168758571147919
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.19209082424640656,
                    -0.19893695414066315,
                    -0.041844677180051804
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -0.3430744409561157,
              0.6575541496276855,
              0.04286821559071541
            ],
            [
              -0.052893951535224915,
              -0.009971141815185547,
              0.03552674129605293
            ],
            [
              -0.961729109287262,
              0.6664475798606873,
              0.23931999504566193
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.9436447024345398,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      0.09449593722820282,
                      -0.3878400921821594,
                      -0.01881018839776516,
                      0.06355006247758865
                    ],
                    [
                      -0.29236099123954773,
                      0.28782907128334045,
                      -0.10539806634187698,
                      0.5713056325912476
                    ],
                    [
                      0.054286662489175797,
                      0.1179584339261055,
                      0.06309529393911362,
                      -0.12113343924283981
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.20483531057834625,
                    -0.21219506859779358,
                    -0.04133104160428047
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 4,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -0.4127988815307617,
              0.6424077749252319,
              0.1277390569448471
            ],
            [
              0.07271899282932281,
              -0.13063021004199982,
              0.030572887510061264
            ],
            [
              -0.9774951934814453,
              0.5458941459655762,
              0.37563955783843994
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.8599615097045898,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      0.06721225380897522,
                      -0.4103410840034485,
                      0.020305437967181206,
                      0.05758649855852127
                    ],
                    [
                      -0.2663556933403015,
                      0.27172404527664185,
                      -0.14117352664470673,
                      0.5875082015991211
                    ],
                    [
                      0.055565062910318375,
                      0.15656445920467377,
                      0.05975513905286789,
                      -0.13137246668338776
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.21666724979877472,
                    -0.2219652533531189,
                    -0.04339279606938362
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 5,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -0.47921615839004517,
              0.6426353454589844,
              0.19392871856689453
            ],
            [
              0.1900658756494522,
              -0.23795661330223083,
              0.02055242285132408
            ],
            [
              -0.9940506815910339,
              0.4520333409309387,
              0.4860557019710541
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.7918294072151184,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      0.04170723631978035,
                      -0.4317688047885895,
                      0.05680347606539726,
                      0.05205943062901497
                    ],
                    [
                      -0.24128840863704681,
                      0.26039767265319824,
                      -0.1732671707868576,
                      0.6038705110549927
                    ],
                    [
                      0.056002791970968246,
                      0.18931855261325836,
                      0.05535075068473816,
                      -0.14220768213272095
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.22766026854515076,
                    -0.22899161279201508,
                    -0.04735945537686348
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 6,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -0.5421106815338135,
              0.6543858051300049,
              0.24507276713848114
            ],
            [
              0.29955998063087463,
              -0.33423754572868347,
              0.007339254021644592
            ],
            [
              -1.0108426809310913,
              0.37893420457839966,
              0.5759469270706177
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.7350217700004578,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      0.017888201400637627,
                      -0.4521152079105377,
                      0.09082780033349991,
                      0.04693572223186493
                    ],
                    [
                      -0.21714036166667938,
                      0.25262385606765747,
                      -0.20231252908706665,
                      0.6202520132064819
                    ],
                    [
                      0.05567377433180809,
                      0.21743878722190857,
                      0.05037178471684456,
                      -0.15346549451351166
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.23786555230617523,
                    -0.2338889241218567,
                    -0.052667438983917236
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 7,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -0.6015409231185913,
              0.6744704246520996,
              0.28441840410232544
            ],
            [
              0.40163296461105347,
              -0.4213736057281494,
              -0.007597643882036209
            ],
            [
              -1.0276522636413574,
              0.3216701149940491,
              0.6500206589698792
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.6866569519042969,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.004353518132120371,
                      -0.47142499685287476,
                      0.12253235280513763,
                      0.04217900335788727
                    ],
                    [
                      -0.19388797879219055,
                      0.24744728207588196,
                      -0.22881852090358734,
                      0.6365452408790588
                    ],
                    [
                      0.05466310307383537,
                      0.24192513525485992,
                      0.045173220336437225,
                      -0.1650020182132721
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.24732838571071625,
                    -0.23714251816272736,
                    -0.05887667462229729
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 8,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -0.6576961278915405,
              0.7004093527793884,
              0.31463468074798584
            ],
            [
              0.49674659967422485,
              -0.5008915662765503,
              -0.02319333702325821
            ],
            [
              -1.0444141626358032,
              0.27638083696365356,
              0.71207195520401
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.6447836756706238,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.025133706629276276,
                      -0.48976409435272217,
                      0.15207965672016144,
                      0.03775398060679436
                    ],
                    [
                      -0.17150206863880157,
                      0.2441479116678238,
                      -0.2531898319721222,
                      0.6526704430580139
                    ],
                    [
                      0.05305737629532814,
                      0.2635636031627655,
                      0.03999722748994827,
                      -0.17670221626758575
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.2560954988002777,
                    -0.23912791907787323,
                    -0.06565839052200317
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 9,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -0.7108124494552612,
              0.7303363084793091,
              0.3378239870071411
            ],
            [
              0.5853885412216187,
              -0.5740055441856384,
              -0.03872131183743477
            ],
            [
              -1.0611170530319214,
              0.24012599885463715,
              0.7650296092033386
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.6080507636070251,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.04456908628344536,
                      -0.5072036385536194,
                      0.17963621020317078,
                      0.03362821415066719
                    ],
                    [
                      -0.14994874596595764,
                      0.24219192564487457,
                      -0.2757488489151001,
                      0.6685701608657837
                    ],
                    [
                      0.05093943327665329,
                      0.28295910358428955,
                      0.034999698400497437,
                      -0.18847616016864777
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.26421669125556946,
                    -0.2401336282491684,
                    -0.07277386635541916
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 10,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -0.7611315250396729,
              0.7628716230392456,
              0.35560762882232666
            ],
            [
              0.6680581569671631,
              -0.6416825652122498,
              -0.053713902831077576
            ],
            [
              -1.0777580738067627,
              0.21069331467151642,
              0.8111031651496887
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.5754902958869934,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.06277310848236084,
                      -0.5238124132156372,
                      0.20536719262599945,
                      0.029772616922855377
                    ],
                    [
                      -0.12919093668460846,
                      0.24118684232234955,
                      -0.29675421118736267,
                      0.6842041015625
                    ],
                    [
                      0.04838564619421959,
                      0.3005729615688324,
                      0.03027406334877014,
                      -0.20025452971458435
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.27174365520477295,
                    -0.2403811663389206,
                    -0.08005328476428986
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 11,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -0.8088816404342651,
              0.7970057129859924,
              0.36922377347946167
            ],
            [
              0.7452511787414551,
              -0.7046986818313599,
              -0.06789080798625946
            ],
            [
              -1.094326376914978,
              0.1864251345396042,
              0.8519396185874939
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.5463838577270508,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.07985326647758484,
                      -0.5396541953086853,
                      0.22943197190761566,
                      0.026161396875977516
                    ],
                    [
                      -0.10918987542390823,
                      0.24084539711475372,
                      -0.3164151906967163,
                      0.6995453238487244
                    ],
                    [
                      0.04546474665403366,
                      0.3167561888694763,
                      0.025870252400636673,
                      -0.2119845449924469
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.27872827649116516,
                    -0.24004106223583221,
                    -0.08737799525260925
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 12,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -0.8542720079421997,
              0.8320052027702332,
              0.37961459159851074
            ],
            [
              0.8174455165863037,
              -0.7636815905570984,
              -0.08110223710536957
            ],
            [
              -1.1108022928237915,
              0.16607995331287384,
              0.8887608051300049
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.5201802253723145,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.09590957313776016,
                      -0.5547868013381958,
                      0.25198087096214294,
                      0.02277175895869732
                    ],
                    [
                      -0.08990632742643356,
                      0.2409580498933792,
                      -0.33490270376205444,
                      0.7145768404006958
                    ],
                    [
                      0.04223750904202461,
                      0.33177614212036133,
                      0.021808864548802376,
                      -0.22362643480300903
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.2852208614349365,
                    -0.23924502730369568,
                    -0.09466661512851715
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 13,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -0.8974906206130981,
              0.8673415184020996,
              0.3874967694282532
            ],
            [
              0.8850921988487244,
              -0.8191441297531128,
              -0.09328639507293701
            ],
            [
              -1.1271586418151855,
              0.1487264335155487,
              0.9224706888198853
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.4964461028575897,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.1110338419675827,
                      -0.5692623853683472,
                      0.27315327525138855,
                      0.019583556801080704
                    ],
                    [
                      -0.07130157202482224,
                      0.24137245118618011,
                      -0.3523576259613037,
                      0.729289174079895
                    ],
                    [
                      0.03875702619552612,
                      0.3458373546600342,
                      0.018091371282935143,
                      -0.23515057563781738
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.2912689745426178,
                    -0.23809517920017242,
                    -0.10186459124088287
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 14,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -0.9387060403823853,
              0.9026373624801636,
              0.3934165835380554
            ],
            [
              0.9486093521118164,
              -0.8715088367462158,
              -0.10443887114524841
            ],
            [
              -1.1433649063110352,
              0.13366453349590302,
              0.953738808631897
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.47483396530151367,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.12530957162380219,
                      -0.5831279754638672,
                      0.2930767238140106,
                      0.016578951850533485
                    ],
                    [
                      -0.05333805829286575,
                      0.24197830259799957,
                      -0.3688969910144806,
                      0.7436784505844116
                    ],
                    [
                      0.03506924584507942,
                      0.35909709334373474,
                      0.014707263559103012,
                      -0.2465352565050125
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.2969166934490204,
                    -0.23667101562023163,
                    -0.10893648117780685
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 15,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -0.9780699014663696,
              0.9376259446144104,
              0.39779168367385864
            ],
            [
              1.0083796977996826,
              -0.9211269617080688,
              -0.11459119617938995
            ],
            [
              -1.1593904495239258,
              0.12036691606044769,
              0.9830619692802429
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.45506009459495544,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.13881221413612366,
                      -0.5964258909225464,
                      0.3118669092655182,
                      0.013742108829319477
                    ],
                    [
                      -0.03597983345389366,
                      0.24269624054431915,
                      -0.384618878364563,
                      0.7577449083328247
                    ],
                    [
                      0.031213661655783653,
                      0.37167707085609436,
                      0.011638956144452095,
                      -0.25776487588882446
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3022042214870453,
                    -0.23503465950489044,
                    -0.11586037278175354
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 16,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.015717625617981,
              0.972122848033905,
              0.40094253420829773
            ],
            [
              1.06475031375885,
              -0.9682925939559937,
              -0.12379612028598785
            ],
            [
              -1.1752065420150757,
              0.10843519866466522,
              1.0108098983764648
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.436890572309494,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.1516096293926239,
                      -0.6091944575309753,
                      0.32962799072265625,
                      0.011058930307626724
                    ],
                    [
                      -0.019192811101675034,
                      0.24346956610679626,
                      -0.3996060788631439,
                      0.7714917063713074
                    ],
                    [
                      0.027224058285355568,
                      0.3836723268032074,
                      0.008865087293088436,
                      -0.26882848143577576
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3071678876876831,
                    -0.23323485255241394,
                    -0.12262384593486786
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 17,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.0517717599868774,
              1.0060031414031982,
              0.4031163454055786
            ],
            [
              1.118033528327942,
              -1.013254165649414,
              -0.13211773335933685
            ],
            [
              -1.190787434577942,
              0.09756773710250854,
              1.037258267402649
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.4201304018497467,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.16376273334026337,
                      -0.6214684844017029,
                      0.34645339846611023,
                      0.008516834117472172
                    ],
                    [
                      -0.0029448887798935175,
                      0.24425825476646423,
                      -0.4139291048049927,
                      0.7849241495132446
                    ],
                    [
                      0.023129237815737724,
                      0.39515766501426697,
                      0.006362702697515488,
                      -0.2797188460826874
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3118401765823364,
                    -0.2313099354505539,
                    -0.12922105193138123
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 18,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.086342692375183,
              1.0391857624053955,
              0.4045046865940094
            ],
            [
              1.1685097217559814,
              -1.0562232732772827,
              -0.13962487876415253
            ],
            [
              -1.2061117887496948,
              0.08753569424152374,
              1.0626145601272583
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.40461549162864685,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.17532607913017273,
                      -0.6332796216011047,
                      0.36242663860321045,
                      0.006104553118348122
                    ],
                    [
                      0.012794001027941704,
                      0.24503448605537415,
                      -0.42764830589294434,
                      0.7980490326881409
                    ],
                    [
                      0.018953688442707062,
                      0.4061925709247589,
                      0.00410864595323801,
                      -0.2904314398765564
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3162500858306885,
                    -0.22929024696350098,
                    -0.1356506645679474
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 19,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.1195306777954102,
              1.0716217756271362,
              0.4052567183971405
            ],
            [
              1.2164294719696045,
              -1.0973808765411377,
              -0.14638705551624298
            ],
            [
              -1.22116219997406,
              0.07816493511199951,
              1.0870357751846313
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.39020684361457825,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.18634852766990662,
                      -0.6446568369865417,
                      0.3776223659515381,
                      0.003811976872384548
                    ],
                    [
                      0.028051938861608505,
                      0.245779350399971,
                      -0.44081583619117737,
                      0.8108741044998169
                    ],
                    [
                      0.014718194492161274,
                      0.41682490706443787,
                      0.0020804398227483034,
                      -0.3009639084339142
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3204233646392822,
                    -0.22719982266426086,
                    -0.14191436767578125
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 20,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.151426911354065,
              1.1032849550247192,
              0.4054896831512451
            ],
            [
              1.2620166540145874,
              -1.1368833780288696,
              -0.15247167646884918
            ],
            [
              -1.2359247207641602,
              0.06932240724563599,
              1.1106407642364502
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.3767859935760498,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.19687384366989136,
                      -0.6556265950202942,
                      0.39210712909698486,
                      0.0016300074057653546
                    ],
                    [
                      0.04285508021712303,
                      0.24648042023181915,
                      -0.4534769654273987,
                      0.8234077095985413
                    ],
                    [
                      0.010440371930599213,
                      0.42709359526634216,
                      0.00025679395184852183,
                      -0.31131553649902344
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.32438281178474426,
                    -0.22505779564380646,
                    -0.1480158418416977
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 21,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.1821143627166748,
              1.1341657638549805,
              0.4052961468696594
            ],
            [
              1.3054709434509277,
              -1.174866795539856,
              -0.15794262290000916
            ],
            [
              -1.2503899335861206,
              0.06090651452541351,
              1.1335216760635376
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.36425113677978516,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.20694129168987274,
                      -0.6662132143974304,
                      0.40594038367271423,
                      -0.00044956180499866605
                    ],
                    [
                      0.05722775682806969,
                      0.24712997674942017,
                      -0.4656713008880615,
                      0.835658609867096
                    ],
                    [
                      0.006135135423392057,
                      0.4370306432247162,
                      -0.0013821363681927323,
                      -0.32148686051368713
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.32814863324165344,
                    -0.22287943959236145,
                    -0.15396000444889069
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 22,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.211668610572815,
              1.1642669439315796,
              0.4047495126724243
            ],
            [
              1.3469706773757935,
              -1.2114497423171997,
              -0.16285941004753113
            ],
            [
              -1.2645505666732788,
              0.052839189767837524,
              1.155749797821045
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.352514386177063,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.21658608317375183,
                      -0.6764390468597412,
                      0.41917523741722107,
                      -0.00243414961732924
                    ],
                    [
                      0.07119258493185043,
                      0.24772368371486664,
                      -0.4774336814880371,
                      0.8476356267929077
                    ],
                    [
                      0.001815102412365377,
                      0.4466627836227417,
                      -0.0028546147514134645,
                      -0.3314793109893799
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.33173868060112,
                    -0.220676988363266,
                    -0.1597525179386139
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 23,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.2401596307754517,
              1.1935986280441284,
              0.4039088189601898
            ],
            [
              1.386675238609314,
              -1.246737003326416,
              -0.16727684438228607
            ],
            [
              -1.2784031629562378,
              0.04506036639213562,
              1.1773812770843506
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.3414996564388275,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.22583989799022675,
                      -0.6863248348236084,
                      0.43185919523239136,
                      -0.004330477211624384
                    ],
                    [
                      0.0847705751657486,
                      0.24825960397720337,
                      -0.4887949228286743,
                      0.8593477010726929
                    ],
                    [
                      -0.0025090668350458145,
                      0.45601263642311096,
                      -0.004177319351583719,
                      -0.341295063495636
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3351688086986542,
                    -0.21846024692058563,
                    -0.16539938747882843
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 24,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.2676512002944946,
              1.222177267074585,
              0.40282177925109863
            ],
            [
              1.4247270822525024,
              -1.280820608139038,
              -0.17124496400356293
            ],
            [
              -1.2919464111328125,
              0.03752364218235016,
              1.1984611749649048
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.3311402499675751,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.2347312718629837,
                      -0.6958895921707153,
                      0.4440348148345947,
                      -0.006144646089524031
                    ],
                    [
                      0.09798125922679901,
                      0.24873751401901245,
                      -0.4997824728488922,
                      0.8708035945892334
                    ],
                    [
                      -0.006828379351645708,
                      0.4650994539260864,
                      -0.005365388002246618,
                      -0.35093680024147034
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3384530544281006,
                    -0.2162371128797531,
                    -0.17090676724910736
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 25,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.2942020893096924,
              1.2500227689743042,
              0.4015269875526428
            ],
            [
              1.4612540006637573,
              -1.3137832880020142,
              -0.17480915784835815
            ],
            [
              -1.3051810264587402,
              0.03019295632839203,
              1.2190262079238892
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.3213779926300049,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.24328595399856567,
                      -0.7051509618759155,
                      0.4557403028011322,
                      -0.00788220763206482
                    ],
                    [
                      0.11084281653165817,
                      0.2491583377122879,
                      -0.5104208588600159,
                      0.8820119500160217
                    ],
                    [
                      -0.011135258711874485,
                      0.47393998503685,
                      -0.006432502064853907,
                      -0.36040759086608887
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3416038751602173,
                    -0.214013934135437,
                    -0.17628076672554016
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 26,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.3198662996292114,
              1.2771575450897217,
              0.4000563323497772
            ],
            [
              1.4963704347610474,
              -1.3456984758377075,
              -0.1780105084180832
            ],
            [
              -1.3181085586547852,
              0.02304023504257202,
              1.2391066551208496
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.3121614158153534,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.25152722001075745,
                      -0.7141252756118774,
                      0.4670100212097168,
                      -0.00954822264611721
                    ],
                    [
                      0.1233721449971199,
                      0.24952378869056702,
                      -0.5207321047782898,
                      0.8929811716079712
                    ],
                    [
                      -0.015423333272337914,
                      0.48254886269569397,
                      -0.007390979677438736,
                      -0.369710773229599
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3446323275566101,
                    -0.211795836687088,
                    -0.18152731657028198
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 27,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.344693660736084,
              1.3036051988601685,
              0.3984363079071045
            ],
            [
              1.530179500579834,
              -1.3766322135925293,
              -0.1808859407901764
            ],
            [
              -1.3307335376739502,
              0.01604345440864563,
              1.258728265762329
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.30344507098197937,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.2594761550426483,
                      -0.7228277325630188,
                      0.4778749346733093,
                      -0.011147313751280308
                    ],
                    [
                      0.1355849951505661,
                      0.24983611702919006,
                      -0.5307360887527466,
                      0.9037193655967712
                    ],
                    [
                      -0.019687267020344734,
                      0.49093902111053467,
                      -0.008251899853348732,
                      -0.37884989380836487
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.34754830598831177,
                    -0.209586963057518,
                    -0.18665216863155365
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 28,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.3687305450439453,
              1.3293895721435547,
              0.39668869972229004
            ],
            [
              1.562774419784546,
              -1.4066441059112549,
              -0.18346869945526123
            ],
            [
              -1.34306001663208,
              0.00918532907962799,
              1.277912974357605
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.29518863558769226,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.2671518921852112,
                      -0.7312724590301514,
                      0.48836296796798706,
                      -0.012683709152042866
                    ],
                    [
                      0.1474960744380951,
                      0.2500978708267212,
                      -0.5404508113861084,
                      0.914234459400177
                    ],
                    [
                      -0.023922599852085114,
                      0.4991220235824585,
                      -0.009025201201438904,
                      -0.38782861828804016
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.35036060214042664,
                    -0.20739062130451202,
                    -0.1916608065366745
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 29,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.3920199871063232,
              1.3545355796813965,
              0.3948320150375366
            ],
            [
              1.594238519668579,
              -1.4357883930206299,
              -0.1857886016368866
            ],
            [
              -1.3550937175750732,
              0.002452179789543152,
              1.2966800928115845
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.28735610842704773,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.27457186579704285,
                      -0.7394726276397705,
                      0.49849945306777954,
                      -0.014161285012960434
                    ],
                    [
                      0.15911908447742462,
                      0.2503117322921753,
                      -0.5498927235603333,
                      0.9245340824127197
                    ],
                    [
                      -0.028125625103712082,
                      0.5071083307266235,
                      -0.009719794616103172,
                      -0.39665067195892334
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.35307711362838745,
                    -0.20520949363708496,
                    -0.19655843079090118
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 30,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.4146013259887695,
              1.3790671825408936,
              0.39288192987442017
            ],
            [
              1.624647855758667,
              -1.4641140699386597,
              -0.18787239491939545
            ],
            [
              -1.3668413162231445,
              -0.004167020320892334,
              1.3150466680526733
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.27991530299186707,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.28175196051597595,
                      -0.7474403977394104,
                      0.5083073377609253,
                      -0.015583601780235767
                    ],
                    [
                      0.1704668402671814,
                      0.2504804730415344,
                      -0.559076726436615,
                      0.9346255660057068
                    ],
                    [
                      -0.032293278723955154,
                      0.5149073600769043,
                      -0.010343668051064014,
                      -0.40531980991363525
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3557048738002777,
                    -0.20304572582244873,
                    -0.20134995877742767
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 31,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.436511516571045,
              1.4030076265335083,
              0.3908516764640808
            ],
            [
              1.654071569442749,
              -1.4916659593582153,
              -0.1897440105676651
            ],
            [
              -1.3783090114593506,
              -0.01068103313446045,
              1.3330284357070923
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.27283716201782227,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.2887066900730133,
                      -0.7551872134208679,
                      0.5178074240684509,
                      -0.016953933984041214
                    ],
                    [
                      0.18155135214328766,
                      0.25060683488845825,
                      -0.568016529083252,
                      0.9445158839225769
                    ],
                    [
                      -0.03642304614186287,
                      0.522527813911438,
                      -0.010903979651629925,
                      -0.41383981704711914
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.358250230550766,
                    -0.20090100169181824,
                    -0.20604003965854645
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 32,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.4577847719192505,
              1.4263797998428345,
              0.3887527585029602
            ],
            [
              1.6825717687606812,
              -1.518485426902771,
              -0.19142495095729828
            ],
            [
              -1.389503836631775,
              -0.017097026109695435,
              1.3506394624710083
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.2660958170890808,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.2954493463039398,
                      -0.7627237439155579,
                      0.5270187854766846,
                      -0.018275298178195953
                    ],
                    [
                      0.19238385558128357,
                      0.25069352984428406,
                      -0.5767247080802917,
                      0.9542118310928345
                    ],
                    [
                      -0.040512893348932266,
                      0.5299776196479797,
                      -0.011407134123146534,
                      -0.42221441864967346
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.36071890592575073,
                    -0.19877667725086212,
                    -0.2106330394744873
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 33,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.4784531593322754,
              1.449205994606018,
              0.38659489154815674
            ],
            [
              1.7102057933807373,
              -1.5446100234985352,
              -0.19293440878391266
            ],
            [
              -1.4004335403442383,
              -0.023420825600624084,
              1.3678927421569824
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.2596674859523773,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.30199211835861206,
                      -0.7700599431991577,
                      0.5359587073326111,
                      -0.01955047994852066
                    ],
                    [
                      0.20297491550445557,
                      0.25074318051338196,
                      -0.5852128863334656,
                      0.96371990442276
                    ],
                    [
                      -0.04456118121743202,
                      0.5372641682624817,
                      -0.011858880519866943,
                      -0.4304473102092743
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3631160259246826,
                    -0.19667378067970276,
                    -0.21513307094573975
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 34,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.4985463619232178,
              1.4715074300765991,
              0.38438671827316284
            ],
            [
              1.737025499343872,
              -1.570074439048767,
              -0.1942896544933319
            ],
            [
              -1.4111049175262451,
              -0.029657095670700073,
              1.3848005533218384
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.253530889749527,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.3083462119102478,
                      -0.7772051692008972,
                      0.5446430444717407,
                      -0.020782049745321274
                    ],
                    [
                      0.21333444118499756,
                      0.25075823068618774,
                      -0.5934917330741882,
                      0.9730463027954102
                    ],
                    [
                      -0.04856662079691887,
                      0.544394314289093,
                      -0.012264364399015903,
                      -0.43854212760925293
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3654462695121765,
                    -0.19459311664104462,
                    -0.21954399347305298
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 35,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.518092155456543,
              1.4933041334152222,
              0.38213586807250977
            ],
            [
              1.7630786895751953,
              -1.594910979270935,
              -0.19550609588623047
            ],
            [
              -1.4215261936187744,
              -0.03581015765666962,
              1.4013745784759521
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.24766665697097778,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.3145219087600708,
                      -0.7841681241989136,
                      0.5530863404273987,
                      -0.02197239175438881
                    ],
                    [
                      0.2234717607498169,
                      0.2507410943508148,
                      -0.6015712022781372,
                      0.9821969866752625
                    ],
                    [
                      -0.05252822861075401,
                      0.5513744354248047,
                      -0.012628201395273209,
                      -0.4465024471282959
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3677138686180115,
                    -0.19253526628017426,
                    -0.2238694429397583
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 36,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.5371167659759521,
              1.5146156549453735,
              0.37984877824783325
            ],
            [
              1.7884085178375244,
              -1.6191494464874268,
              -0.196597620844841
            ],
            [
              -1.431704044342041,
              -0.04188321530818939,
              1.4176256656646729
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.24205704033374786,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.3205287456512451,
                      -0.7909570336341858,
                      0.5613019466400146,
                      -0.023123713210225105
                    ],
                    [
                      0.23339563608169556,
                      0.2506939768791199,
                      -0.6094604730606079,
                      0.9911776185035706
                    ],
                    [
                      -0.05644527077674866,
                      0.5582104325294495,
                      -0.012954536825418472,
                      -0.45433175563812256
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3699226379394531,
                    -0.1905006617307663,
                    -0.2281128168106079
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 37,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.555643916130066,
              1.5354605913162231,
              0.3775310516357422
            ],
            [
              1.8130552768707275,
              -1.6428171396255493,
              -0.1975766122341156
            ],
            [
              -1.4416465759277344,
              -0.04787920415401459,
              1.4335639476776123
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.2366858869791031,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.3263755142688751,
                      -0.7975795865058899,
                      0.5693021416664124,
                      -0.024238064885139465
                    ],
                    [
                      0.24311436712741852,
                      0.25061899423599243,
                      -0.617168128490448,
                      0.9999937415122986
                    ],
                    [
                      -0.06031723693013191,
                      0.564907968044281,
                      -0.013247091323137283,
                      -0.4620335102081299
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3720760941505432,
                    -0.18848960101604462,
                    -0.23227733373641968
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 38,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.5736966133117676,
              1.555856466293335,
              0.37518787384033203
            ],
            [
              1.8370559215545654,
              -1.6659401655197144,
              -0.19845427572727203
            ],
            [
              -1.4513607025146484,
              -0.05380074679851532,
              1.4491994380950928
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.23153842985630035,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.33207035064697266,
                      -0.8040429949760437,
                      0.5770983099937439,
                      -0.025317350402474403
                    ],
                    [
                      0.25263577699661255,
                      0.2505181133747101,
                      -0.6247021555900574,
                      1.008650541305542
                    ],
                    [
                      -0.06414380669593811,
                      0.5714722275733948,
                      -0.013509203679859638,
                      -0.4696110188961029
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.37417739629745483,
                    -0.18650223314762115,
                    -0.23636601865291595
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 39,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.5912961959838867,
              1.5758202075958252,
              0.3728235960006714
            ],
            [
              1.8604443073272705,
              -1.688542366027832,
              -0.19924062490463257
            ],
            [
              -1.460853099822998,
              -0.05965001881122589,
              1.4645415544509888
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.2266010046005249,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.3376207947731018,
                      -0.8103541135787964,
                      0.5847008228302002,
                      -0.026363346725702286
                    ],
                    [
                      0.2619672417640686,
                      0.25039321184158325,
                      -0.632070004940033,
                      1.017153024673462
                    ],
                    [
                      -0.06792481243610382,
                      0.5779082179069519,
                      -0.013743877410888672,
                      -0.4770675301551819
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.376229465007782,
                    -0.18453863263130188,
                    -0.24038170278072357
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 40,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.6084628105163574,
              1.5953681468963623,
              0.37044239044189453
            ],
            [
              1.8832519054412842,
              -1.7106459140777588,
              -0.1999446451663971
            ],
            [
              -1.4701318740844727,
              -0.06542900204658508,
              1.4795989990234375
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.22186124324798584,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.34303387999534607,
                      -0.8165193200111389,
                      0.5921193957328796,
                      -0.02737770415842533
                    ],
                    [
                      0.2711157500743866,
                      0.25024598836898804,
                      -0.6392786502838135,
                      1.0255060195922852
                    ],
                    [
                      -0.07166023552417755,
                      0.5842206478118896,
                      -0.01395381335169077,
                      -0.4844062328338623
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.37823498249053955,
                    -0.1825987994670868,
                    -0.24432706832885742
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 41,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.6252151727676392,
              1.614514946937561,
              0.3680477738380432
            ],
            [
              1.9055076837539673,
              -1.7322719097137451,
              -0.20057445764541626
            ],
            [
              -1.4792035818099976,
              -0.07113948464393616,
              1.494381070137024
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.21730749309062958,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.34831610321998596,
                      -0.8225446343421936,
                      0.5993630290031433,
                      -0.028361966833472252
                    ],
                    [
                      0.2800878882408142,
                      0.2500780522823334,
                      -0.6463346481323242,
                      1.0337141752243042
                    ],
                    [
                      -0.07535017281770706,
                      0.5904139280319214,
                      -0.014141448773443699,
                      -0.4916301667690277
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.38019639253616333,
                    -0.18068264424800873,
                    -0.24820463359355927
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 42,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.641571044921875,
              1.6332755088806152,
              0.36564284563064575
            ],
            [
              1.9272384643554688,
              -1.7534399032592773,
              -0.20113736391067505
            ],
            [
              -1.488074541091919,
              -0.07678316533565521,
              1.508895754814148
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.21292924880981445,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.3534735441207886,
                      -0.8284357786178589,
                      0.606440007686615,
                      -0.029317576438188553
                    ],
                    [
                      0.28888997435569763,
                      0.24989092350006104,
                      -0.653244137763977,
                      1.041782021522522
                    ],
                    [
                      -0.07899481803178787,
                      0.5964922308921814,
                      -0.014308972284197807,
                      -0.49874234199523926
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3821159601211548,
                    -0.17879004776477814,
                    -0.2520168125629425
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 43,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.657546877861023,
              1.6516637802124023,
              0.36323049664497375
            ],
            [
              1.9484695196151733,
              -1.7741683721542358,
              -0.20163993537425995
            ],
            [
              -1.4967511892318726,
              -0.08236141502857208,
              1.52315092086792
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.20871658623218536,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.35851186513900757,
                      -0.8341981172561646,
                      0.6133581399917603,
                      -0.030245881527662277
                    ],
                    [
                      0.297527939081192,
                      0.24968598783016205,
                      -0.6600128412246704,
                      1.0497136116027832
                    ],
                    [
                      -0.08259444683790207,
                      0.6024595499038696,
                      -0.014458360150456429,
                      -0.5057456493377686
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.38399574160575867,
                    -0.1769208163022995,
                    -0.255765825510025
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 44,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.6731581687927246,
              1.6696927547454834,
              0.360813170671463
            ],
            [
              1.969223976135254,
              -1.7944743633270264,
              -0.2020881026983261
            ],
            [
              -1.505240559577942,
              -0.08787570893764496,
              1.5371544361114502
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.20466041564941406,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.36343637108802795,
                      -0.8398367762565613,
                      0.6201245784759521,
                      -0.031148146837949753
                    ],
                    [
                      0.30600741505622864,
                      0.24946455657482147,
                      -0.6666462421417236,
                      1.0575131177902222
                    ],
                    [
                      -0.0861494243144989,
                      0.6083196401596069,
                      -0.014591396786272526,
                      -0.5126429200172424
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3858376741409302,
                    -0.1750747412443161,
                    -0.25945383310317993
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 45,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.6884204149246216,
              1.6873749494552612,
              0.358393132686615
            ],
            [
              1.98952317237854,
              -1.814374566078186,
              -0.20248720049858093
            ],
            [
              -1.5135480165481567,
              -0.09332732856273651,
              1.5509135723114014
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.20075243711471558,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.3682520091533661,
                      -0.8453565239906311,
                      0.6267460584640503,
                      -0.03202555328607559
                    ],
                    [
                      0.31433379650115967,
                      0.2492278516292572,
                      -0.6731494665145874,
                      1.065184473991394
                    ],
                    [
                      -0.0896601602435112,
                      0.6140760779380798,
                      -0.014709689654409885,
                      -0.5194368362426758
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3876435160636902,
                    -0.17325156927108765,
                    -0.2630828619003296
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 46,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.7033469676971436,
              1.7047224044799805,
              0.3559722900390625
            ],
            [
              2.009387731552124,
              -1.8338842391967773,
              -0.2028420865535736
            ],
            [
              -1.5216801166534424,
              -0.09871751070022583,
              1.564435601234436
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.1969846487045288,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.37296342849731445,
                      -0.850761890411377,
                      0.6332288980484009,
                      -0.032879214733839035
                    ],
                    [
                      0.3225121796131134,
                      0.24897697567939758,
                      -0.6795272827148438,
                      1.072731375694275
                    ],
                    [
                      -0.09312711656093597,
                      0.6197323203086853,
                      -0.014814688824117184,
                      -0.5261300802230835
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3894149363040924,
                    -0.17145103216171265,
                    -0.2666548192501068
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 47,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.7179516553878784,
              1.7217464447021484,
              0.35355260968208313
            ],
            [
              2.028836250305176,
              -1.853017807006836,
              -0.20315708220005035
            ],
            [
              -1.52964186668396,
              -0.10404735803604126,
              1.5777273178100586
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.19334982335567474,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.37757498025894165,
                      -0.8560572266578674,
                      0.6395789384841919,
                      -0.03371017426252365
                    ],
                    [
                      0.33054742217063904,
                      0.24871300160884857,
                      -0.6857842803001404,
                      1.0801573991775513
                    ],
                    [
                      -0.09655079990625381,
                      0.6252915859222412,
                      -0.014907711185514927,
                      -0.5327252149581909
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3911534249782562,
                    -0.16967283189296722,
                    -0.27017152309417725
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 48,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.7322460412979126,
              1.7384580373764038,
              0.35113561153411865
            ],
            [
              2.0478861331939697,
              -1.8717888593673706,
              -0.20343613624572754
            ],
            [
              -1.5374393463134766,
              -0.10931812226772308,
              1.5907955169677734
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.18984119594097137,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.3820907473564148,
                      -0.8612465858459473,
                      0.6458017230033875,
                      -0.034519411623477936
                    ],
                    [
                      0.33844414353370667,
                      0.24843689799308777,
                      -0.6919248104095459,
                      1.0874661207199097
                    ],
                    [
                      -0.0999317541718483,
                      0.6307570338249207,
                      -0.014989947900176048,
                      -0.5392246842384338
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.39286044239997864,
                    -0.1679166555404663,
                    -0.2736347019672394
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 49,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.7462430000305176,
              1.7548673152923584,
              0.348722904920578
            ],
            [
              2.066554546356201,
              -1.8902103900909424,
              -0.20368283987045288
            ],
            [
              -1.5450775623321533,
              -0.11453080177307129,
              1.6036463975906372
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.18645232915878296,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.3865146040916443,
                      -0.8663337826728821,
                      0.651902437210083,
                      -0.035307854413986206
                    ],
                    [
                      0.34620678424835205,
                      0.248149573802948,
                      -0.6979529857635498,
                      1.094660758972168
                    ],
                    [
                      -0.10327055305242538,
                      0.6361315846443176,
                      -0.01506247278302908,
                      -0.545630931854248
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3945372998714447,
                    -0.16618217527866364,
                    -0.2770460247993469
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 50,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.7599526643753052,
              1.7709845304489136,
              0.3463156819343567
            ],
            [
              2.0848567485809326,
              -1.908294916152954,
              -0.20390042662620544
            ],
            [
              -1.552561640739441,
              -0.11968643963336945,
              1.616286277770996
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.18317733705043793,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.39085012674331665,
                      -0.8713225722312927,
                      0.6578859090805054,
                      -0.0360763743519783
                    ],
                    [
                      0.35383954644203186,
                      0.2478518784046173,
                      -0.7038726210594177,
                      1.1017446517944336
                    ],
                    [
                      -0.10656779259443283,
                      0.6414180397987366,
                      -0.015126260928809643,
                      -0.551946222782135
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3961852192878723,
                    -0.16446906328201294,
                    -0.28040704131126404
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 51,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.7733864784240723,
              1.7868187427520752,
              0.34391501545906067
            ],
            [
              2.10280704498291,
              -1.926053762435913,
              -0.20409177243709564
            ],
            [
              -1.559896469116211,
              -0.12478601932525635,
              1.6287208795547485
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.18001073598861694,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.39510077238082886,
                      -0.8762164115905762,
                      0.6637566685676575,
                      -0.036825791001319885
                    ],
                    [
                      0.3613464832305908,
                      0.24754460155963898,
                      -0.7096874713897705,
                      1.1087207794189453
                    ],
                    [
                      -0.10982408374547958,
                      0.6466191411018372,
                      -0.015182191506028175,
                      -0.558172881603241
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3978053629398346,
                    -0.16277697682380676,
                    -0.2837192714214325
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 52,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.786553978919983,
              1.8023794889450073,
              0.34152206778526306
            ],
            [
              2.120419502258301,
              -1.9434983730316162,
              -0.20425957441329956
            ],
            [
              -1.5670872926712036,
              -0.12983062863349915,
              1.6409560441970825
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.1769472360610962,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.3992697298526764,
                      -0.8810186386108398,
                      0.6695190668106079,
                      -0.037556879222393036
                    ],
                    [
                      0.36873140931129456,
                      0.2472284883260727,
                      -0.7154009938240051,
                      1.1155920028686523
                    ],
                    [
                      -0.11304005235433578,
                      0.6517374515533447,
                      -0.015231062658131123,
                      -0.5643130540847778
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3993988037109375,
                    -0.16110557317733765,
                    -0.2869841158390045
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 53,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.7994651794433594,
              1.8176748752593994,
              0.3391377031803131
            ],
            [
              2.137706756591797,
              -1.9606389999389648,
              -0.20440618693828583
            ],
            [
              -1.5741380453109741,
              -0.1348211169242859,
              1.6529972553253174
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.17398212850093842,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.4033600389957428,
                      -0.8857323527336121,
                      0.6751771569252014,
                      -0.03827037289738655
                    ],
                    [
                      0.37599802017211914,
                      0.24690420925617218,
                      -0.721016526222229,
                      1.1223613023757935
                    ],
                    [
                      -0.11621632426977158,
                      0.6567754745483398,
                      -0.01527359988540411,
                      -0.5703688859939575
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.4009665548801422,
                    -0.15945450961589813,
                    -0.29020291566848755
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 54,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.8121286630630493,
              1.83271324634552,
              0.33676284551620483
            ],
            [
              2.1546809673309326,
              -1.9774855375289917,
              -0.20453378558158875
            ],
            [
              -1.581053376197815,
              -0.1397583931684494,
              1.6648499965667725
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.17111064493656158,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.4073745906352997,
                      -0.8903605937957764,
                      0.6807347536087036,
                      -0.038966964930295944
                    ],
                    [
                      0.38314980268478394,
                      0.24657240509986877,
                      -0.7265372276306152,
                      1.1290314197540283
                    ],
                    [
                      -0.11935355514287949,
                      0.6617355346679688,
                      -0.015310465358197689,
                      -0.5763424038887024
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.40250957012176514,
                    -0.15782342851161957,
                    -0.29337701201438904
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 55,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.82455313205719,
              1.847502589225769,
              0.3343981206417084
            ],
            [
              2.171353816986084,
              -1.99404776096344,
              -0.20464438199996948
            ],
            [
              -1.5878374576568604,
              -0.1446434110403061,
              1.6765191555023193
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.168328657746315,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.4113161265850067,
                      -0.8949062824249268,
                      0.686195433139801,
                      -0.039647310972213745
                    ],
                    [
                      0.39019015431404114,
                      0.24623367190361023,
                      -0.7319661378860474,
                      1.135604977607727
                    ],
                    [
                      -0.12245238572359085,
                      0.6666199564933777,
                      -0.015342253260314465,
                      -0.58223557472229
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.4040287435054779,
                    -0.1562119871377945,
                    -0.2965076267719269
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 56,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.8367472887039185,
              1.8620504140853882,
              0.3320443332195282
            ],
            [
              2.1877357959747314,
              -2.0103344917297363,
              -0.2047397494316101
            ],
            [
              -1.5944947004318237,
              -0.14947713911533356,
              1.6880099773406982
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.16563206911087036,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.41518718004226685,
                      -0.8993720412254333,
                      0.6915626525878906,
                      -0.0403120294213295
                    ],
                    [
                      0.3971222937107086,
                      0.24588856101036072,
                      -0.7373061180114746,
                      1.1420844793319702
                    ],
                    [
                      -0.1255134642124176,
                      0.6714308261871338,
                      -0.015369509346783161,
                      -0.588050365447998
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.4055249094963074,
                    -0.15461982786655426,
                    -0.2995959520339966
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 57,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.8487184047698975,
              1.8763641119003296,
              0.32970190048217773
            ],
            [
              2.2038373947143555,
              -2.0263543128967285,
              -0.20482149720191956
            ],
            [
              -1.6010284423828125,
              -0.1542602926492691,
              1.699326992034912
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.1630171239376068,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.41899022459983826,
                      -0.903760552406311,
                      0.6968396902084351,
                      -0.04096171259880066
                    ],
                    [
                      0.4039493203163147,
                      0.24553759396076202,
                      -0.7425599098205566,
                      1.1484724283218384
                    ],
                    [
                      -0.12853743135929108,
                      0.676170289516449,
                      -0.015392722561955452,
                      -0.5937886238098145
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.406998872756958,
                    -0.1530466228723526,
                    -0.30264315009117126
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 58,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.8604741096496582,
              1.8904502391815186,
              0.32737138867378235
            ],
            [
              2.219668388366699,
              -2.0421156883239746,
              -0.2048911601305008
            ],
            [
              -1.60744309425354,
              -0.15899373590946198,
              1.7104748487472534
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.16048018634319305,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.4227275848388672,
                      -0.9080742597579956,
                      0.7020295858383179,
                      -0.041596919298172
                    ],
                    [
                      0.41067418456077576,
                      0.24518124759197235,
                      -0.7477301955223083,
                      1.154771089553833
                    ],
                    [
                      -0.1315249502658844,
                      0.6808403134346008,
                      -0.015412340871989727,
                      -0.5994521379470825
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.4084513783454895,
                    -0.15149201452732086,
                    -0.3056502938270569
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 59,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.8720216751098633,
              1.9043158292770386,
              0.32505327463150024
            ],
            [
              2.2352380752563477,
              -2.057626724243164,
              -0.20495003461837769
            ],
            [
              -1.6137416362762451,
              -0.16367848217487335,
              1.7214584350585938
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.15801791846752167,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.42640143632888794,
                      -0.9123154878616333,
                      0.7071352005004883,
                      -0.042218178510665894
                    ],
                    [
                      0.417299747467041,
                      0.2448199838399887,
                      -0.7528194189071655,
                      1.1609828472137451
                    ],
                    [
                      -0.1344766467809677,
                      0.6854428052902222,
                      -0.015428771264851093,
                      -0.6050426363945007
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.40988314151763916,
                    -0.1499556601047516,
                    -0.308618426322937
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 60,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.8833674192428589,
              1.9179669618606567,
              0.3227478861808777
            ],
            [
              2.2505550384521484,
              -2.072894334793091,
              -0.20499932765960693
            ],
            [
              -1.619928240776062,
              -0.16831514239311218,
              1.7322810888290405
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.15562713146209717,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.43001389503479004,
                      -0.9164865612983704,
                      0.7121593356132507,
                      -0.04282599315047264
                    ],
                    [
                      0.42382872104644775,
                      0.24445420503616333,
                      -0.7578299641609192,
                      1.1671098470687866
                    ],
                    [
                      -0.13739316165447235,
                      0.6899796724319458,
                      -0.015442377887666225,
                      -0.6105618476867676
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.4112948179244995,
                    -0.1484372317790985,
                    -0.3115485608577728
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 61,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.8945180177688599,
              1.9314095973968506,
              0.32045575976371765
            ],
            [
              2.265627384185791,
              -2.087925910949707,
              -0.20504015684127808
            ],
            [
              -1.6260055303573608,
              -0.1729045808315277,
              1.7429481744766235
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.15330490469932556,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.43356695771217346,
                      -0.9205896258354187,
                      0.7171046733856201,
                      -0.04342084378004074
                    ],
                    [
                      0.4302637577056885,
                      0.24408434331417084,
                      -0.7627641558647156,
                      1.1731542348861694
                    ],
                    [
                      -0.14027512073516846,
                      0.6944525837898254,
                      -0.015453503467142582,
                      -0.616011381149292
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.4126870632171631,
                    -0.14693638682365417,
                    -0.31444165110588074
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 62,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.905479907989502,
              1.9446501731872559,
              0.3181770145893097
            ],
            [
              2.280463218688965,
              -2.1027283668518066,
              -0.2050735354423523
            ],
            [
              -1.6319770812988281,
              -0.17744752764701843,
              1.753462553024292
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.15104828774929047,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.437062531709671,
                      -0.9246267676353455,
                      0.7219736576080322,
                      -0.044003184884786606
                    ],
                    [
                      0.43660736083984375,
                      0.2437107264995575,
                      -0.7676241993904114,
                      1.179118037223816
                    ],
                    [
                      -0.14312316477298737,
                      0.6988633275032043,
                      -0.01546244602650404,
                      -0.6213928461074829
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.41406044363975525,
                    -0.14545279741287231,
                    -0.31729862093925476
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 63,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.916258692741394,
              1.9576940536499023,
              0.31591203808784485
            ],
            [
              2.295070171356201,
              -2.1173086166381836,
              -0.20510035753250122
            ],
            [
              -1.6378461122512817,
              -0.1819448471069336,
              1.763828992843628
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.148854598402977,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.440502405166626,
                      -0.9285999536514282,
                      0.7267686724662781,
                      -0.04457344859838486
                    ],
                    [
                      0.442861944437027,
                      0.24333371222019196,
                      -0.772412121295929,
                      1.1850031614303589
                    ],
                    [
                      -0.14593788981437683,
                      0.7032135128974915,
                      -0.015469485893845558,
                      -0.6267077326774597
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.41541555523872375,
                    -0.14398615062236786,
                    -0.3201203942298889
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 64,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.9268600940704346,
              1.9705463647842407,
              0.31366103887557983
            ],
            [
              2.309455394744873,
              -2.1316723823547363,
              -0.2051214724779129
            ],
            [
              -1.64361572265625,
              -0.18639712035655975,
              1.7740507125854492
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.14672134816646576,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.4438883066177368,
                      -0.9325110912322998,
                      0.7314919829368591,
                      -0.04513205215334892
                    ],
                    [
                      0.4490298628807068,
                      0.24295362830162048,
                      -0.7771300077438354,
                      1.1908116340637207
                    ],
                    [
                      -0.1487199068069458,
                      0.7075046896934509,
                      -0.015474872663617134,
                      -0.6319575905799866
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.4167529344558716,
                    -0.14253613352775574,
                    -0.32290780544281006
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 65,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.9372895956039429,
              1.9832127094268799,
              0.3114240765571594
            ],
            [
              2.323625087738037,
              -2.1458261013031006,
              -0.20513764023780823
            ],
            [
              -1.649288296699524,
              -0.19080528616905212,
              1.784131407737732
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.14464618265628815,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.44722187519073486,
                      -0.9363619685173035,
                      0.7361457347869873,
                      -0.04567938670516014
                    ],
                    [
                      0.45511335134506226,
                      0.24257077276706696,
                      -0.7817797660827637,
                      1.1965452432632446
                    ],
                    [
                      -0.15146982669830322,
                      0.7117384076118469,
                      -0.015478834509849548,
                      -0.6371438503265381
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.4180731177330017,
                    -0.14110241830348969,
                    -0.32566168904304504
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 66,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.947551965713501,
              1.9956976175308228,
              0.3092014491558075
            ],
            [
              2.3375864028930664,
              -2.1597752571105957,
              -0.20514953136444092
            ],
            [
              -1.6548669338226318,
              -0.1951698511838913,
              1.7940747737884521
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.14262662827968597,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.45050469040870667,
                      -0.9401543140411377,
                      0.7407320141792297,
                      -0.04621582850813866
                    ],
                    [
                      0.4611145853996277,
                      0.24218541383743286,
                      -0.7863633036613464,
                      1.202205777168274
                    ],
                    [
                      -0.15418823063373566,
                      0.715916097164154,
                      -0.015481584705412388,
                      -0.6422679424285889
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.41937655210494995,
                    -0.13968472182750702,
                    -0.32838284969329834
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 67,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.9576525688171387,
              2.0080065727233887,
              0.30699318647384644
            ],
            [
              2.3513453006744385,
              -2.173525810241699,
              -0.2051577866077423
            ],
            [
              -1.6603543758392334,
              -0.19949178397655487,
              1.8038839101791382
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.14066070318222046,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.453738272190094,
                      -0.943889856338501,
                      0.745252788066864,
                      -0.04674173519015312
                    ],
                    [
                      0.4670356214046478,
                      0.2417978197336197,
                      -0.7908823490142822,
                      1.2077949047088623
                    ],
                    [
                      -0.15687569975852966,
                      0.7200392484664917,
                      -0.015483303926885128,
                      -0.6473312377929688
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.4206637442111969,
                    -0.13828271627426147,
                    -0.33107203245162964
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 68,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.9675959348678589,
              2.0201432704925537,
              0.30479949712753296
            ],
            [
              2.364907741546631,
              -2.1870830059051514,
              -0.20516294240951538
            ],
            [
              -1.6657530069351196,
              -0.20377159118652344,
              1.8135621547698975
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.1387462168931961,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.4569240212440491,
                      -0.9475701451301575,
                      0.7497099041938782,
                      -0.047257449477910995
                    ],
                    [
                      0.47287848591804504,
                      0.24140824377536774,
                      -0.7953386306762695,
                      1.213314414024353
                    ],
                    [
                      -0.1595328003168106,
                      0.7241091132164001,
                      -0.015484167262911797,
                      -0.652334988117218
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.421935111284256,
                    -0.13689613342285156,
                    -0.33372998237609863
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 69,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.977386713027954,
              2.0321133136749268,
              0.30262047052383423
            ],
            [
              2.378278970718384,
              -2.2004518508911133,
              -0.20516552031040192
            ],
            [
              -1.6710655689239502,
              -0.2080100178718567,
              1.823113203048706
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.13688130676746368,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.4600633382797241,
                      -0.9511967301368713,
                      0.7541052103042603,
                      -0.04776329547166824
                    ],
                    [
                      0.47864508628845215,
                      0.2410169094800949,
                      -0.7997337579727173,
                      1.2187658548355103
                    ],
                    [
                      -0.16216008365154266,
                      0.7281270623207092,
                      -0.015484335832297802,
                      -0.6572805047035217
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.423191100358963,
                    -0.1355246752500534,
                    -0.336357444524765
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 70,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.9870290756225586,
              2.0439200401306152,
              0.30045607686042786
            ],
            [
              2.391464948654175,
              -2.213637351989746,
              -0.2051660269498825
            ],
            [
              -1.6762938499450684,
              -0.21220771968364716,
              1.832539439201355
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.1350640207529068,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.4631575345993042,
                      -0.954771101474762,
                      0.7584404349327087,
                      -0.048259589821100235
                    ],
                    [
                      0.48433732986450195,
                      0.24062402546405792,
                      -0.8040693998336792,
                      1.2241506576538086
                    ],
                    [
                      -0.1647581160068512,
                      0.7320942878723145,
                      -0.015483943745493889,
                      -0.6621690988540649
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.4244321286678314,
                    -0.13416805863380432,
                    -0.3389550745487213
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 71,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -1.9965273141860962,
              2.055567741394043,
              0.29830631613731384
            ],
            [
              2.404470443725586,
              -2.226644277572632,
              -0.2051648497581482
            ],
            [
              -1.6814407110214233,
              -0.21636536717414856,
              1.8418439626693726
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.1332927942276001,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.466207891702652,
                      -0.958294689655304,
                      0.7627171874046326,
                      -0.04874663054943085
                    ],
                    [
                      0.48995697498321533,
                      0.24022981524467468,
                      -0.8083469867706299,
                      1.2294704914093018
                    ],
                    [
                      -0.167327418923378,
                      0.7360121011734009,
                      -0.015483122318983078,
                      -0.6670019030570984
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.42565855383872986,
                    -0.13282600045204163,
                    -0.34152355790138245
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 72,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -2.005885362625122,
              2.067061185836792,
              0.2961713373661041
            ],
            [
              2.4173007011413574,
              -2.2394769191741943,
              -0.20516237616539001
            ],
            [
              -1.686508297920227,
              -0.22048357129096985,
              1.8510297536849976
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.13156571984291077,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.46921560168266296,
                      -0.9617688059806824,
                      0.7669370770454407,
                      -0.04922470450401306
                    ],
                    [
                      0.49550577998161316,
                      0.23983445763587952,
                      -0.8125680685043335,
                      1.2347267866134644
                    ],
                    [
                      -0.16986852884292603,
                      0.7398816347122192,
                      -0.015481986105442047,
                      -0.6717801094055176
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.42687076330184937,
                    -0.13149824738502502,
                    -0.34406355023384094
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 73,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -2.0151071548461914,
              2.0784032344818115,
              0.29405108094215393
            ],
            [
              2.4299604892730713,
              -2.2521402835845947,
              -0.205158993601799
            ],
            [
              -1.6914985179901123,
              -0.22456291317939758,
              1.8600995540618896
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.12988127768039703,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.4721817970275879,
                      -0.965194821357727,
                      0.7711016535758972,
                      -0.049694083631038666
                    ],
                    [
                      0.5009854435920715,
                      0.23943811655044556,
                      -0.8167340159416199,
                      1.2399208545684814
                    ],
                    [
                      -0.17238196730613708,
                      0.7437040209770203,
                      -0.015480638481676579,
                      -0.6765048503875732
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.428069144487381,
                    -0.13018451631069183,
                    -0.34657564759254456
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 74,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -2.0241963863372803,
              2.0895981788635254,
              0.29194554686546326
            ],
            [
              2.4424543380737305,
              -2.2646379470825195,
              -0.20515495538711548
            ],
            [
              -1.6964137554168701,
              -0.22860418260097504,
              1.8690556287765503
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.12823796272277832,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.4751076400279999,
                      -0.9685739874839783,
                      0.7752123475074768,
                      -0.05015503242611885
                    ],
                    [
                      0.506397545337677,
                      0.23904097080230713,
                      -0.8208461403846741,
                      1.2450542449951172
                    ],
                    [
                      -0.17486824095249176,
                      0.7474803328514099,
                      -0.015479175373911858,
                      -0.6811772584915161
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.4292539954185486,
                    -0.12888456881046295,
                    -0.34906044602394104
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 75,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -2.033156633377075,
              2.100649118423462,
              0.2898547351360321
            ],
            [
              2.4547863006591797,
              -2.2769744396209717,
              -0.2051505595445633
            ],
            [
              -1.7012555599212646,
              -0.23260779678821564,
              1.8779014348983765
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.12663425505161285,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.4779941737651825,
                      -0.9719074964523315,
                      0.7792705297470093,
                      -0.05060780048370361
                    ],
                    [
                      0.5117436647415161,
                      0.23864316940307617,
                      -0.8249058127403259,
                      1.250128149986267
                    ],
                    [
                      -0.17732784152030945,
                      0.7512116432189941,
                      -0.015477682463824749,
                      -0.6857983469963074
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.4304256737232208,
                    -0.1275981366634369,
                    -0.35151854157447815
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 76,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -2.0419912338256836,
              2.111560106277466,
              0.2877785861492157
            ],
            [
              2.466960906982422,
              -2.2891533374786377,
              -0.20514605939388275
            ],
            [
              -1.7060260772705078,
              -0.2365744411945343,
              1.8866387605667114
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.12506888806819916,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.4808424115180969,
                      -0.9751965403556824,
                      0.7832775712013245,
                      -0.051052629947662354
                    ],
                    [
                      0.517025351524353,
                      0.23824486136436462,
                      -0.8289142847061157,
                      1.2551438808441162
                    ],
                    [
                      -0.17976124584674835,
                      0.7548989653587341,
                      -0.01547623798251152,
                      -0.690369188785553
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.4315844774246216,
                    -0.12632496654987335,
                    -0.35395050048828125
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 77,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -2.050703525543213,
              2.1223342418670654,
              0.2857170104980469
            ],
            [
              2.4789819717407227,
              -2.3011786937713623,
              -0.20514172315597534
            ],
            [
              -1.710727572441101,
              -0.2405046969652176,
              1.8952701091766357
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.12354042381048203,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.48365336656570435,
                      -0.9784421920776367,
                      0.7872347831726074,
                      -0.051489751785993576
                    ],
                    [
                      0.5222440361976624,
                      0.23784618079662323,
                      -0.8328728079795837,
                      1.26010262966156
                    ],
                    [
                      -0.18216894567012787,
                      0.7585433125495911,
                      -0.015474909916520119,
                      -0.6948908567428589
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.43273070454597473,
                    -0.12506483495235443,
                    -0.3563568592071533
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 78,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -2.0592968463897705,
              2.132974147796631,
              0.28366994857788086
            ],
            [
              2.4908535480499268,
              -2.3130545616149902,
              -0.2051377296447754
            ],
            [
              -1.7153611183166504,
              -0.24439911544322968,
              1.9037983417510986
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.12204758077859879,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.48642799258232117,
                      -0.9816455841064453,
                      0.7911433577537537,
                      -0.05191938951611519
                    ],
                    [
                      0.5274010896682739,
                      0.23744726181030273,
                      -0.8367825150489807,
                      1.2650057077407837
                    ],
                    [
                      -0.184551402926445,
                      0.7621456384658813,
                      -0.015473766252398491,
                      -0.6993642449378967
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.43386468291282654,
                    -0.12381749600172043,
                    -0.3587381839752197
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 79,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 181,
          "function_name": "train_model",
          "code": "logits = model(x)  # @inspect logits @stepover"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              -2.0677740573883057,
              2.143483877182007,
              0.28163743019104004
            ],
            [
              2.5025792121887207,
              -2.3247835636138916,
              -0.205134317278862
            ],
            [
              -1.7199286222457886,
              -0.24825823307037354,
              1.9122250080108643
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 182,
          "function_name": "train_model",
          "code": "loss = cross_entropy(logits, target_y)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "torch.Tensor",
          "contents": 0.12058929353952408,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 183,
          "function_name": "train_model",
          "code": "losses.append(loss.item())"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 186,
          "function_name": "train_model",
          "code": "optimizer.zero_grad()  # Remember to do this!"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 187,
          "function_name": "train_model",
          "code": "loss.backward()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 190,
          "function_name": "train_model",
          "code": "optimizer.step()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 191,
          "function_name": "train_model",
          "code": "parameters = list(model.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.489167183637619,
                      -0.9848077893257141,
                      0.7950045466423035,
                      -0.052341755479574203
                    ],
                    [
                      0.5324979424476624,
                      0.2370482087135315,
                      -0.8406445980072021,
                      1.269854187965393
                    ],
                    [
                      -0.18690906465053558,
                      0.7657068967819214,
                      -0.015472857281565666,
                      -0.7037903666496277
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.4349866509437561,
                    -0.12258271872997284,
                    -0.36109495162963867
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 179,
          "function_name": "train_model",
          "code": "for step in range(num_steps):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 79,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 193,
          "function_name": "train_model",
          "code": "return Chart(Data(values=[{\"step\": i, \"loss\": loss} for i, loss in enumerate(losses)])).mark_line().encode(x=\"step:Q\", y=\"loss:Q\").to_dict()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 142,
          "function_name": "linear_models",
          "code": "result = train_model(model, training_data)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 143,
          "function_name": "linear_models",
          "code": "plot(result)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "step": 0,
                  "loss": 1.3517507314682007
                },
                {
                  "step": 1,
                  "loss": 1.1824523210525513
                },
                {
                  "step": 2,
                  "loss": 1.0487483739852905
                },
                {
                  "step": 3,
                  "loss": 0.9436447024345398
                },
                {
                  "step": 4,
                  "loss": 0.8599615097045898
                },
                {
                  "step": 5,
                  "loss": 0.7918294072151184
                },
                {
                  "step": 6,
                  "loss": 0.7350217700004578
                },
                {
                  "step": 7,
                  "loss": 0.6866569519042969
                },
                {
                  "step": 8,
                  "loss": 0.6447836756706238
                },
                {
                  "step": 9,
                  "loss": 0.6080507636070251
                },
                {
                  "step": 10,
                  "loss": 0.5754902958869934
                },
                {
                  "step": 11,
                  "loss": 0.5463838577270508
                },
                {
                  "step": 12,
                  "loss": 0.5201802253723145
                },
                {
                  "step": 13,
                  "loss": 0.4964461028575897
                },
                {
                  "step": 14,
                  "loss": 0.47483396530151367
                },
                {
                  "step": 15,
                  "loss": 0.45506009459495544
                },
                {
                  "step": 16,
                  "loss": 0.436890572309494
                },
                {
                  "step": 17,
                  "loss": 0.4201304018497467
                },
                {
                  "step": 18,
                  "loss": 0.40461549162864685
                },
                {
                  "step": 19,
                  "loss": 0.39020684361457825
                },
                {
                  "step": 20,
                  "loss": 0.3767859935760498
                },
                {
                  "step": 21,
                  "loss": 0.36425113677978516
                },
                {
                  "step": 22,
                  "loss": 0.352514386177063
                },
                {
                  "step": 23,
                  "loss": 0.3414996564388275
                },
                {
                  "step": 24,
                  "loss": 0.3311402499675751
                },
                {
                  "step": 25,
                  "loss": 0.3213779926300049
                },
                {
                  "step": 26,
                  "loss": 0.3121614158153534
                },
                {
                  "step": 27,
                  "loss": 0.30344507098197937
                },
                {
                  "step": 28,
                  "loss": 0.29518863558769226
                },
                {
                  "step": 29,
                  "loss": 0.28735610842704773
                },
                {
                  "step": 30,
                  "loss": 0.27991530299186707
                },
                {
                  "step": 31,
                  "loss": 0.27283716201782227
                },
                {
                  "step": 32,
                  "loss": 0.2660958170890808
                },
                {
                  "step": 33,
                  "loss": 0.2596674859523773
                },
                {
                  "step": 34,
                  "loss": 0.253530889749527
                },
                {
                  "step": 35,
                  "loss": 0.24766665697097778
                },
                {
                  "step": 36,
                  "loss": 0.24205704033374786
                },
                {
                  "step": 37,
                  "loss": 0.2366858869791031
                },
                {
                  "step": 38,
                  "loss": 0.23153842985630035
                },
                {
                  "step": 39,
                  "loss": 0.2266010046005249
                },
                {
                  "step": 40,
                  "loss": 0.22186124324798584
                },
                {
                  "step": 41,
                  "loss": 0.21730749309062958
                },
                {
                  "step": 42,
                  "loss": 0.21292924880981445
                },
                {
                  "step": 43,
                  "loss": 0.20871658623218536
                },
                {
                  "step": 44,
                  "loss": 0.20466041564941406
                },
                {
                  "step": 45,
                  "loss": 0.20075243711471558
                },
                {
                  "step": 46,
                  "loss": 0.1969846487045288
                },
                {
                  "step": 47,
                  "loss": 0.19334982335567474
                },
                {
                  "step": 48,
                  "loss": 0.18984119594097137
                },
                {
                  "step": 49,
                  "loss": 0.18645232915878296
                },
                {
                  "step": 50,
                  "loss": 0.18317733705043793
                },
                {
                  "step": 51,
                  "loss": 0.18001073598861694
                },
                {
                  "step": 52,
                  "loss": 0.1769472360610962
                },
                {
                  "step": 53,
                  "loss": 0.17398212850093842
                },
                {
                  "step": 54,
                  "loss": 0.17111064493656158
                },
                {
                  "step": 55,
                  "loss": 0.168328657746315
                },
                {
                  "step": 56,
                  "loss": 0.16563206911087036
                },
                {
                  "step": 57,
                  "loss": 0.1630171239376068
                },
                {
                  "step": 58,
                  "loss": 0.16048018634319305
                },
                {
                  "step": 59,
                  "loss": 0.15801791846752167
                },
                {
                  "step": 60,
                  "loss": 0.15562713146209717
                },
                {
                  "step": 61,
                  "loss": 0.15330490469932556
                },
                {
                  "step": 62,
                  "loss": 0.15104828774929047
                },
                {
                  "step": 63,
                  "loss": 0.148854598402977
                },
                {
                  "step": 64,
                  "loss": 0.14672134816646576
                },
                {
                  "step": 65,
                  "loss": 0.14464618265628815
                },
                {
                  "step": 66,
                  "loss": 0.14262662827968597
                },
                {
                  "step": 67,
                  "loss": 0.14066070318222046
                },
                {
                  "step": 68,
                  "loss": 0.1387462168931961
                },
                {
                  "step": 69,
                  "loss": 0.13688130676746368
                },
                {
                  "step": 70,
                  "loss": 0.1350640207529068
                },
                {
                  "step": 71,
                  "loss": 0.1332927942276001
                },
                {
                  "step": 72,
                  "loss": 0.13156571984291077
                },
                {
                  "step": 73,
                  "loss": 0.12988127768039703
                },
                {
                  "step": 74,
                  "loss": 0.12823796272277832
                },
                {
                  "step": 75,
                  "loss": 0.12663425505161285
                },
                {
                  "step": 76,
                  "loss": 0.12506888806819916
                },
                {
                  "step": 77,
                  "loss": 0.12354042381048203
                },
                {
                  "step": 78,
                  "loss": 0.12204758077859879
                },
                {
                  "step": 79,
                  "loss": 0.12058929353952408
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "step",
                "type": "quantitative"
              },
              "y": {
                "field": "loss",
                "type": "quantitative"
              }
            },
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 145,
          "function_name": "linear_models",
          "code": "text(\"Summary:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 146,
          "function_name": "linear_models",
          "code": "text(\"- Define a model (e.g., linear): inputs to logits\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Define a model (e.g., linear): inputs to logits",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 147,
          "function_name": "linear_models",
          "code": "text(\"- Define a loss (e.g., cross entropy): logits, targets to loss\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Define a loss (e.g., cross entropy): logits, targets to loss",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 148,
          "function_name": "linear_models",
          "code": "text(\"- Define an optimizer (e.g., SGD): updates parameters using gradients\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Define an optimizer (e.g., SGD): updates parameters using gradients",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 51,
          "function_name": "pytorch_basics",
          "code": "linear_models()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 16,
          "function_name": "main",
          "code": "pytorch_basics()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 196,
          "function_name": "nonlinear_motivation",
          "code": "def nonlinear_motivation():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 197,
          "function_name": "nonlinear_motivation",
          "code": "link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=machine-learning%2Fnon-linear-features.js&mode=print6pp\", title=\"[Autumn 2023 lecture on non-linear models]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[Autumn 2023 lecture on non-linear models]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://stanford-cs221.github.io/autumn2023/modules/module.html#include=machine-learning%2Fnon-linear-features.js&mode=print6pp",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 198,
          "function_name": "nonlinear_motivation",
          "code": "text(\"So far: linear classifiers\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So far: linear classifiers",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 199,
          "function_name": "nonlinear_motivation",
          "code": "text(\"Decision boundaries: straight cuts of input space\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Decision boundaries: straight cuts of input space",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 200,
          "function_name": "nonlinear_motivation",
          "code": "def predictor(x: np.ndarray) -> int:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 202,
          "function_name": "nonlinear_motivation",
          "code": "plot(make_plot(\"decision boundary\", \"x0\", \"x1\", lambda x0: x0 - 1))"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "x0": -3.0,
                  "x1": -4.0
                },
                {
                  "x0": -2.793103448275862,
                  "x1": -3.793103448275862
                },
                {
                  "x0": -2.586206896551724,
                  "x1": -3.586206896551724
                },
                {
                  "x0": -2.3793103448275863,
                  "x1": -3.3793103448275863
                },
                {
                  "x0": -2.1724137931034484,
                  "x1": -3.1724137931034484
                },
                {
                  "x0": -1.9655172413793103,
                  "x1": -2.9655172413793105
                },
                {
                  "x0": -1.7586206896551724,
                  "x1": -2.7586206896551726
                },
                {
                  "x0": -1.5517241379310345,
                  "x1": -2.5517241379310347
                },
                {
                  "x0": -1.3448275862068966,
                  "x1": -2.344827586206897
                },
                {
                  "x0": -1.1379310344827587,
                  "x1": -2.137931034482759
                },
                {
                  "x0": -0.9310344827586206,
                  "x1": -1.9310344827586206
                },
                {
                  "x0": -0.7241379310344827,
                  "x1": -1.7241379310344827
                },
                {
                  "x0": -0.5172413793103448,
                  "x1": -1.5172413793103448
                },
                {
                  "x0": -0.31034482758620685,
                  "x1": -1.3103448275862069
                },
                {
                  "x0": -0.10344827586206895,
                  "x1": -1.103448275862069
                },
                {
                  "x0": 0.10344827586206895,
                  "x1": -0.896551724137931
                },
                {
                  "x0": 0.31034482758620685,
                  "x1": -0.6896551724137931
                },
                {
                  "x0": 0.5172413793103448,
                  "x1": -0.48275862068965525
                },
                {
                  "x0": 0.7241379310344827,
                  "x1": -0.27586206896551735
                },
                {
                  "x0": 0.9310344827586206,
                  "x1": -0.06896551724137945
                },
                {
                  "x0": 1.137931034482759,
                  "x1": 0.1379310344827589
                },
                {
                  "x0": 1.3448275862068968,
                  "x1": 0.3448275862068968
                },
                {
                  "x0": 1.5517241379310347,
                  "x1": 0.5517241379310347
                },
                {
                  "x0": 1.7586206896551726,
                  "x1": 0.7586206896551726
                },
                {
                  "x0": 1.9655172413793105,
                  "x1": 0.9655172413793105
                },
                {
                  "x0": 2.1724137931034484,
                  "x1": 1.1724137931034484
                },
                {
                  "x0": 2.3793103448275863,
                  "x1": 1.3793103448275863
                },
                {
                  "x0": 2.586206896551724,
                  "x1": 1.5862068965517242
                },
                {
                  "x0": 2.793103448275862,
                  "x1": 1.793103448275862
                },
                {
                  "x0": 3.0,
                  "x1": 2.0
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "x0",
                "type": "quantitative"
              },
              "y": {
                "field": "x1",
                "type": "quantitative"
              }
            },
            "title": "decision boundary",
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 204,
          "function_name": "nonlinear_motivation",
          "code": "text(\"Or in linear regression:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Or in linear regression:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 205,
          "function_name": "nonlinear_motivation",
          "code": "image(\"images/linear-regressors.png\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/linear-regressors.png",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 207,
          "function_name": "nonlinear_motivation",
          "code": "text(\"But data sometimes might look like this:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "But data sometimes might look like this:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 208,
          "function_name": "nonlinear_motivation",
          "code": "image(\"images/nonlinear-points.png\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/nonlinear-points.png",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 210,
          "function_name": "nonlinear_motivation",
          "code": "text(\"For these cases, we need **non-linear** models.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "For these cases, we need **non-linear** models.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 211,
          "function_name": "nonlinear_motivation",
          "code": "text(\"What should we use?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "What should we use?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 213,
          "function_name": "nonlinear_motivation",
          "code": "text(\"There are actually a lot of non-linear models\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "There are actually a lot of non-linear models",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 214,
          "function_name": "nonlinear_motivation",
          "code": "text(\"- decision trees, nearest neighbors, neural networks\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- decision trees, nearest neighbors, neural networks",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 215,
          "function_name": "nonlinear_motivation",
          "code": "text(\"...and even linear models!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...and even linear models!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 216,
          "function_name": "nonlinear_motivation",
          "code": "text(\"Wait, what?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Wait, what?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 218,
          "function_name": "nonlinear_motivation",
          "code": "text(\"Suppose we wanted to define a quadratic classifier:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Suppose we wanted to define a quadratic classifier:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 219,
          "function_name": "nonlinear_motivation",
          "code": "def quadratic_classifier(x: np.ndarray) -> int:  # @inspect x"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 226,
          "function_name": "nonlinear_motivation",
          "code": "image(\"images/quadratic-classifier.png\", width=300)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/quadratic-classifier.png",
          "style": {
            "width": 300
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 227,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = quadratic_classifier(np.array([1, 1]))  # @inspect predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 227,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = quadratic_classifier(np.array([1, 1]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 219,
          "function_name": "quadratic_classifier",
          "code": "def quadratic_classifier(x: np.ndarray) -> int:  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            1
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 227,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = quadratic_classifier(np.array([1, 1]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 220,
          "function_name": "quadratic_classifier",
          "code": "logit = (x[0] - 1) ** 2 + (x[1] - 1) ** 2 - 2  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.int64",
          "contents": -2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 227,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = quadratic_classifier(np.array([1, 1]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 221,
          "function_name": "quadratic_classifier",
          "code": "if logit > 0:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 227,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = quadratic_classifier(np.array([1, 1]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 224,
          "function_name": "quadratic_classifier",
          "code": "predicted_y = -1  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": -1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 227,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = quadratic_classifier(np.array([1, 1]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 225,
          "function_name": "quadratic_classifier",
          "code": "return predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 227,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = quadratic_classifier(np.array([1, 1]))  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": -1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 228,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = quadratic_classifier(np.array([3, 0]))  # @inspect predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 228,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = quadratic_classifier(np.array([3, 0]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 219,
          "function_name": "quadratic_classifier",
          "code": "def quadratic_classifier(x: np.ndarray) -> int:  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            3,
            0
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 228,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = quadratic_classifier(np.array([3, 0]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 220,
          "function_name": "quadratic_classifier",
          "code": "logit = (x[0] - 1) ** 2 + (x[1] - 1) ** 2 - 2  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.int64",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 228,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = quadratic_classifier(np.array([3, 0]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 221,
          "function_name": "quadratic_classifier",
          "code": "if logit > 0:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 228,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = quadratic_classifier(np.array([3, 0]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 222,
          "function_name": "quadratic_classifier",
          "code": "predicted_y = 1  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 228,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = quadratic_classifier(np.array([3, 0]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 225,
          "function_name": "quadratic_classifier",
          "code": "return predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 228,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = quadratic_classifier(np.array([3, 0]))  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 229,
          "function_name": "nonlinear_motivation",
          "code": "text(\"The decision boundary is a circle...definitely non-linear.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The decision boundary is a circle...definitely non-linear.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 231,
          "function_name": "nonlinear_motivation",
          "code": "text(\"But let us define a fixed non-linear feature map:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "But let us define a fixed non-linear feature map:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 232,
          "function_name": "nonlinear_motivation",
          "code": "def feature_map(x: np.ndarray) -> np.ndarray:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 235,
          "function_name": "nonlinear_motivation",
          "code": "text(\"Then we define a linear predictor:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Then we define a linear predictor:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 236,
          "function_name": "nonlinear_motivation",
          "code": "def predictor(x: np.ndarray) -> int:  # @inspect x"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 246,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([1, 1]))  # @inspect predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 246,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([1, 1]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 236,
          "function_name": "predictor",
          "code": "def predictor(x: np.ndarray) -> int:  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            1
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 246,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([1, 1]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 237,
          "function_name": "predictor",
          "code": "phi = feature_map(x)  # @inspect phi"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 246,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([1, 1]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 237,
          "function_name": "predictor",
          "code": "phi = feature_map(x)  # @inspect phi"
        },
        {
          "path": "deep_learning.py",
          "line_number": 232,
          "function_name": "feature_map",
          "code": "def feature_map(x: np.ndarray) -> np.ndarray:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 246,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([1, 1]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 237,
          "function_name": "predictor",
          "code": "phi = feature_map(x)  # @inspect phi"
        },
        {
          "path": "deep_learning.py",
          "line_number": 233,
          "function_name": "feature_map",
          "code": "return np.array([x[0], x[1], x[0] ** 2 + x[1] ** 2])"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 246,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([1, 1]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 237,
          "function_name": "predictor",
          "code": "phi = feature_map(x)  # @inspect phi"
        }
      ],
      "env": {
        "phi": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            1,
            2
          ],
          "dtype": "int64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 246,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([1, 1]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 239,
          "function_name": "predictor",
          "code": "logit = -2 * phi[0] - 2 * phi[1] + phi[2]  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.int64",
          "contents": -2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 246,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([1, 1]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 240,
          "function_name": "predictor",
          "code": "if logit > 0:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 246,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([1, 1]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 243,
          "function_name": "predictor",
          "code": "predicted_y = -1  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": -1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 246,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([1, 1]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 244,
          "function_name": "predictor",
          "code": "return predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 246,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([1, 1]))  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": -1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 247,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([3, 0]))  # @inspect predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 247,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([3, 0]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 236,
          "function_name": "predictor",
          "code": "def predictor(x: np.ndarray) -> int:  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            3,
            0
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 247,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([3, 0]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 237,
          "function_name": "predictor",
          "code": "phi = feature_map(x)  # @inspect phi"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 247,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([3, 0]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 237,
          "function_name": "predictor",
          "code": "phi = feature_map(x)  # @inspect phi"
        },
        {
          "path": "deep_learning.py",
          "line_number": 232,
          "function_name": "feature_map",
          "code": "def feature_map(x: np.ndarray) -> np.ndarray:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 247,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([3, 0]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 237,
          "function_name": "predictor",
          "code": "phi = feature_map(x)  # @inspect phi"
        },
        {
          "path": "deep_learning.py",
          "line_number": 233,
          "function_name": "feature_map",
          "code": "return np.array([x[0], x[1], x[0] ** 2 + x[1] ** 2])"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 247,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([3, 0]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 237,
          "function_name": "predictor",
          "code": "phi = feature_map(x)  # @inspect phi"
        }
      ],
      "env": {
        "phi": {
          "type": "numpy.ndarray",
          "contents": [
            3,
            0,
            9
          ],
          "dtype": "int64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 247,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([3, 0]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 239,
          "function_name": "predictor",
          "code": "logit = -2 * phi[0] - 2 * phi[1] + phi[2]  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.int64",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 247,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([3, 0]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 240,
          "function_name": "predictor",
          "code": "if logit > 0:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 247,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([3, 0]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 241,
          "function_name": "predictor",
          "code": "predicted_y = 1  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 247,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([3, 0]))  # @inspect predicted_y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 244,
          "function_name": "predictor",
          "code": "return predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 247,
          "function_name": "nonlinear_motivation",
          "code": "predicted_y = predictor(np.array([3, 0]))  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 249,
          "function_name": "nonlinear_motivation",
          "code": "text(\"A linear classifier in a higher-dimensional space\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "A linear classifier in a higher-dimensional space",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 250,
          "function_name": "nonlinear_motivation",
          "code": "text(\"...leads to a non-linear classifier in the original space.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...leads to a non-linear classifier in the original space.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 251,
          "function_name": "nonlinear_motivation",
          "code": "video(\"images/svm-polynomial-kernel.mp4\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "video",
          "data": "images/svm-polynomial-kernel.mp4",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 253,
          "function_name": "nonlinear_motivation",
          "code": "text(\"Here's a simple algorithm:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Here's a simple algorithm:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 254,
          "function_name": "nonlinear_motivation",
          "code": "text(\"1. Preprocess our data by applying `feature_map`.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "1. Preprocess our data by applying `feature_map`.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 255,
          "function_name": "nonlinear_motivation",
          "code": "text(\"2. Learn a linear predictor on the processed data.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "2. Learn a linear predictor on the processed data.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 257,
          "function_name": "nonlinear_motivation",
          "code": "text(\"Drawback: `feature_map` is fixed...can we learn it as well?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Drawback: `feature_map` is fixed...can we learn it as well?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 17,
          "function_name": "main",
          "code": "nonlinear_motivation()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 260,
          "function_name": "multi_layer_perceptron_linear",
          "code": "def multi_layer_perceptron_linear():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 261,
          "function_name": "multi_layer_perceptron_linear",
          "code": "text(\"Let's try to make the function more expressive by defining two layers.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's try to make the function more expressive by defining two layers.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 262,
          "function_name": "multi_layer_perceptron_linear",
          "code": "text(\"- The first layer is a feature map.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- The first layer is a feature map.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 263,
          "function_name": "multi_layer_perceptron_linear",
          "code": "text(\"- The second layer is the linear predictor.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- The second layer is the linear predictor.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 265,
          "function_name": "multi_layer_perceptron_linear",
          "code": "training_data = get_training_data()  # @inspect training_data @stepover"
        }
      ],
      "env": {
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "deep_learning.Example",
              "contents": {
                "x": {
                  "type": "torch.Tensor",
                  "contents": [
                    1.0,
                    2.0,
                    0.0,
                    1.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    4
                  ]
                },
                "target_y": {
                  "type": "torch.Tensor",
                  "contents": [
                    0.0,
                    1.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "deep_learning.Example",
              "contents": {
                "x": {
                  "type": "torch.Tensor",
                  "contents": [
                    -1.0,
                    0.0,
                    2.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    4
                  ]
                },
                "target_y": {
                  "type": "torch.Tensor",
                  "contents": [
                    1.0,
                    0.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "deep_learning.Example",
              "contents": {
                "x": {
                  "type": "torch.Tensor",
                  "contents": [
                    0.0,
                    3.0,
                    1.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    4
                  ]
                },
                "target_y": {
                  "type": "torch.Tensor",
                  "contents": [
                    0.0,
                    0.0,
                    1.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 266,
          "function_name": "multi_layer_perceptron_linear",
          "code": "input_dim = len(training_data[0].x)  # @inspect input_dim"
        }
      ],
      "env": {
        "input_dim": {
          "type": "int",
          "contents": 4,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 267,
          "function_name": "multi_layer_perceptron_linear",
          "code": "num_classes = len(training_data[0].target_y)  # @inspect num_classes"
        }
      ],
      "env": {
        "num_classes": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 268,
          "function_name": "multi_layer_perceptron_linear",
          "code": "torch.manual_seed(1)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 269,
          "function_name": "multi_layer_perceptron_linear",
          "code": "model = LinearMLP(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 269,
          "function_name": "multi_layer_perceptron_linear",
          "code": "model = LinearMLP(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 289,
          "function_name": "__init__",
          "code": "def __init__(self, input_dim: int, hidden_dim: int, num_classes: int):  # @inspect input_dim hidden_dim num_classes"
        }
      ],
      "env": {
        "input_dim": {
          "type": "int",
          "contents": 4,
          "dtype": null,
          "shape": null
        },
        "hidden_dim": {
          "type": "int",
          "contents": 5,
          "dtype": null,
          "shape": null
        },
        "num_classes": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 269,
          "function_name": "multi_layer_perceptron_linear",
          "code": "model = LinearMLP(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 290,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 269,
          "function_name": "multi_layer_perceptron_linear",
          "code": "model = LinearMLP(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 292,
          "function_name": "__init__",
          "code": "self.w1 = nn.Linear(input_dim, hidden_dim)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 269,
          "function_name": "multi_layer_perceptron_linear",
          "code": "model = LinearMLP(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 294,
          "function_name": "__init__",
          "code": "self.w2 = nn.Linear(hidden_dim, num_classes)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 269,
          "function_name": "multi_layer_perceptron_linear",
          "code": "model = LinearMLP(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        }
      ],
      "env": {
        "model": {
          "type": "deep_learning.LinearMLP",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "w1.weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      0.2576315999031067,
                      -0.22068911790847778,
                      -0.09693074226379395,
                      0.23468446731567383
                    ],
                    [
                      -0.4707184433937073,
                      0.29985862970352173,
                      -0.1028626561164856,
                      0.2543719410896301
                    ],
                    [
                      0.06950849294662476,
                      -0.061222076416015625,
                      0.13868045806884766,
                      0.024665892124176025
                    ],
                    [
                      0.18261408805847168,
                      -0.19485050439834595,
                      -0.03645437955856323,
                      -0.0450136661529541
                    ],
                    [
                      0.0724719762802124,
                      -0.0019974112510681152,
                      0.43708336353302,
                      0.155595064163208
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    5,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "w1.bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    -0.18620312213897705,
                    -0.3019806742668152,
                    -0.08380782604217529,
                    -0.21567034721374512,
                    -0.16022425889968872
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    5
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "w2.weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      0.021413303911685944,
                      0.2665964365005493,
                      0.24307698011398315,
                      -0.4371740221977234,
                      0.2772368788719177
                    ],
                    [
                      0.1249353215098381,
                      0.4242068827152252,
                      0.29518771171569824,
                      -0.4074731767177582,
                      -0.4252144396305084
                    ],
                    [
                      -0.21570546925067902,
                      0.39270350337028503,
                      -0.07449191808700562,
                      0.1913892775774002,
                      -0.20782527327537537
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    5
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "w2.bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.4388140141963959,
                    -0.18921537697315216,
                    0.3353765606880188
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 270,
          "function_name": "multi_layer_perceptron_linear",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 270,
          "function_name": "multi_layer_perceptron_linear",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 296,
          "function_name": "forward",
          "code": "def forward(self, x):  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            1.0,
            2.0,
            0.0,
            1.0
          ],
          "dtype": "torch.float32",
          "shape": [
            4
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 270,
          "function_name": "multi_layer_perceptron_linear",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 298,
          "function_name": "forward",
          "code": "hidden = self.w1(x)  # @inspect hidden"
        }
      ],
      "env": {
        "hidden": {
          "type": "torch.Tensor",
          "contents": [
            -0.1352652907371521,
            0.08139008283615112,
            -0.11207759380340576,
            -0.46777093410491943,
            0.06384795904159546
          ],
          "dtype": "torch.float32",
          "shape": [
            5
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 270,
          "function_name": "multi_layer_perceptron_linear",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 300,
          "function_name": "forward",
          "code": "logits = self.w2(hidden)  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            0.6525706648826599,
            -0.04121744632720947,
            0.3020695149898529
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 270,
          "function_name": "multi_layer_perceptron_linear",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 301,
          "function_name": "forward",
          "code": "return logits"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 270,
          "function_name": "multi_layer_perceptron_linear",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            0.6525706648826599,
            -0.04121744632720947,
            0.3020695149898529
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 271,
          "function_name": "multi_layer_perceptron_linear",
          "code": "result = train_model(model, training_data)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 272,
          "function_name": "multi_layer_perceptron_linear",
          "code": "plot(result)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "step": 0,
                  "loss": 1.088255763053894
                },
                {
                  "step": 1,
                  "loss": 1.0339421033859253
                },
                {
                  "step": 2,
                  "loss": 0.9864897131919861
                },
                {
                  "step": 3,
                  "loss": 0.942671000957489
                },
                {
                  "step": 4,
                  "loss": 0.9007551670074463
                },
                {
                  "step": 5,
                  "loss": 0.8598461151123047
                },
                {
                  "step": 6,
                  "loss": 0.8195476531982422
                },
                {
                  "step": 7,
                  "loss": 0.7797744870185852
                },
                {
                  "step": 8,
                  "loss": 0.7406333088874817
                },
                {
                  "step": 9,
                  "loss": 0.7023391127586365
                },
                {
                  "step": 10,
                  "loss": 0.6651520133018494
                },
                {
                  "step": 11,
                  "loss": 0.62932950258255
                },
                {
                  "step": 12,
                  "loss": 0.5950916409492493
                },
                {
                  "step": 13,
                  "loss": 0.562598466873169
                },
                {
                  "step": 14,
                  "loss": 0.5319413542747498
                },
                {
                  "step": 15,
                  "loss": 0.5031440854072571
                },
                {
                  "step": 16,
                  "loss": 0.4761723577976227
                },
                {
                  "step": 17,
                  "loss": 0.45094820857048035
                },
                {
                  "step": 18,
                  "loss": 0.42736539244651794
                },
                {
                  "step": 19,
                  "loss": 0.40530359745025635
                },
                {
                  "step": 20,
                  "loss": 0.38463982939720154
                },
                {
                  "step": 21,
                  "loss": 0.36525583267211914
                },
                {
                  "step": 22,
                  "loss": 0.3470434844493866
                },
                {
                  "step": 23,
                  "loss": 0.3299061357975006
                },
                {
                  "step": 24,
                  "loss": 0.3137592673301697
                },
                {
                  "step": 25,
                  "loss": 0.2985294461250305
                },
                {
                  "step": 26,
                  "loss": 0.28415337204933167
                },
                {
                  "step": 27,
                  "loss": 0.27057570219039917
                },
                {
                  "step": 28,
                  "loss": 0.25774773955345154
                },
                {
                  "step": 29,
                  "loss": 0.24562625586986542
                },
                {
                  "step": 30,
                  "loss": 0.2341722697019577
                },
                {
                  "step": 31,
                  "loss": 0.22334979474544525
                },
                {
                  "step": 32,
                  "loss": 0.21312545239925385
                },
                {
                  "step": 33,
                  "loss": 0.20346792042255402
                },
                {
                  "step": 34,
                  "loss": 0.19434738159179688
                },
                {
                  "step": 35,
                  "loss": 0.18573534488677979
                },
                {
                  "step": 36,
                  "loss": 0.17760436236858368
                },
                {
                  "step": 37,
                  "loss": 0.16992835700511932
                },
                {
                  "step": 38,
                  "loss": 0.16268204152584076
                },
                {
                  "step": 39,
                  "loss": 0.15584123134613037
                },
                {
                  "step": 40,
                  "loss": 0.1493825614452362
                },
                {
                  "step": 41,
                  "loss": 0.1432839184999466
                },
                {
                  "step": 42,
                  "loss": 0.1375240832567215
                },
                {
                  "step": 43,
                  "loss": 0.13208270072937012
                },
                {
                  "step": 44,
                  "loss": 0.12694062292575836
                },
                {
                  "step": 45,
                  "loss": 0.12207958102226257
                },
                {
                  "step": 46,
                  "loss": 0.11748242378234863
                },
                {
                  "step": 47,
                  "loss": 0.11313289403915405
                },
                {
                  "step": 48,
                  "loss": 0.10901564359664917
                },
                {
                  "step": 49,
                  "loss": 0.10511618852615356
                },
                {
                  "step": 50,
                  "loss": 0.10142119973897934
                },
                {
                  "step": 51,
                  "loss": 0.09791793674230576
                },
                {
                  "step": 52,
                  "loss": 0.09459444135427475
                },
                {
                  "step": 53,
                  "loss": 0.09143972396850586
                },
                {
                  "step": 54,
                  "loss": 0.0884433165192604
                },
                {
                  "step": 55,
                  "loss": 0.08559554815292358
                },
                {
                  "step": 56,
                  "loss": 0.08288738876581192
                },
                {
                  "step": 57,
                  "loss": 0.08031033724546432
                },
                {
                  "step": 58,
                  "loss": 0.07785647362470627
                },
                {
                  "step": 59,
                  "loss": 0.07551849633455276
                },
                {
                  "step": 60,
                  "loss": 0.07328952103853226
                },
                {
                  "step": 61,
                  "loss": 0.0711631178855896
                },
                {
                  "step": 62,
                  "loss": 0.06913324445486069
                },
                {
                  "step": 63,
                  "loss": 0.0671943798661232
                },
                {
                  "step": 64,
                  "loss": 0.06534136086702347
                },
                {
                  "step": 65,
                  "loss": 0.06356918066740036
                },
                {
                  "step": 66,
                  "loss": 0.06187333166599274
                },
                {
                  "step": 67,
                  "loss": 0.0602496899664402
                },
                {
                  "step": 68,
                  "loss": 0.058694105595350266
                },
                {
                  "step": 69,
                  "loss": 0.05720297992229462
                },
                {
                  "step": 70,
                  "loss": 0.055772822350263596
                },
                {
                  "step": 71,
                  "loss": 0.0544002503156662
                },
                {
                  "step": 72,
                  "loss": 0.053082287311553955
                },
                {
                  "step": 73,
                  "loss": 0.05181616172194481
                },
                {
                  "step": 74,
                  "loss": 0.050599146634340286
                },
                {
                  "step": 75,
                  "loss": 0.04942860081791878
                },
                {
                  "step": 76,
                  "loss": 0.048302341252565384
                },
                {
                  "step": 77,
                  "loss": 0.04721811041235924
                },
                {
                  "step": 78,
                  "loss": 0.0461738295853138
                },
                {
                  "step": 79,
                  "loss": 0.0451674722135067
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "step",
                "type": "quantitative"
              },
              "y": {
                "field": "loss",
                "type": "quantitative"
              }
            },
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 274,
          "function_name": "multi_layer_perceptron_linear",
          "code": "text(\"Claim: this is actually the same as training a linear classifier\")  # @clear training_data input_dim num_classes model logits"
        }
      ],
      "env": {
        "training_data": null,
        "input_dim": null,
        "num_classes": null,
        "model": null,
        "logits": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "Claim: this is actually the same as training a linear classifier",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 275,
          "function_name": "multi_layer_perceptron_linear",
          "code": "text(\"This is because matrix muliplication is associative.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This is because matrix muliplication is associative.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 276,
          "function_name": "multi_layer_perceptron_linear",
          "code": "x = torch.tensor([[1., 2, 3], [4, 5, 6]])  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            [
              1.0,
              2.0,
              3.0
            ],
            [
              4.0,
              5.0,
              6.0
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            2,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 277,
          "function_name": "multi_layer_perceptron_linear",
          "code": "w1 = torch.tensor([[1., 2], [3, 4], [5, 6]])  # @inspect w1"
        }
      ],
      "env": {
        "w1": {
          "type": "torch.Tensor",
          "contents": [
            [
              1.0,
              2.0
            ],
            [
              3.0,
              4.0
            ],
            [
              5.0,
              6.0
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 278,
          "function_name": "multi_layer_perceptron_linear",
          "code": "w2 = torch.tensor([[1., 0, -1], [2, -1, 2]])  # @inspect w2"
        }
      ],
      "env": {
        "w2": {
          "type": "torch.Tensor",
          "contents": [
            [
              1.0,
              0.0,
              -1.0
            ],
            [
              2.0,
              -1.0,
              2.0
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            2,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 279,
          "function_name": "multi_layer_perceptron_linear",
          "code": "logits = (x @ w1) @ w2  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            [
              78.0,
              -28.0,
              34.0
            ],
            [
              177.0,
              -64.0,
              79.0
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            2,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 281,
          "function_name": "multi_layer_perceptron_linear",
          "code": "text(\"Alternatively, collapse `w1` and `w2` into a single matrix:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Alternatively, collapse `w1` and `w2` into a single matrix:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 282,
          "function_name": "multi_layer_perceptron_linear",
          "code": "w = w1 @ w2  # A single weight vector @inspect w"
        }
      ],
      "env": {
        "w": {
          "type": "torch.Tensor",
          "contents": [
            [
              5.0,
              -2.0,
              3.0
            ],
            [
              11.0,
              -4.0,
              5.0
            ],
            [
              17.0,
              -6.0,
              7.0
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            3,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 283,
          "function_name": "multi_layer_perceptron_linear",
          "code": "logits2 = x @ w  # This is just a linear classifier!  @inspect logits2"
        }
      ],
      "env": {
        "logits2": {
          "type": "torch.Tensor",
          "contents": [
            [
              78.0,
              -28.0,
              34.0
            ],
            [
              177.0,
              -64.0,
              79.0
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            2,
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 285,
          "function_name": "multi_layer_perceptron_linear",
          "code": "text(\"Ok, so how do we actually go beyond linear classifiers?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Ok, so how do we actually go beyond linear classifiers?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 18,
          "function_name": "main",
          "code": "multi_layer_perceptron_linear()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 307,
          "function_name": "multi_layer_perceptron",
          "code": "def multi_layer_perceptron():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 308,
          "function_name": "multi_layer_perceptron",
          "code": "text(\"Problem: linear networks aren't more expressive (though they are useful for studying training dynamics).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Problem: linear networks aren't more expressive (though they are useful for studying training dynamics).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 309,
          "function_name": "multi_layer_perceptron",
          "code": "text(\"We can make things more expressive if we add a non-linear *activation function*.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We can make things more expressive if we add a non-linear *activation function*.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 311,
          "function_name": "multi_layer_perceptron",
          "code": "text(\"There are many choices (sigmoid, tanh, ReLU, GeLU, Swish, etc.).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "There are many choices (sigmoid, tanh, ReLU, GeLU, Swish, etc.).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 312,
          "function_name": "multi_layer_perceptron",
          "code": "text(\"We will use the *rectified linear unit* (ReLU) for simplicity.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We will use the *rectified linear unit* (ReLU) for simplicity.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 313,
          "function_name": "multi_layer_perceptron",
          "code": "x = torch.tensor([-1., 0, 1])  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            -1.0,
            0.0,
            1.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 314,
          "function_name": "multi_layer_perceptron",
          "code": "y = relu(x)  # @inspect y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 314,
          "function_name": "multi_layer_perceptron",
          "code": "y = relu(x)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 342,
          "function_name": "relu",
          "code": "def relu(x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 314,
          "function_name": "multi_layer_perceptron",
          "code": "y = relu(x)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 343,
          "function_name": "relu",
          "code": "return torch.maximum(x, torch.zeros_like(x))"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 314,
          "function_name": "multi_layer_perceptron",
          "code": "y = relu(x)  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "torch.Tensor",
          "contents": [
            0.0,
            0.0,
            1.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 315,
          "function_name": "multi_layer_perceptron",
          "code": "plot(make_plot(\"relu\", \"x\", \"y\", lambda x: np.maximum(x, 0)))  # @stepover"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "x": -3.0,
                  "y": 0.0
                },
                {
                  "x": -2.793103448275862,
                  "y": 0.0
                },
                {
                  "x": -2.586206896551724,
                  "y": 0.0
                },
                {
                  "x": -2.3793103448275863,
                  "y": 0.0
                },
                {
                  "x": -2.1724137931034484,
                  "y": 0.0
                },
                {
                  "x": -1.9655172413793103,
                  "y": 0.0
                },
                {
                  "x": -1.7586206896551724,
                  "y": 0.0
                },
                {
                  "x": -1.5517241379310345,
                  "y": 0.0
                },
                {
                  "x": -1.3448275862068966,
                  "y": 0.0
                },
                {
                  "x": -1.1379310344827587,
                  "y": 0.0
                },
                {
                  "x": -0.9310344827586206,
                  "y": 0.0
                },
                {
                  "x": -0.7241379310344827,
                  "y": 0.0
                },
                {
                  "x": -0.5172413793103448,
                  "y": 0.0
                },
                {
                  "x": -0.31034482758620685,
                  "y": 0.0
                },
                {
                  "x": -0.10344827586206895,
                  "y": 0.0
                },
                {
                  "x": 0.10344827586206895,
                  "y": 0.10344827586206895
                },
                {
                  "x": 0.31034482758620685,
                  "y": 0.31034482758620685
                },
                {
                  "x": 0.5172413793103448,
                  "y": 0.5172413793103448
                },
                {
                  "x": 0.7241379310344827,
                  "y": 0.7241379310344827
                },
                {
                  "x": 0.9310344827586206,
                  "y": 0.9310344827586206
                },
                {
                  "x": 1.137931034482759,
                  "y": 1.137931034482759
                },
                {
                  "x": 1.3448275862068968,
                  "y": 1.3448275862068968
                },
                {
                  "x": 1.5517241379310347,
                  "y": 1.5517241379310347
                },
                {
                  "x": 1.7586206896551726,
                  "y": 1.7586206896551726
                },
                {
                  "x": 1.9655172413793105,
                  "y": 1.9655172413793105
                },
                {
                  "x": 2.1724137931034484,
                  "y": 2.1724137931034484
                },
                {
                  "x": 2.3793103448275863,
                  "y": 2.3793103448275863
                },
                {
                  "x": 2.586206896551724,
                  "y": 2.586206896551724
                },
                {
                  "x": 2.793103448275862,
                  "y": 2.793103448275862
                },
                {
                  "x": 3.0,
                  "y": 3.0
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "x",
                "type": "quantitative"
              },
              "y": {
                "field": "y",
                "type": "quantitative"
              }
            },
            "title": "relu",
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 317,
          "function_name": "multi_layer_perceptron",
          "code": "text(\"Where does the name come from?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Where does the name come from?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 318,
          "function_name": "multi_layer_perceptron",
          "code": "text(\"Perceptrons came from Frank Rosenblatt's 1958 paper (linear classifier)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Perceptrons came from Frank Rosenblatt's 1958 paper (linear classifier)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 319,
          "function_name": "multi_layer_perceptron",
          "code": "text(\"1970s: multi-layer perceptrons (neural networks)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "1970s: multi-layer perceptrons (neural networks)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 322,
          "function_name": "multi_layer_perceptron",
          "code": "training_data = get_training_data()  # @inspect training_data @stepover"
        }
      ],
      "env": {
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "deep_learning.Example",
              "contents": {
                "x": {
                  "type": "torch.Tensor",
                  "contents": [
                    1.0,
                    2.0,
                    0.0,
                    1.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    4
                  ]
                },
                "target_y": {
                  "type": "torch.Tensor",
                  "contents": [
                    0.0,
                    1.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "deep_learning.Example",
              "contents": {
                "x": {
                  "type": "torch.Tensor",
                  "contents": [
                    -1.0,
                    0.0,
                    2.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    4
                  ]
                },
                "target_y": {
                  "type": "torch.Tensor",
                  "contents": [
                    1.0,
                    0.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "deep_learning.Example",
              "contents": {
                "x": {
                  "type": "torch.Tensor",
                  "contents": [
                    0.0,
                    3.0,
                    1.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    4
                  ]
                },
                "target_y": {
                  "type": "torch.Tensor",
                  "contents": [
                    0.0,
                    0.0,
                    1.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 323,
          "function_name": "multi_layer_perceptron",
          "code": "input_dim = len(training_data[0].x)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 324,
          "function_name": "multi_layer_perceptron",
          "code": "num_classes = len(training_data[0].target_y)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 327,
          "function_name": "multi_layer_perceptron",
          "code": "torch.manual_seed(2)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 328,
          "function_name": "multi_layer_perceptron",
          "code": "model = MultiLayerPerceptron(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 328,
          "function_name": "multi_layer_perceptron",
          "code": "model = MultiLayerPerceptron(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 347,
          "function_name": "__init__",
          "code": "def __init__(self, input_dim: int, hidden_dim: int, num_classes: int):  # @inspect input_dim hidden_dim num_classes"
        }
      ],
      "env": {
        "input_dim": {
          "type": "int",
          "contents": 4,
          "dtype": null,
          "shape": null
        },
        "hidden_dim": {
          "type": "int",
          "contents": 5,
          "dtype": null,
          "shape": null
        },
        "num_classes": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 328,
          "function_name": "multi_layer_perceptron",
          "code": "model = MultiLayerPerceptron(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 348,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 328,
          "function_name": "multi_layer_perceptron",
          "code": "model = MultiLayerPerceptron(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 350,
          "function_name": "__init__",
          "code": "self.w1 = nn.Linear(input_dim, hidden_dim)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 328,
          "function_name": "multi_layer_perceptron",
          "code": "model = MultiLayerPerceptron(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 352,
          "function_name": "__init__",
          "code": "self.w2 = nn.Linear(hidden_dim, num_classes)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 328,
          "function_name": "multi_layer_perceptron",
          "code": "model = MultiLayerPerceptron(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        }
      ],
      "env": {
        "model": {
          "type": "deep_learning.MultiLayerPerceptron",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "w1.weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      0.11469507217407227,
                      -0.11898714303970337,
                      0.13711434602737427,
                      -0.025538921356201172
                    ],
                    [
                      0.21359384059906006,
                      0.11903637647628784,
                      -0.05746734142303467,
                      -0.40423136949539185
                    ],
                    [
                      0.11415719985961914,
                      -0.4426723122596741,
                      0.06571400165557861,
                      0.033228933811187744
                    ],
                    [
                      -0.10994917154312134,
                      0.40884846448898315,
                      0.03336840867996216,
                      0.20733922719955444
                    ],
                    [
                      0.21159738302230835,
                      -0.29496580362319946,
                      -0.19221723079681396,
                      0.48085904121398926
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    5,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "w1.bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    -0.48973870277404785,
                    -0.033959150314331055,
                    -0.03962486982345581,
                    0.3546547293663025,
                    -0.0475347638130188
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    5
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "w2.weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      0.11775930970907211,
                      -0.021467894315719604,
                      -0.2504158020019531,
                      -0.2534762918949127,
                      -0.21727146208286285
                    ],
                    [
                      -0.40625083446502686,
                      -0.29023370146751404,
                      0.105251245200634,
                      0.2943318486213684,
                      0.02203076332807541
                    ],
                    [
                      -0.20499813556671143,
                      0.19654300808906555,
                      -0.17167305946350098,
                      -0.09906625002622604,
                      -0.24516575038433075
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    5
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "w2.bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    -0.14042618870735168,
                    -0.4143880009651184,
                    0.19082149863243103
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 329,
          "function_name": "multi_layer_perceptron",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 329,
          "function_name": "multi_layer_perceptron",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 354,
          "function_name": "forward",
          "code": "def forward(self, x):  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            1.0,
            2.0,
            0.0,
            1.0
          ],
          "dtype": "torch.float32",
          "shape": [
            4
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 329,
          "function_name": "multi_layer_perceptron",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 356,
          "function_name": "forward",
          "code": "x_transformed = self.w1(x)  # @inspect x_transformed"
        }
      ],
      "env": {
        "x_transformed": {
          "type": "torch.Tensor",
          "contents": [
            -0.6385568380355835,
            0.013476073741912842,
            -0.7775833606719971,
            1.2697417736053467,
            0.05499005317687988
          ],
          "dtype": "torch.float32",
          "shape": [
            5
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 329,
          "function_name": "multi_layer_perceptron",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 357,
          "function_name": "forward",
          "code": "hidden = relu(x_transformed)  # @inspect hidden"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 329,
          "function_name": "multi_layer_perceptron",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 357,
          "function_name": "forward",
          "code": "hidden = relu(x_transformed)  # @inspect hidden"
        },
        {
          "path": "deep_learning.py",
          "line_number": 342,
          "function_name": "relu",
          "code": "def relu(x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 329,
          "function_name": "multi_layer_perceptron",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 357,
          "function_name": "forward",
          "code": "hidden = relu(x_transformed)  # @inspect hidden"
        },
        {
          "path": "deep_learning.py",
          "line_number": 343,
          "function_name": "relu",
          "code": "return torch.maximum(x, torch.zeros_like(x))"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 329,
          "function_name": "multi_layer_perceptron",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 357,
          "function_name": "forward",
          "code": "hidden = relu(x_transformed)  # @inspect hidden"
        }
      ],
      "env": {
        "hidden": {
          "type": "torch.Tensor",
          "contents": [
            0.0,
            0.013476073741912842,
            0.0,
            1.2697417736053467,
            0.05499005317687988
          ],
          "dtype": "torch.float32",
          "shape": [
            5
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 329,
          "function_name": "multi_layer_perceptron",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 359,
          "function_name": "forward",
          "code": "logits = self.w2(hidden)  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            -0.4745126962661743,
            -0.04336228966712952,
            0.05419988930225372
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 329,
          "function_name": "multi_layer_perceptron",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 360,
          "function_name": "forward",
          "code": "return logits"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 329,
          "function_name": "multi_layer_perceptron",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            -0.4745126962661743,
            -0.04336228966712952,
            0.05419988930225372
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 330,
          "function_name": "multi_layer_perceptron",
          "code": "text(\"Terminology: activations = hidden units = neurons\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Terminology: activations = hidden units = neurons",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 331,
          "function_name": "multi_layer_perceptron",
          "code": "text(\"Caution: ReLU has zero gradient when x <= 0; can result in \\\"dead neurons\\\".\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Caution: ReLU has zero gradient when x <= 0; can result in \"dead neurons\".",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 332,
          "function_name": "multi_layer_perceptron",
          "code": "text(\"Fix: use activation function that doesn't have (near-)zero gradients (e.g., Leaky ReLU, GeLU, Swish, etc.)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Fix: use activation function that doesn't have (near-)zero gradients (e.g., Leaky ReLU, GeLU, Swish, etc.)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 333,
          "function_name": "multi_layer_perceptron",
          "code": "text(\"Balance tradeoff between linear (better gradients) with non-linear (better expressivity).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Balance tradeoff between linear (better gradients) with non-linear (better expressivity).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 336,
          "function_name": "multi_layer_perceptron",
          "code": "result = train_model(model, training_data)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 337,
          "function_name": "multi_layer_perceptron",
          "code": "plot(result)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "step": 0,
                  "loss": 1.0542584657669067
                },
                {
                  "step": 1,
                  "loss": 1.0384845733642578
                },
                {
                  "step": 2,
                  "loss": 1.0219132900238037
                },
                {
                  "step": 3,
                  "loss": 1.0048547983169556
                },
                {
                  "step": 4,
                  "loss": 0.9861130714416504
                },
                {
                  "step": 5,
                  "loss": 0.9659883379936218
                },
                {
                  "step": 6,
                  "loss": 0.9444713592529297
                },
                {
                  "step": 7,
                  "loss": 0.9214768409729004
                },
                {
                  "step": 8,
                  "loss": 0.8969486355781555
                },
                {
                  "step": 9,
                  "loss": 0.8735043406486511
                },
                {
                  "step": 10,
                  "loss": 0.8549182415008545
                },
                {
                  "step": 11,
                  "loss": 0.8361285328865051
                },
                {
                  "step": 12,
                  "loss": 0.8171346187591553
                },
                {
                  "step": 13,
                  "loss": 0.7979393005371094
                },
                {
                  "step": 14,
                  "loss": 0.7785513997077942
                },
                {
                  "step": 15,
                  "loss": 0.7597360014915466
                },
                {
                  "step": 16,
                  "loss": 0.7413558959960938
                },
                {
                  "step": 17,
                  "loss": 0.7229640483856201
                },
                {
                  "step": 18,
                  "loss": 0.704580545425415
                },
                {
                  "step": 19,
                  "loss": 0.6862306594848633
                },
                {
                  "step": 20,
                  "loss": 0.6679452061653137
                },
                {
                  "step": 21,
                  "loss": 0.6497593522071838
                },
                {
                  "step": 22,
                  "loss": 0.6317119002342224
                },
                {
                  "step": 23,
                  "loss": 0.6138441562652588
                },
                {
                  "step": 24,
                  "loss": 0.5961987972259521
                },
                {
                  "step": 25,
                  "loss": 0.5788187384605408
                },
                {
                  "step": 26,
                  "loss": 0.5617454648017883
                },
                {
                  "step": 27,
                  "loss": 0.5455752611160278
                },
                {
                  "step": 28,
                  "loss": 0.5314568877220154
                },
                {
                  "step": 29,
                  "loss": 0.5173982977867126
                },
                {
                  "step": 30,
                  "loss": 0.5031547546386719
                },
                {
                  "step": 31,
                  "loss": 0.4902059733867645
                },
                {
                  "step": 32,
                  "loss": 0.4772851765155792
                },
                {
                  "step": 33,
                  "loss": 0.4642297029495239
                },
                {
                  "step": 34,
                  "loss": 0.45234641432762146
                },
                {
                  "step": 35,
                  "loss": 0.4406451880931854
                },
                {
                  "step": 36,
                  "loss": 0.42875757813453674
                },
                {
                  "step": 37,
                  "loss": 0.41790059208869934
                },
                {
                  "step": 38,
                  "loss": 0.40738973021507263
                },
                {
                  "step": 39,
                  "loss": 0.3966272175312042
                },
                {
                  "step": 40,
                  "loss": 0.38675400614738464
                },
                {
                  "step": 41,
                  "loss": 0.37735018134117126
                },
                {
                  "step": 42,
                  "loss": 0.3676445484161377
                },
                {
                  "step": 43,
                  "loss": 0.35869672894477844
                },
                {
                  "step": 44,
                  "loss": 0.3502950966358185
                },
                {
                  "step": 45,
                  "loss": 0.3415616452693939
                },
                {
                  "step": 46,
                  "loss": 0.333467960357666
                },
                {
                  "step": 47,
                  "loss": 0.32595962285995483
                },
                {
                  "step": 48,
                  "loss": 0.3181065320968628
                },
                {
                  "step": 49,
                  "loss": 0.3107893764972687
                },
                {
                  "step": 50,
                  "loss": 0.3040701746940613
                },
                {
                  "step": 51,
                  "loss": 0.2970055639743805
                },
                {
                  "step": 52,
                  "loss": 0.2903864085674286
                },
                {
                  "step": 53,
                  "loss": 0.28436172008514404
                },
                {
                  "step": 54,
                  "loss": 0.2779981791973114
                },
                {
                  "step": 55,
                  "loss": 0.2720014750957489
                },
                {
                  "step": 56,
                  "loss": 0.2665870487689972
                },
                {
                  "step": 57,
                  "loss": 0.2608441412448883
                },
                {
                  "step": 58,
                  "loss": 0.25539979338645935
                },
                {
                  "step": 59,
                  "loss": 0.2505218982696533
                },
                {
                  "step": 60,
                  "loss": 0.24532711505889893
                },
                {
                  "step": 61,
                  "loss": 0.24037134647369385
                },
                {
                  "step": 62,
                  "loss": 0.23596592247486115
                },
                {
                  "step": 63,
                  "loss": 0.23125500977039337
                },
                {
                  "step": 64,
                  "loss": 0.22673074901103973
                },
                {
                  "step": 65,
                  "loss": 0.22274257242679596
                },
                {
                  "step": 66,
                  "loss": 0.21845881640911102
                },
                {
                  "step": 67,
                  "loss": 0.21433037519454956
                },
                {
                  "step": 68,
                  "loss": 0.21066522598266602
                },
                {
                  "step": 69,
                  "loss": 0.20688320696353912
                },
                {
                  "step": 70,
                  "loss": 0.20320625603199005
                },
                {
                  "step": 71,
                  "loss": 0.19979913532733917
                },
                {
                  "step": 72,
                  "loss": 0.1963837891817093
                },
                {
                  "step": 73,
                  "loss": 0.19304127991199493
                },
                {
                  "step": 74,
                  "loss": 0.18986092507839203
                },
                {
                  "step": 75,
                  "loss": 0.18682442605495453
                },
                {
                  "step": 76,
                  "loss": 0.1837153285741806
                },
                {
                  "step": 77,
                  "loss": 0.18075405061244965
                },
                {
                  "step": 78,
                  "loss": 0.17807245254516602
                },
                {
                  "step": 79,
                  "loss": 0.17513079941272736
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "step",
                "type": "quantitative"
              },
              "y": {
                "field": "loss",
                "type": "quantitative"
              }
            },
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 339,
          "function_name": "multi_layer_perceptron",
          "code": "text(\"Summary: x -[linear][relu]-> hidden -[linear]-> logits\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary: x -[linear][relu]-> hidden -[linear]-> logits",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 19,
          "function_name": "main",
          "code": "multi_layer_perceptron()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 366,
          "function_name": "deep_neural_networks",
          "code": "def deep_neural_networks():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 367,
          "function_name": "deep_neural_networks",
          "code": "text(\"Problem: a single MLP layer might not be expressive enough.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Problem: a single MLP layer might not be expressive enough.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 368,
          "function_name": "deep_neural_networks",
          "code": "text(\"Solution: stack multiple MLP layers.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Solution: stack multiple MLP layers.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 369,
          "function_name": "deep_neural_networks",
          "code": "image(\"images/more-layers.webp\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/more-layers.webp",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 371,
          "function_name": "deep_neural_networks",
          "code": "text(\"Intuition: each layer learns more abstract features of the input.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Intuition: each layer learns more abstract features of the input.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 372,
          "function_name": "deep_neural_networks",
          "code": "image(\"images/feature-hierarchy.png\", width=400)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/feature-hierarchy.png",
          "style": {
            "width": 400
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 374,
          "function_name": "deep_neural_networks",
          "code": "text(\"Formally: compose multiple MLP layers.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Formally: compose multiple MLP layers.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 375,
          "function_name": "deep_neural_networks",
          "code": "training_data = get_training_data()  # @inspect training_data @stepover"
        }
      ],
      "env": {
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "deep_learning.Example",
              "contents": {
                "x": {
                  "type": "torch.Tensor",
                  "contents": [
                    1.0,
                    2.0,
                    0.0,
                    1.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    4
                  ]
                },
                "target_y": {
                  "type": "torch.Tensor",
                  "contents": [
                    0.0,
                    1.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "deep_learning.Example",
              "contents": {
                "x": {
                  "type": "torch.Tensor",
                  "contents": [
                    -1.0,
                    0.0,
                    2.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    4
                  ]
                },
                "target_y": {
                  "type": "torch.Tensor",
                  "contents": [
                    1.0,
                    0.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "deep_learning.Example",
              "contents": {
                "x": {
                  "type": "torch.Tensor",
                  "contents": [
                    0.0,
                    3.0,
                    1.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    4
                  ]
                },
                "target_y": {
                  "type": "torch.Tensor",
                  "contents": [
                    0.0,
                    0.0,
                    1.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 376,
          "function_name": "deep_neural_networks",
          "code": "input_dim = len(training_data[0].x)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 377,
          "function_name": "deep_neural_networks",
          "code": "num_classes = len(training_data[0].target_y)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 380,
          "function_name": "deep_neural_networks",
          "code": "torch.manual_seed(2)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 381,
          "function_name": "deep_neural_networks",
          "code": "model = DNN(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 381,
          "function_name": "deep_neural_networks",
          "code": "model = DNN(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 415,
          "function_name": "__init__",
          "code": "def __init__(self, input_dim: int, hidden_dim: int, num_classes: int):  # @inspect input_dim hidden_dim num_classes"
        }
      ],
      "env": {
        "input_dim": {
          "type": "int",
          "contents": 4,
          "dtype": null,
          "shape": null
        },
        "hidden_dim": {
          "type": "int",
          "contents": 5,
          "dtype": null,
          "shape": null
        },
        "num_classes": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 381,
          "function_name": "deep_neural_networks",
          "code": "model = DNN(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 416,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 381,
          "function_name": "deep_neural_networks",
          "code": "model = DNN(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 417,
          "function_name": "__init__",
          "code": "self.layer1 = MultiLayerPerceptron(input_dim, hidden_dim, hidden_dim)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 381,
          "function_name": "deep_neural_networks",
          "code": "model = DNN(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 417,
          "function_name": "__init__",
          "code": "self.layer1 = MultiLayerPerceptron(input_dim, hidden_dim, hidden_dim)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 347,
          "function_name": "__init__",
          "code": "def __init__(self, input_dim: int, hidden_dim: int, num_classes: int):  # @inspect input_dim hidden_dim num_classes"
        }
      ],
      "env": {
        "input_dim": {
          "type": "int",
          "contents": 4,
          "dtype": null,
          "shape": null
        },
        "hidden_dim": {
          "type": "int",
          "contents": 5,
          "dtype": null,
          "shape": null
        },
        "num_classes": {
          "type": "int",
          "contents": 5,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 381,
          "function_name": "deep_neural_networks",
          "code": "model = DNN(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 417,
          "function_name": "__init__",
          "code": "self.layer1 = MultiLayerPerceptron(input_dim, hidden_dim, hidden_dim)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 348,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 381,
          "function_name": "deep_neural_networks",
          "code": "model = DNN(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 417,
          "function_name": "__init__",
          "code": "self.layer1 = MultiLayerPerceptron(input_dim, hidden_dim, hidden_dim)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 350,
          "function_name": "__init__",
          "code": "self.w1 = nn.Linear(input_dim, hidden_dim)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 381,
          "function_name": "deep_neural_networks",
          "code": "model = DNN(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 417,
          "function_name": "__init__",
          "code": "self.layer1 = MultiLayerPerceptron(input_dim, hidden_dim, hidden_dim)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 352,
          "function_name": "__init__",
          "code": "self.w2 = nn.Linear(hidden_dim, num_classes)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 381,
          "function_name": "deep_neural_networks",
          "code": "model = DNN(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 417,
          "function_name": "__init__",
          "code": "self.layer1 = MultiLayerPerceptron(input_dim, hidden_dim, hidden_dim)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 381,
          "function_name": "deep_neural_networks",
          "code": "model = DNN(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 418,
          "function_name": "__init__",
          "code": "self.layer2 = MultiLayerPerceptron(hidden_dim, hidden_dim, num_classes)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 381,
          "function_name": "deep_neural_networks",
          "code": "model = DNN(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 418,
          "function_name": "__init__",
          "code": "self.layer2 = MultiLayerPerceptron(hidden_dim, hidden_dim, num_classes)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 347,
          "function_name": "__init__",
          "code": "def __init__(self, input_dim: int, hidden_dim: int, num_classes: int):  # @inspect input_dim hidden_dim num_classes"
        }
      ],
      "env": {
        "input_dim": {
          "type": "int",
          "contents": 5,
          "dtype": null,
          "shape": null
        },
        "hidden_dim": {
          "type": "int",
          "contents": 5,
          "dtype": null,
          "shape": null
        },
        "num_classes": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 381,
          "function_name": "deep_neural_networks",
          "code": "model = DNN(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 418,
          "function_name": "__init__",
          "code": "self.layer2 = MultiLayerPerceptron(hidden_dim, hidden_dim, num_classes)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 348,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 381,
          "function_name": "deep_neural_networks",
          "code": "model = DNN(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 418,
          "function_name": "__init__",
          "code": "self.layer2 = MultiLayerPerceptron(hidden_dim, hidden_dim, num_classes)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 350,
          "function_name": "__init__",
          "code": "self.w1 = nn.Linear(input_dim, hidden_dim)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 381,
          "function_name": "deep_neural_networks",
          "code": "model = DNN(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 418,
          "function_name": "__init__",
          "code": "self.layer2 = MultiLayerPerceptron(hidden_dim, hidden_dim, num_classes)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 352,
          "function_name": "__init__",
          "code": "self.w2 = nn.Linear(hidden_dim, num_classes)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 381,
          "function_name": "deep_neural_networks",
          "code": "model = DNN(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 418,
          "function_name": "__init__",
          "code": "self.layer2 = MultiLayerPerceptron(hidden_dim, hidden_dim, num_classes)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 381,
          "function_name": "deep_neural_networks",
          "code": "model = DNN(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        }
      ],
      "env": {
        "model": {
          "type": "deep_learning.DNN",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "layer1.w1.weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      0.11469507217407227,
                      -0.11898714303970337,
                      0.13711434602737427,
                      -0.025538921356201172
                    ],
                    [
                      0.21359384059906006,
                      0.11903637647628784,
                      -0.05746734142303467,
                      -0.40423136949539185
                    ],
                    [
                      0.11415719985961914,
                      -0.4426723122596741,
                      0.06571400165557861,
                      0.033228933811187744
                    ],
                    [
                      -0.10994917154312134,
                      0.40884846448898315,
                      0.03336840867996216,
                      0.20733922719955444
                    ],
                    [
                      0.21159738302230835,
                      -0.29496580362319946,
                      -0.19221723079681396,
                      0.48085904121398926
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    5,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "layer1.w1.bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    -0.48973870277404785,
                    -0.033959150314331055,
                    -0.03962486982345581,
                    0.3546547293663025,
                    -0.0475347638130188
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    5
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "layer1.w2.weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      0.11775930970907211,
                      -0.021467894315719604,
                      -0.2504158020019531,
                      -0.2534762918949127,
                      -0.21727146208286285
                    ],
                    [
                      -0.40625083446502686,
                      -0.29023370146751404,
                      0.105251245200634,
                      0.2943318486213684,
                      0.02203076332807541
                    ],
                    [
                      -0.20499813556671143,
                      0.19654300808906555,
                      -0.17167305946350098,
                      -0.09906625002622604,
                      -0.24516575038433075
                    ],
                    [
                      -0.14042618870735168,
                      -0.4143880009651184,
                      0.19082149863243103,
                      0.17389264702796936,
                      0.08883162587881088
                    ],
                    [
                      0.2195734679698944,
                      0.18954335153102875,
                      0.019786113873124123,
                      0.047362394630908966,
                      0.03414975851774216
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    5,
                    5
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "layer1.w2.bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.23863214254379272,
                    0.3004142642021179,
                    0.32116448879241943,
                    0.25920748710632324,
                    -0.10903490334749222
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    5
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "layer2.w1.weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.01990889199078083,
                      -0.09088381379842758,
                      0.2601584196090698,
                      0.04966669902205467,
                      0.41391271352767944
                    ],
                    [
                      0.22682331502437592,
                      -0.38221514225006104,
                      0.13082437217235565,
                      0.42971599102020264,
                      0.3972347378730774
                    ],
                    [
                      -0.007027856074273586,
                      0.1483648270368576,
                      -0.4195094108581543,
                      -0.14257210493087769,
                      0.21807892620563507
                    ],
                    [
                      -0.40739500522613525,
                      0.38961389660835266,
                      -0.29409849643707275,
                      0.1414189636707306,
                      -0.016930775716900826
                    ],
                    [
                      0.07880672812461853,
                      0.04332822188735008,
                      -0.4180697798728943,
                      -0.09606153517961502,
                      -0.2826886475086212
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    5,
                    5
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "layer2.w1.bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.38020050525665283,
                    -0.054895274341106415,
                    -0.4452984631061554,
                    0.10831465572118759,
                    0.19421155750751495
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    5
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "layer2.w2.weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.2001989781856537,
                      -0.041952185332775116,
                      0.19333505630493164,
                      -0.27825927734375,
                      -0.2364044487476349
                    ],
                    [
                      -0.043141040951013565,
                      -0.3140575587749481,
                      0.27485668659210205,
                      0.03657811880111694,
                      0.26756981015205383
                    ],
                    [
                      0.23941834270954132,
                      -0.3446503281593323,
                      -0.2787456512451172,
                      -0.3058861196041107,
                      -0.14373484253883362
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    5
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "layer2.w2.bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    -0.16342274844646454,
                    -0.07205977290868759,
                    -0.4326346814632416
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 420,
          "function_name": "forward",
          "code": "def forward(self, x):  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            1.0,
            2.0,
            0.0,
            1.0
          ],
          "dtype": "torch.float32",
          "shape": [
            4
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 421,
          "function_name": "forward",
          "code": "x = self.layer1(x)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 421,
          "function_name": "forward",
          "code": "x = self.layer1(x)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 354,
          "function_name": "forward",
          "code": "def forward(self, x):  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            1.0,
            2.0,
            0.0,
            1.0
          ],
          "dtype": "torch.float32",
          "shape": [
            4
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 421,
          "function_name": "forward",
          "code": "x = self.layer1(x)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 356,
          "function_name": "forward",
          "code": "x_transformed = self.w1(x)  # @inspect x_transformed"
        }
      ],
      "env": {
        "x_transformed": {
          "type": "torch.Tensor",
          "contents": [
            -0.6385568380355835,
            0.013476073741912842,
            -0.7775833606719971,
            1.2697417736053467,
            0.05499005317687988
          ],
          "dtype": "torch.float32",
          "shape": [
            5
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 421,
          "function_name": "forward",
          "code": "x = self.layer1(x)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 357,
          "function_name": "forward",
          "code": "hidden = relu(x_transformed)  # @inspect hidden"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 421,
          "function_name": "forward",
          "code": "x = self.layer1(x)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 357,
          "function_name": "forward",
          "code": "hidden = relu(x_transformed)  # @inspect hidden"
        },
        {
          "path": "deep_learning.py",
          "line_number": 342,
          "function_name": "relu",
          "code": "def relu(x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 421,
          "function_name": "forward",
          "code": "x = self.layer1(x)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 357,
          "function_name": "forward",
          "code": "hidden = relu(x_transformed)  # @inspect hidden"
        },
        {
          "path": "deep_learning.py",
          "line_number": 343,
          "function_name": "relu",
          "code": "return torch.maximum(x, torch.zeros_like(x))"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 421,
          "function_name": "forward",
          "code": "x = self.layer1(x)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 357,
          "function_name": "forward",
          "code": "hidden = relu(x_transformed)  # @inspect hidden"
        }
      ],
      "env": {
        "hidden": {
          "type": "torch.Tensor",
          "contents": [
            0.0,
            0.013476073741912842,
            0.0,
            1.2697417736053467,
            0.05499005317687988
          ],
          "dtype": "torch.float32",
          "shape": [
            5
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 421,
          "function_name": "forward",
          "code": "x = self.layer1(x)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 359,
          "function_name": "forward",
          "code": "logits = self.w2(hidden)  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            -0.09545436501502991,
            0.6714400053024292,
            0.18454287946224213,
            0.47930675745010376,
            -0.04446469992399216
          ],
          "dtype": "torch.float32",
          "shape": [
            5
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 421,
          "function_name": "forward",
          "code": "x = self.layer1(x)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 360,
          "function_name": "forward",
          "code": "return logits"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 421,
          "function_name": "forward",
          "code": "x = self.layer1(x)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 422,
          "function_name": "forward",
          "code": "x = self.layer2(x)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 422,
          "function_name": "forward",
          "code": "x = self.layer2(x)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 354,
          "function_name": "forward",
          "code": "def forward(self, x):  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            -0.09545436501502991,
            0.6714400053024292,
            0.18454287946224213,
            0.47930675745010376,
            -0.04446469992399216
          ],
          "dtype": "torch.float32",
          "shape": [
            5
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 422,
          "function_name": "forward",
          "code": "x = self.layer2(x)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 356,
          "function_name": "forward",
          "code": "x_transformed = self.w1(x)  # @inspect x_transformed"
        }
      ],
      "env": {
        "x_transformed": {
          "type": "torch.Tensor",
          "contents": [
            0.37448933720588684,
            -0.1207355186343193,
            -0.500459611415863,
            0.42306676506996155,
            0.10515633225440979
          ],
          "dtype": "torch.float32",
          "shape": [
            5
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 422,
          "function_name": "forward",
          "code": "x = self.layer2(x)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 357,
          "function_name": "forward",
          "code": "hidden = relu(x_transformed)  # @inspect hidden"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 422,
          "function_name": "forward",
          "code": "x = self.layer2(x)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 357,
          "function_name": "forward",
          "code": "hidden = relu(x_transformed)  # @inspect hidden"
        },
        {
          "path": "deep_learning.py",
          "line_number": 342,
          "function_name": "relu",
          "code": "def relu(x: torch.Tensor) -> torch.Tensor:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 422,
          "function_name": "forward",
          "code": "x = self.layer2(x)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 357,
          "function_name": "forward",
          "code": "hidden = relu(x_transformed)  # @inspect hidden"
        },
        {
          "path": "deep_learning.py",
          "line_number": 343,
          "function_name": "relu",
          "code": "return torch.maximum(x, torch.zeros_like(x))"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 422,
          "function_name": "forward",
          "code": "x = self.layer2(x)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 357,
          "function_name": "forward",
          "code": "hidden = relu(x_transformed)  # @inspect hidden"
        }
      ],
      "env": {
        "hidden": {
          "type": "torch.Tensor",
          "contents": [
            0.37448933720588684,
            0.0,
            0.0,
            0.42306676506996155,
            0.10515633225440979
          ],
          "dtype": "torch.float32",
          "shape": [
            5
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 422,
          "function_name": "forward",
          "code": "x = self.layer2(x)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 359,
          "function_name": "forward",
          "code": "logits = self.w2(hidden)  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            -0.3809767961502075,
            -0.04460398852825165,
            -0.4874999523162842
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 422,
          "function_name": "forward",
          "code": "x = self.layer2(x)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 360,
          "function_name": "forward",
          "code": "return logits"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 422,
          "function_name": "forward",
          "code": "x = self.layer2(x)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 423,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 382,
          "function_name": "deep_neural_networks",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            -0.3809767961502075,
            -0.04460398852825165,
            -0.4874999523162842
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 385,
          "function_name": "deep_neural_networks",
          "code": "result = train_model(model, training_data) # @stepover @clear logits"
        }
      ],
      "env": {
        "logits": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 386,
          "function_name": "deep_neural_networks",
          "code": "plot(result)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "step": 0,
                  "loss": 1.106336236000061
                },
                {
                  "step": 1,
                  "loss": 1.1029648780822754
                },
                {
                  "step": 2,
                  "loss": 1.0999029874801636
                },
                {
                  "step": 3,
                  "loss": 1.097091555595398
                },
                {
                  "step": 4,
                  "loss": 1.0944817066192627
                },
                {
                  "step": 5,
                  "loss": 1.0920313596725464
                },
                {
                  "step": 6,
                  "loss": 1.0897043943405151
                },
                {
                  "step": 7,
                  "loss": 1.087469458580017
                },
                {
                  "step": 8,
                  "loss": 1.0853842496871948
                },
                {
                  "step": 9,
                  "loss": 1.0834530591964722
                },
                {
                  "step": 10,
                  "loss": 1.0814181566238403
                },
                {
                  "step": 11,
                  "loss": 1.079439640045166
                },
                {
                  "step": 12,
                  "loss": 1.0775232315063477
                },
                {
                  "step": 13,
                  "loss": 1.0753014087677002
                },
                {
                  "step": 14,
                  "loss": 1.07310950756073
                },
                {
                  "step": 15,
                  "loss": 1.070938229560852
                },
                {
                  "step": 16,
                  "loss": 1.068578839302063
                },
                {
                  "step": 17,
                  "loss": 1.0659997463226318
                },
                {
                  "step": 18,
                  "loss": 1.0632737874984741
                },
                {
                  "step": 19,
                  "loss": 1.060778021812439
                },
                {
                  "step": 20,
                  "loss": 1.0575162172317505
                },
                {
                  "step": 21,
                  "loss": 1.0542114973068237
                },
                {
                  "step": 22,
                  "loss": 1.0511658191680908
                },
                {
                  "step": 23,
                  "loss": 1.0470713376998901
                },
                {
                  "step": 24,
                  "loss": 1.043004035949707
                },
                {
                  "step": 25,
                  "loss": 1.0389024019241333
                },
                {
                  "step": 26,
                  "loss": 1.0337389707565308
                },
                {
                  "step": 27,
                  "loss": 1.02863609790802
                },
                {
                  "step": 28,
                  "loss": 1.0228163003921509
                },
                {
                  "step": 29,
                  "loss": 1.0154035091400146
                },
                {
                  "step": 30,
                  "loss": 1.0074752569198608
                },
                {
                  "step": 31,
                  "loss": 0.9983609318733215
                },
                {
                  "step": 32,
                  "loss": 0.9889741539955139
                },
                {
                  "step": 33,
                  "loss": 0.9796509742736816
                },
                {
                  "step": 34,
                  "loss": 0.9687348008155823
                },
                {
                  "step": 35,
                  "loss": 0.9575050473213196
                },
                {
                  "step": 36,
                  "loss": 0.9455092549324036
                },
                {
                  "step": 37,
                  "loss": 0.9320166707038879
                },
                {
                  "step": 38,
                  "loss": 0.918319046497345
                },
                {
                  "step": 39,
                  "loss": 0.9039047360420227
                },
                {
                  "step": 40,
                  "loss": 0.8876573443412781
                },
                {
                  "step": 41,
                  "loss": 0.8715227246284485
                },
                {
                  "step": 42,
                  "loss": 0.8557220101356506
                },
                {
                  "step": 43,
                  "loss": 0.8354361653327942
                },
                {
                  "step": 44,
                  "loss": 0.8166400790214539
                },
                {
                  "step": 45,
                  "loss": 0.7975835800170898
                },
                {
                  "step": 46,
                  "loss": 0.7781146168708801
                },
                {
                  "step": 47,
                  "loss": 0.7585391998291016
                },
                {
                  "step": 48,
                  "loss": 0.7401250004768372
                },
                {
                  "step": 49,
                  "loss": 0.7213823199272156
                },
                {
                  "step": 50,
                  "loss": 0.7013553977012634
                },
                {
                  "step": 51,
                  "loss": 0.6840227246284485
                },
                {
                  "step": 52,
                  "loss": 0.6631449460983276
                },
                {
                  "step": 53,
                  "loss": 0.6437433362007141
                },
                {
                  "step": 54,
                  "loss": 0.6209772825241089
                },
                {
                  "step": 55,
                  "loss": 0.5991395711898804
                },
                {
                  "step": 56,
                  "loss": 0.5774274468421936
                },
                {
                  "step": 57,
                  "loss": 0.5552146434783936
                },
                {
                  "step": 58,
                  "loss": 0.5341670513153076
                },
                {
                  "step": 59,
                  "loss": 0.51136714220047
                },
                {
                  "step": 60,
                  "loss": 0.49121418595314026
                },
                {
                  "step": 61,
                  "loss": 0.4719422161579132
                },
                {
                  "step": 62,
                  "loss": 0.44958749413490295
                },
                {
                  "step": 63,
                  "loss": 0.4300502836704254
                },
                {
                  "step": 64,
                  "loss": 0.41282495856285095
                },
                {
                  "step": 65,
                  "loss": 0.39473357796669006
                },
                {
                  "step": 66,
                  "loss": 0.37750521302223206
                },
                {
                  "step": 67,
                  "loss": 0.3610978126525879
                },
                {
                  "step": 68,
                  "loss": 0.34602591395378113
                },
                {
                  "step": 69,
                  "loss": 0.3319375813007355
                },
                {
                  "step": 70,
                  "loss": 0.3190521001815796
                },
                {
                  "step": 71,
                  "loss": 0.304380863904953
                },
                {
                  "step": 72,
                  "loss": 0.2913825213909149
                },
                {
                  "step": 73,
                  "loss": 0.2791825532913208
                },
                {
                  "step": 74,
                  "loss": 0.2682655155658722
                },
                {
                  "step": 75,
                  "loss": 0.25660738348960876
                },
                {
                  "step": 76,
                  "loss": 0.246493861079216
                },
                {
                  "step": 77,
                  "loss": 0.2376059889793396
                },
                {
                  "step": 78,
                  "loss": 0.226920947432518
                },
                {
                  "step": 79,
                  "loss": 0.21783728897571564
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "step",
                "type": "quantitative"
              },
              "y": {
                "field": "loss",
                "type": "quantitative"
              }
            },
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 387,
          "function_name": "deep_neural_networks",
          "code": "text(\"Training is slower with more layers, especially in the beginning...\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Training is slower with more layers, especially in the beginning...",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 392,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "def vanishing_exploding_gradient_problem():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 393,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "text(\"Historically, it has been extremely hard to train deep neural networks\")  # @clear training_data model"
        }
      ],
      "env": {
        "training_data": null,
        "model": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "Historically, it has been extremely hard to train deep neural networks",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 394,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "text(\"...due to the vanishing/exploding gradient problem.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...due to the vanishing/exploding gradient problem.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 396,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "text(\"Vanishing gradient problem:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Vanishing gradient problem:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 397,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = torch.tensor(1.)  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 1.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 398,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "w = torch.tensor(0.5, requires_grad=True)  # @inspect w"
        }
      ],
      "env": {
        "w": {
          "type": "torch.Tensor",
          "contents": 0.5,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 0.5,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 0.25,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 0.125,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 0.0625,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 0.03125,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 0.015625,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 0.0078125,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 0.00390625,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 0.001953125,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 0.0009765625,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 0.00048828125,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 0.000244140625,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 0.0001220703125,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 6.103515625e-05,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 3.0517578125e-05,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 1.52587890625e-05,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 7.62939453125e-06,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 3.814697265625e-06,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 1.9073486328125e-06,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 400,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 9.5367431640625e-07,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 399,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 401,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x.backward()  # @inspect w.grad"
        }
      ],
      "env": {
        "w.grad": {
          "type": "torch.Tensor",
          "contents": 3.814697265625e-05,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 403,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "text(\"Exploding gradient problem:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Exploding gradient problem:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 404,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = torch.tensor(1.)  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 1.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 405,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "w = torch.tensor(2., requires_grad=True)  # @inspect w"
        }
      ],
      "env": {
        "w": {
          "type": "torch.Tensor",
          "contents": 2.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 2.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 4.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 8.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 16.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 32.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 64.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 128.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 256.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 512.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 1024.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 2048.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 4096.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 8192.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 16384.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 32768.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 65536.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 131072.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 262144.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 524288.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 407,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x = x * w  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": 1048576.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 406,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "for layer in range(20):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 408,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "x.backward()  # @inspect w.grad"
        }
      ],
      "env": {
        "w.grad": {
          "type": "torch.Tensor",
          "contents": 10485760.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 410,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "text(\"So ideally, you want w close to 1 for stability.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So ideally, you want w close to 1 for stability.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 411,
          "function_name": "vanishing_exploding_gradient_problem",
          "code": "text(\"The problem occurs for matrices too (want eigenvalues of w to be close to 1).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The problem occurs for matrices too (want eigenvalues of w to be close to 1).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 389,
          "function_name": "deep_neural_networks",
          "code": "vanishing_exploding_gradient_problem()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 21,
          "function_name": "main",
          "code": "deep_neural_networks()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 429,
          "function_name": "residual_connections",
          "code": "def residual_connections():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 430,
          "function_name": "residual_connections",
          "code": "text(\"Training deep neural networks is challenging because of vanishing gradients..\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Training deep neural networks is challenging because of vanishing gradients..",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 432,
          "function_name": "residual_connections",
          "code": "text(\"Solution: residual connections (skip connections, highway networks)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Solution: residual connections (skip connections, highway networks)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 433,
          "function_name": "residual_connections",
          "code": "text(\"Idea appears in many places:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Idea appears in many places:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 434,
          "function_name": "residual_connections",
          "code": "text(\"- McCulloch/Pitts 1943, Rosenblatt 1961\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- McCulloch/Pitts 1943, Rosenblatt 1961",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 435,
          "function_name": "residual_connections",
          "code": "text(\"- LSTMs for sequence modeling (1997)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- LSTMs for sequence modeling (1997)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 436,
          "function_name": "residual_connections",
          "code": "text(\"- Residual networks for computer vision (2015)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Residual networks for computer vision (2015)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 438,
          "function_name": "residual_connections",
          "code": "text(\"No residual connections, each layer computes: x \u2192 f(x)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "No residual connections, each layer computes: x \u2192 f(x)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 439,
          "function_name": "residual_connections",
          "code": "text(\"With residual connections, each layer computes: x \u2192 x + f(x)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "With residual connections, each layer computes: x \u2192 x + f(x)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 441,
          "function_name": "residual_connections",
          "code": "text(\"For f(x) = w x,\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "For f(x) = w x,",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 442,
          "function_name": "residual_connections",
          "code": "text(\"each layer computes:x \u2192 (1 + w) x\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "each layer computes:x \u2192 (1 + w) x",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 443,
          "function_name": "residual_connections",
          "code": "text(\"which keeps the multiplier away from zero (still can explode if w is large).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "which keeps the multiplier away from zero (still can explode if w is large).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 446,
          "function_name": "residual_connections",
          "code": "training_data = get_training_data()  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 447,
          "function_name": "residual_connections",
          "code": "input_dim = len(training_data[0].x)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 448,
          "function_name": "residual_connections",
          "code": "num_classes = len(training_data[0].target_y)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 451,
          "function_name": "residual_connections",
          "code": "model = DNNWithResidual(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 451,
          "function_name": "residual_connections",
          "code": "model = DNNWithResidual(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 462,
          "function_name": "__init__",
          "code": "def __init__(self, input_dim: int, hidden_dim: int, num_classes: int):  # @inspect input_dim hidden_dim num_classes"
        }
      ],
      "env": {
        "input_dim": {
          "type": "int",
          "contents": 4,
          "dtype": null,
          "shape": null
        },
        "hidden_dim": {
          "type": "int",
          "contents": 5,
          "dtype": null,
          "shape": null
        },
        "num_classes": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 451,
          "function_name": "residual_connections",
          "code": "model = DNNWithResidual(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 463,
          "function_name": "__init__",
          "code": "super().__init__()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 451,
          "function_name": "residual_connections",
          "code": "model = DNNWithResidual(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 464,
          "function_name": "__init__",
          "code": "self.layer1 = nn.Linear(input_dim, hidden_dim)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 451,
          "function_name": "residual_connections",
          "code": "model = DNNWithResidual(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 465,
          "function_name": "__init__",
          "code": "self.layer2 = nn.Linear(hidden_dim, hidden_dim)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 451,
          "function_name": "residual_connections",
          "code": "model = DNNWithResidual(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        },
        {
          "path": "deep_learning.py",
          "line_number": 466,
          "function_name": "__init__",
          "code": "self.layer3 = nn.Linear(hidden_dim, num_classes)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 451,
          "function_name": "residual_connections",
          "code": "model = DNNWithResidual(input_dim=input_dim, hidden_dim=5, num_classes=num_classes)  # @inspect model"
        }
      ],
      "env": {
        "model": {
          "type": "deep_learning.DNNWithResidual",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "layer1.weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      0.21114838123321533,
                      0.2836533188819885,
                      0.15846657752990723,
                      0.31772851943969727
                    ],
                    [
                      0.3756151795387268,
                      -0.4935876727104187,
                      0.07552754878997803,
                      0.4638057351112366
                    ],
                    [
                      -0.3623582720756531,
                      -0.22262734174728394,
                      -0.026330888271331787,
                      -0.3110417127609253
                    ],
                    [
                      -0.09424090385437012,
                      -0.07388532161712646,
                      0.44548553228378296,
                      -0.03143942356109619
                    ],
                    [
                      0.27113598585128784,
                      0.3661377429962158,
                      0.22276145219802856,
                      -0.43481767177581787
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    5,
                    4
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "layer1.bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.3747525215148926,
                    0.32972490787506104,
                    -0.3584306836128235,
                    -0.1782858967781067,
                    0.3403148651123047
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    5
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "layer2.weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      -0.4347385764122009,
                      -0.3919675648212433,
                      -0.3031027317047119,
                      0.13935136795043945,
                      -0.18262793123722076
                    ],
                    [
                      -0.3988432288169861,
                      0.17335344851016998,
                      0.22621098160743713,
                      0.16750933229923248,
                      -0.38316038250923157
                    ],
                    [
                      0.4354598820209503,
                      -0.033742401748895645,
                      -0.4256468117237091,
                      -0.06732406467199326,
                      0.2920994460582733
                    ],
                    [
                      0.20595486462116241,
                      -0.004779475275427103,
                      0.31526732444763184,
                      -0.4080284535884857,
                      0.3102969825267792
                    ],
                    [
                      0.4439278244972229,
                      -0.27193483710289,
                      0.09592515975236893,
                      -0.07211606949567795,
                      -0.3775331974029541
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    5,
                    5
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "layer2.bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    -0.003920618910342455,
                    -0.14987152814865112,
                    -0.381985068321228,
                    -0.3258706331253052,
                    0.009758178144693375
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    5
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "layer3.weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    [
                      0.4145966172218323,
                      0.16011688113212585,
                      -0.29754766821861267,
                      0.30846458673477173,
                      0.03670905530452728
                    ],
                    [
                      -0.43699193000793457,
                      0.021213702857494354,
                      0.28708499670028687,
                      -0.2629639208316803,
                      -0.020576998591423035
                    ],
                    [
                      -0.22280935943126678,
                      -0.352631151676178,
                      -0.25411272048950195,
                      0.044908709824085236,
                      0.2890850901603699
                    ]
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3,
                    5
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "layer3.bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    -0.083102285861969,
                    -0.4021848738193512,
                    -0.0038281758315861225
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 452,
          "function_name": "residual_connections",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 452,
          "function_name": "residual_connections",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 468,
          "function_name": "forward",
          "code": "def forward(self, x):  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            1.0,
            2.0,
            0.0,
            1.0
          ],
          "dtype": "torch.float32",
          "shape": [
            4
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 452,
          "function_name": "residual_connections",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 469,
          "function_name": "forward",
          "code": "x = self.layer1(x)  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            1.4709360599517822,
            0.181970477104187,
            -1.4770853519439697,
            -0.4517368674278259,
            0.9089086651802063
          ],
          "dtype": "torch.float32",
          "shape": [
            5
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 452,
          "function_name": "residual_connections",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 470,
          "function_name": "forward",
          "code": "x = x + self.layer2(x)  # Add residual connection @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            0.9749826192855835,
            -1.2810896635055542,
            -0.3000558614730835,
            -0.47485440969467163,
            1.069916844367981
          ],
          "dtype": "torch.float32",
          "shape": [
            5
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 452,
          "function_name": "residual_connections",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 471,
          "function_name": "forward",
          "code": "x = self.layer3(x)  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            0.0980789065361023,
            -0.8387086987495422,
            0.594908595085144
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 452,
          "function_name": "residual_connections",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1773,
          "function_name": "_wrapped_call_impl",
          "code": "return self._call_impl(*args, **kwargs)"
        },
        {
          "path": ".venv/lib/python3.11/site-packages/torch/nn/modules/module.py",
          "line_number": 1784,
          "function_name": "_call_impl",
          "code": "return forward_call(*args, **kwargs)"
        },
        {
          "path": "deep_learning.py",
          "line_number": 472,
          "function_name": "forward",
          "code": "return x"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 452,
          "function_name": "residual_connections",
          "code": "logits = model(training_data[0].x)  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "torch.Tensor",
          "contents": [
            0.0980789065361023,
            -0.8387086987495422,
            0.594908595085144
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 455,
          "function_name": "residual_connections",
          "code": "result = train_model(model, training_data)  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 456,
          "function_name": "residual_connections",
          "code": "plot(result)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "step": 0,
                  "loss": 1.1044306755065918
                },
                {
                  "step": 1,
                  "loss": 0.9962227940559387
                },
                {
                  "step": 2,
                  "loss": 0.9148340225219727
                },
                {
                  "step": 3,
                  "loss": 0.8474192023277283
                },
                {
                  "step": 4,
                  "loss": 0.787348210811615
                },
                {
                  "step": 5,
                  "loss": 0.7312226295471191
                },
                {
                  "step": 6,
                  "loss": 0.6774492263793945
                },
                {
                  "step": 7,
                  "loss": 0.6254999041557312
                },
                {
                  "step": 8,
                  "loss": 0.575474202632904
                },
                {
                  "step": 9,
                  "loss": 0.5277898907661438
                },
                {
                  "step": 10,
                  "loss": 0.4829401969909668
                },
                {
                  "step": 11,
                  "loss": 0.44131550192832947
                },
                {
                  "step": 12,
                  "loss": 0.4031085968017578
                },
                {
                  "step": 13,
                  "loss": 0.36830267310142517
                },
                {
                  "step": 14,
                  "loss": 0.33672085404396057
                },
                {
                  "step": 15,
                  "loss": 0.3080964982509613
                },
                {
                  "step": 16,
                  "loss": 0.28213632106781006
                },
                {
                  "step": 17,
                  "loss": 0.25856122374534607
                },
                {
                  "step": 18,
                  "loss": 0.2371254414319992
                },
                {
                  "step": 19,
                  "loss": 0.21762017905712128
                },
                {
                  "step": 20,
                  "loss": 0.19986934959888458
                },
                {
                  "step": 21,
                  "loss": 0.18372184038162231
                },
                {
                  "step": 22,
                  "loss": 0.16904455423355103
                },
                {
                  "step": 23,
                  "loss": 0.1557169407606125
                },
                {
                  "step": 24,
                  "loss": 0.14362692832946777
                },
                {
                  "step": 25,
                  "loss": 0.1326688826084137
                },
                {
                  "step": 26,
                  "loss": 0.1227431371808052
                },
                {
                  "step": 27,
                  "loss": 0.11375541239976883
                },
                {
                  "step": 28,
                  "loss": 0.10561700910329819
                },
                {
                  "step": 29,
                  "loss": 0.09824533015489578
                },
                {
                  "step": 30,
                  "loss": 0.0915641188621521
                },
                {
                  "step": 31,
                  "loss": 0.08550330251455307
                },
                {
                  "step": 32,
                  "loss": 0.07999909669160843
                },
                {
                  "step": 33,
                  "loss": 0.07499375194311142
                },
                {
                  "step": 34,
                  "loss": 0.07043527066707611
                },
                {
                  "step": 35,
                  "loss": 0.06627707928419113
                },
                {
                  "step": 36,
                  "loss": 0.062477584928274155
                },
                {
                  "step": 37,
                  "loss": 0.05899961292743683
                },
                {
                  "step": 38,
                  "loss": 0.05581028386950493
                },
                {
                  "step": 39,
                  "loss": 0.052880141884088516
                },
                {
                  "step": 40,
                  "loss": 0.05018319562077522
                },
                {
                  "step": 41,
                  "loss": 0.0476963110268116
                },
                {
                  "step": 42,
                  "loss": 0.045398954302072525
                },
                {
                  "step": 43,
                  "loss": 0.04327283427119255
                },
                {
                  "step": 44,
                  "loss": 0.041301656514406204
                },
                {
                  "step": 45,
                  "loss": 0.03947107866406441
                },
                {
                  "step": 46,
                  "loss": 0.03776809945702553
                },
                {
                  "step": 47,
                  "loss": 0.03618134930729866
                },
                {
                  "step": 48,
                  "loss": 0.03470044210553169
                },
                {
                  "step": 49,
                  "loss": 0.03331621363759041
                },
                {
                  "step": 50,
                  "loss": 0.03202034905552864
                },
                {
                  "step": 51,
                  "loss": 0.030805543065071106
                },
                {
                  "step": 52,
                  "loss": 0.029664991423487663
                },
                {
                  "step": 53,
                  "loss": 0.028592752292752266
                },
                {
                  "step": 54,
                  "loss": 0.02758345566689968
                },
                {
                  "step": 55,
                  "loss": 0.026632079854607582
                },
                {
                  "step": 56,
                  "loss": 0.02573429048061371
                },
                {
                  "step": 57,
                  "loss": 0.024886051192879677
                },
                {
                  "step": 58,
                  "loss": 0.024083631113171577
                },
                {
                  "step": 59,
                  "loss": 0.023323791101574898
                },
                {
                  "step": 60,
                  "loss": 0.022603502497076988
                },
                {
                  "step": 61,
                  "loss": 0.02191995270550251
                },
                {
                  "step": 62,
                  "loss": 0.021270588040351868
                },
                {
                  "step": 63,
                  "loss": 0.020653080195188522
                },
                {
                  "step": 64,
                  "loss": 0.0200654286891222
                },
                {
                  "step": 65,
                  "loss": 0.01950560137629509
                },
                {
                  "step": 66,
                  "loss": 0.01897185482084751
                },
                {
                  "step": 67,
                  "loss": 0.018462445586919785
                },
                {
                  "step": 68,
                  "loss": 0.01797601394355297
                },
                {
                  "step": 69,
                  "loss": 0.017510998994112015
                },
                {
                  "step": 70,
                  "loss": 0.017066149041056633
                },
                {
                  "step": 71,
                  "loss": 0.01664035953581333
                },
                {
                  "step": 72,
                  "loss": 0.01623237319290638
                },
                {
                  "step": 73,
                  "loss": 0.015841271728277206
                },
                {
                  "step": 74,
                  "loss": 0.015466143377125263
                },
                {
                  "step": 75,
                  "loss": 0.015105952508747578
                },
                {
                  "step": 76,
                  "loss": 0.014760009944438934
                },
                {
                  "step": 77,
                  "loss": 0.014427398331463337
                },
                {
                  "step": 78,
                  "loss": 0.014107580296695232
                },
                {
                  "step": 79,
                  "loss": 0.013799787499010563
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "step",
                "type": "quantitative"
              },
              "y": {
                "field": "loss",
                "type": "quantitative"
              }
            },
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 458,
          "function_name": "residual_connections",
          "code": "text(\"The training is much faster!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The training is much faster!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 24,
          "function_name": "main",
          "code": "residual_connections()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 478,
          "function_name": "layer_normalization",
          "code": "def layer_normalization():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 479,
          "function_name": "layer_normalization",
          "code": "text(\"Motivation: don't want the magitude of activations to grow too big or small.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Motivation: don't want the magitude of activations to grow too big or small.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 480,
          "function_name": "layer_normalization",
          "code": "text(\"Solution: **layer normalization** (also see batch normalization)\"), link(\"https://arxiv.org/abs/1607.06450\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Solution: **layer normalization** (also see batch normalization)",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "Layer Normalization",
            "authors": [
              "Jimmy Lei Ba",
              "Jamie Ryan Kiros",
              "Geoffrey E. Hinton"
            ],
            "organization": null,
            "date": "2016-07-21T19:57:52Z",
            "url": "https://arxiv.org/abs/1607.06450",
            "description": "Training state-of-the-art, deep neural networks is computationally expensive. One way to reduce the training time is to normalize the activities of the neurons. A recently introduced technique called batch normalization uses the distribution of the summed input to a neuron over a mini-batch of training cases to compute a mean and variance which are then used to normalize the summed input to that neuron on each training case. This significantly reduces the training time in feed-forward neural networks. However, the effect of batch normalization is dependent on the mini-batch size and it is not obvious how to apply it to recurrent neural networks. In this paper, we transpose batch normalization into layer normalization by computing the mean and variance used for normalization from all of the summed inputs to the neurons in a layer on a single training case. Like batch normalization, we also give each neuron its own adaptive bias and gain which are applied after the normalization but before the non-linearity. Unlike batch normalization, layer normalization performs exactly the same computation at training and test times. It is also straightforward to apply to recurrent neural networks by computing the normalization statistics separately at each time step. Layer normalization is very effective at stabilizing the hidden state dynamics in recurrent networks. Empirically, we show that layer normalization can substantially reduce the training time compared with previously published techniques.",
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 482,
          "function_name": "layer_normalization",
          "code": "text(\"Here's the basic idea:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Here's the basic idea:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 483,
          "function_name": "layer_normalization",
          "code": "def layernorm(x):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 488,
          "function_name": "layer_normalization",
          "code": "x = torch.tensor([1., 2, 3])  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            1.0,
            2.0,
            3.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 489,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x)  # @inspect y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 489,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 483,
          "function_name": "layernorm",
          "code": "def layernorm(x):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 489,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 484,
          "function_name": "layernorm",
          "code": "mean = x.mean()  # @inspect mean"
        }
      ],
      "env": {
        "mean": {
          "type": "torch.Tensor",
          "contents": 2.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 489,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 485,
          "function_name": "layernorm",
          "code": "std = x.std()  # @inspect std"
        }
      ],
      "env": {
        "std": {
          "type": "torch.Tensor",
          "contents": 1.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 489,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 486,
          "function_name": "layernorm",
          "code": "y = (x - mean) / std  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "torch.Tensor",
          "contents": [
            -1.0,
            0.0,
            1.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 489,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 487,
          "function_name": "layernorm",
          "code": "return y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 489,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x)  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "torch.Tensor",
          "contents": [
            -1.0,
            0.0,
            1.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 490,
          "function_name": "layer_normalization",
          "code": "x = torch.tensor([100., 200, 300])  # @inspect x @clear y"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            100.0,
            200.0,
            300.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        },
        "y": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 491,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x)  # @inspect y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 491,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 483,
          "function_name": "layernorm",
          "code": "def layernorm(x):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 491,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 484,
          "function_name": "layernorm",
          "code": "mean = x.mean()  # @inspect mean"
        }
      ],
      "env": {
        "mean": {
          "type": "torch.Tensor",
          "contents": 200.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 491,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 485,
          "function_name": "layernorm",
          "code": "std = x.std()  # @inspect std"
        }
      ],
      "env": {
        "std": {
          "type": "torch.Tensor",
          "contents": 100.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 491,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 486,
          "function_name": "layernorm",
          "code": "y = (x - mean) / std  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "torch.Tensor",
          "contents": [
            -1.0,
            0.0,
            1.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 491,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 487,
          "function_name": "layernorm",
          "code": "return y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 491,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x)  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "torch.Tensor",
          "contents": [
            -1.0,
            0.0,
            1.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 493,
          "function_name": "layer_normalization",
          "code": "text(\"The real LayerNorm adds three things:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The real LayerNorm adds three things:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 494,
          "function_name": "layer_normalization",
          "code": "epsilon = 1e-5  # Prevent dividing by zero  @inspect epsilon"
        }
      ],
      "env": {
        "epsilon": {
          "type": "float",
          "contents": 1e-05,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 495,
          "function_name": "layer_normalization",
          "code": "gamma = torch.tensor([1., 1, 1])  # Scaling parameters @inspect gamma"
        }
      ],
      "env": {
        "gamma": {
          "type": "torch.Tensor",
          "contents": [
            1.0,
            1.0,
            1.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 496,
          "function_name": "layer_normalization",
          "code": "beta = torch.tensor([0., 0, 0])  # Shifting parameters @inspect beta"
        }
      ],
      "env": {
        "beta": {
          "type": "torch.Tensor",
          "contents": [
            0.0,
            0.0,
            0.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 497,
          "function_name": "layer_normalization",
          "code": "def layernorm(x, gamma, beta):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 503,
          "function_name": "layer_normalization",
          "code": "x = torch.tensor([1., 2, 3])  # @inspect x @clear y"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            1.0,
            2.0,
            3.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        },
        "y": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 504,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x, gamma, beta)  # @inspect y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 504,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x, gamma, beta)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 497,
          "function_name": "layernorm",
          "code": "def layernorm(x, gamma, beta):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 504,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x, gamma, beta)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 498,
          "function_name": "layernorm",
          "code": "mean = x.mean()  # @inspect mean"
        }
      ],
      "env": {
        "mean": {
          "type": "torch.Tensor",
          "contents": 2.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 504,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x, gamma, beta)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 499,
          "function_name": "layernorm",
          "code": "var = x.var()  # @inspect std"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 504,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x, gamma, beta)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 500,
          "function_name": "layernorm",
          "code": "y = (x - mean) / torch.sqrt(var + epsilon)  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "torch.Tensor",
          "contents": [
            -0.9999949932098389,
            0.0,
            0.9999949932098389
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 504,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x, gamma, beta)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 501,
          "function_name": "layernorm",
          "code": "y = y * gamma + beta  # Scale + shift @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "torch.Tensor",
          "contents": [
            -0.9999949932098389,
            0.0,
            0.9999949932098389
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 504,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x, gamma, beta)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 502,
          "function_name": "layernorm",
          "code": "return y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 504,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x, gamma, beta)  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "torch.Tensor",
          "contents": [
            -0.9999949932098389,
            0.0,
            0.9999949932098389
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 505,
          "function_name": "layer_normalization",
          "code": "x = torch.tensor([100., 200, 300])  # @inspect x @clear y"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            100.0,
            200.0,
            300.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        },
        "y": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 506,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x, gamma, beta)  # @inspect y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 506,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x, gamma, beta)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 497,
          "function_name": "layernorm",
          "code": "def layernorm(x, gamma, beta):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 506,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x, gamma, beta)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 498,
          "function_name": "layernorm",
          "code": "mean = x.mean()  # @inspect mean"
        }
      ],
      "env": {
        "mean": {
          "type": "torch.Tensor",
          "contents": 200.0,
          "dtype": "torch.float32",
          "shape": []
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 506,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x, gamma, beta)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 499,
          "function_name": "layernorm",
          "code": "var = x.var()  # @inspect std"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 506,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x, gamma, beta)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 500,
          "function_name": "layernorm",
          "code": "y = (x - mean) / torch.sqrt(var + epsilon)  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "torch.Tensor",
          "contents": [
            -1.0,
            0.0,
            1.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 506,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x, gamma, beta)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 501,
          "function_name": "layernorm",
          "code": "y = y * gamma + beta  # Scale + shift @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "torch.Tensor",
          "contents": [
            -1.0,
            0.0,
            1.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 506,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x, gamma, beta)  # @inspect y"
        },
        {
          "path": "deep_learning.py",
          "line_number": 502,
          "function_name": "layernorm",
          "code": "return y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 506,
          "function_name": "layer_normalization",
          "code": "y = layernorm(x, gamma, beta)  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "torch.Tensor",
          "contents": [
            -1.0,
            0.0,
            1.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 508,
          "function_name": "layer_normalization",
          "code": "text(\"In PyTorch:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In PyTorch:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 509,
          "function_name": "layer_normalization",
          "code": "layer = nn.LayerNorm(3)  # @clear y gamma beta epsilon"
        }
      ],
      "env": {
        "y": null,
        "gamma": null,
        "beta": null,
        "epsilon": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 510,
          "function_name": "layer_normalization",
          "code": "parameters = list(layer.named_parameters())  # @inspect parameters"
        }
      ],
      "env": {
        "parameters": {
          "type": "list",
          "contents": [
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "weight",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    1.0,
                    1.0,
                    1.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            },
            {
              "type": "tuple",
              "contents": [
                {
                  "type": "str",
                  "contents": "bias",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "torch.nn.parameter.Parameter",
                  "contents": [
                    0.0,
                    0.0,
                    0.0
                  ],
                  "dtype": "torch.float32",
                  "shape": [
                    3
                  ]
                }
              ],
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 511,
          "function_name": "layer_normalization",
          "code": "x = torch.tensor([1., 2, 3])  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            1.0,
            2.0,
            3.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 512,
          "function_name": "layer_normalization",
          "code": "y = layer(x)  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "torch.Tensor",
          "contents": [
            -1.2247356176376343,
            0.0,
            1.2247356176376343
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 513,
          "function_name": "layer_normalization",
          "code": "x = torch.tensor([100., 200, 300])  # @inspect x @clear y"
        }
      ],
      "env": {
        "x": {
          "type": "torch.Tensor",
          "contents": [
            100.0,
            200.0,
            300.0
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        },
        "y": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 514,
          "function_name": "layer_normalization",
          "code": "y = layer(x)  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "torch.Tensor",
          "contents": [
            -1.2247449159622192,
            0.0,
            1.2247449159622192
          ],
          "dtype": "torch.float32",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 516,
          "function_name": "layer_normalization",
          "code": "text(\"Summary: layer normalization keeps the magnitude of activations away from zero and infinity.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary: layer normalization keeps the magnitude of activations away from zero and infinity.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 25,
          "function_name": "main",
          "code": "layer_normalization()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 519,
          "function_name": "initialization",
          "code": "def initialization():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 520,
          "function_name": "initialization",
          "code": "text(\"We have seen that the magnitude of activations can grow too big or small.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We have seen that the magnitude of activations can grow too big or small.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 521,
          "function_name": "initialization",
          "code": "text(\"We can avoid this by using proper initialization.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We can avoid this by using proper initialization.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 523,
          "function_name": "initialization",
          "code": "input_dim = 16384"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 524,
          "function_name": "initialization",
          "code": "output_dim = 32"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 525,
          "function_name": "initialization",
          "code": "w = nn.Parameter(torch.randn(input_dim, output_dim))"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 526,
          "function_name": "initialization",
          "code": "x = nn.Parameter(torch.randn(input_dim))"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 527,
          "function_name": "initialization",
          "code": "y = x @ w  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "torch.Tensor",
          "contents": [
            39.46282196044922,
            278.6836853027344,
            -272.8825378417969,
            28.276859283447266,
            -95.18999481201172,
            164.99977111816406,
            117.77301025390625,
            -127.4765625,
            121.6343994140625,
            -55.25826644897461,
            59.87123107910156,
            -43.75360870361328,
            -263.1898193359375,
            89.90611267089844,
            -21.83201789855957,
            -132.77224731445312,
            256.7056884765625,
            116.51608276367188,
            170.2956085205078,
            -237.37969970703125,
            -145.32077026367188,
            -304.18011474609375,
            -123.06358337402344,
            -63.172340393066406,
            -167.46109008789062,
            104.8041000366211,
            -297.09423828125,
            -31.321136474609375,
            -134.76390075683594,
            65.97506713867188,
            -184.79425048828125,
            -23.127168655395508
          ],
          "dtype": "torch.float32",
          "shape": [
            32
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 528,
          "function_name": "initialization",
          "code": "text(f\"Note that each element of `y` scales as sqrt(input_dim): {y[0]}.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Note that each element of `y` scales as sqrt(input_dim): 39.46282196044922.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 529,
          "function_name": "initialization",
          "code": "text(\"Large values can cause gradients to blow up and cause training to be unstable.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Large values can cause gradients to blow up and cause training to be unstable.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 531,
          "function_name": "initialization",
          "code": "text(\"We want an initialization that is invariant to `input_dim`.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We want an initialization that is invariant to `input_dim`.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 532,
          "function_name": "initialization",
          "code": "text(\"To do that, we simply rescale by 1/sqrt(input_dim)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "To do that, we simply rescale by 1/sqrt(input_dim)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 533,
          "function_name": "initialization",
          "code": "w = nn.Parameter(torch.randn(input_dim, output_dim) / np.sqrt(input_dim))"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 534,
          "function_name": "initialization",
          "code": "y = x @ w  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "torch.Tensor",
          "contents": [
            0.02821018546819687,
            1.4324007034301758,
            -0.434617280960083,
            -0.826854944229126,
            -0.11591124534606934,
            2.9224705696105957,
            -1.0249030590057373,
            0.5166104435920715,
            -0.16692328453063965,
            -1.754170298576355,
            0.5071543455123901,
            0.4035901129245758,
            -0.05954933166503906,
            -0.33261096477508545,
            -0.7724426984786987,
            -0.08355355262756348,
            -0.19176632165908813,
            1.2158454656600952,
            1.1119641065597534,
            0.13185253739356995,
            1.1395931243896484,
            -0.8737841844558716,
            -2.7197635173797607,
            0.5770468711853027,
            1.2251224517822266,
            -1.199760913848877,
            -1.1840611696243286,
            -0.891140341758728,
            -0.8358242511749268,
            0.10707986354827881,
            2.0074398517608643,
            1.7549437284469604
          ],
          "dtype": "torch.float32",
          "shape": [
            32
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 535,
          "function_name": "initialization",
          "code": "text(f\"Now each element of `y` is constant: {y[0]}.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now each element of `y` is constant: 0.02821018546819687.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 537,
          "function_name": "initialization",
          "code": "text(\"Up to a constant, this is Xavier initialization. \"), link(title=\"[paper]\", url=\"https://proceedings.mlr.press/v9/glorot10a/glorot10a.pdf\"), link(title=\"[stackexchange]\", url=\"https://ai.stackexchange.com/questions/30491/is-there-a-proper-initialization-technique-for-the-weight-matrices-in-multi-head\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Up to a constant, this is Xavier initialization. ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[paper]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://proceedings.mlr.press/v9/glorot10a/glorot10a.pdf",
            "description": null,
            "notes": null
          },
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[stackexchange]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://ai.stackexchange.com/questions/30491/is-there-a-proper-initialization-technique-for-the-weight-matrices-in-multi-head",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 539,
          "function_name": "initialization",
          "code": "text(\"To be extra safe, we truncate the normal distribution to [-3, 3] to avoid any chance of outliers.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "To be extra safe, we truncate the normal distribution to [-3, 3] to avoid any chance of outliers.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 540,
          "function_name": "initialization",
          "code": "w = nn.Parameter(nn.init.trunc_normal_(torch.empty(input_dim, output_dim), std=1 / np.sqrt(input_dim), a=-3, b=3))"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 26,
          "function_name": "main",
          "code": "initialization()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 543,
          "function_name": "optimizers",
          "code": "def optimizers():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 544,
          "function_name": "optimizers",
          "code": "text(\"So far, we've used gradient descent (GD).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So far, we've used gradient descent (GD).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 545,
          "function_name": "optimizers",
          "code": "text(\"Each gradient requires summing over all training examples.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Each gradient requires summing over all training examples.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 546,
          "function_name": "optimizers",
          "code": "text(\"For large datasets, this is too much work to make just one update.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "For large datasets, this is too much work to make just one update.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 547,
          "function_name": "optimizers",
          "code": "text(\"Instead, we can use a stochastic optimizer.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Instead, we can use a stochastic optimizer.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 548,
          "function_name": "optimizers",
          "code": "text(\"Each step, choose a random subset of the training examples.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Each step, choose a random subset of the training examples.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 549,
          "function_name": "optimizers",
          "code": "text(\"This is an unbiased estimate of the gradient.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This is an unbiased estimate of the gradient.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 551,
          "function_name": "optimizers",
          "code": "grads = torch.tensor([[1., 2], [3, 4], [5, 6], [7, 8]]) # @inspect grads"
        }
      ],
      "env": {
        "grads": {
          "type": "torch.Tensor",
          "contents": [
            [
              1.0,
              2.0
            ],
            [
              3.0,
              4.0
            ],
            [
              5.0,
              6.0
            ],
            [
              7.0,
              8.0
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            4,
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 552,
          "function_name": "optimizers",
          "code": "grad = torch.mean(grads, axis=0)  # @inspect grad"
        }
      ],
      "env": {
        "grad": {
          "type": "torch.Tensor",
          "contents": [
            4.0,
            5.0
          ],
          "dtype": "torch.float32",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 553,
          "function_name": "optimizers",
          "code": "torch.manual_seed(1)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 554,
          "function_name": "optimizers",
          "code": "batch_size = 2"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 555,
          "function_name": "optimizers",
          "code": "indices = torch.randint(0, grads.shape[0], (batch_size,))  # @inspect indices"
        }
      ],
      "env": {
        "indices": {
          "type": "torch.Tensor",
          "contents": [
            1,
            3
          ],
          "dtype": "torch.int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 556,
          "function_name": "optimizers",
          "code": "stochastic_grads = grads[indices]  # @inspect stochastic_grads"
        }
      ],
      "env": {
        "stochastic_grads": {
          "type": "torch.Tensor",
          "contents": [
            [
              3.0,
              4.0
            ],
            [
              7.0,
              8.0
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            2,
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 557,
          "function_name": "optimizers",
          "code": "stochastic_grad = torch.mean(stochastic_grads, axis=0)  # @inspect stochastic_grad"
        }
      ],
      "env": {
        "stochastic_grad": {
          "type": "torch.Tensor",
          "contents": [
            5.0,
            6.0
          ],
          "dtype": "torch.float32",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 559,
          "function_name": "optimizers",
          "code": "text(\"In practice, we permute the training examples each epoch and take consecutive chunks.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In practice, we permute the training examples each epoch and take consecutive chunks.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 560,
          "function_name": "optimizers",
          "code": "random_perm = torch.randperm(grads.shape[0]) # @inspect random_perm"
        }
      ],
      "env": {
        "random_perm": {
          "type": "torch.Tensor",
          "contents": [
            0,
            3,
            1,
            2
          ],
          "dtype": "torch.int64",
          "shape": [
            4
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 561,
          "function_name": "optimizers",
          "code": "batches = [random_perm[i:i + batch_size] for i in range(0, len(random_perm), batch_size)] # @inspect batches"
        }
      ],
      "env": {
        "batches": {
          "type": "list",
          "contents": [
            {
              "type": "torch.Tensor",
              "contents": [
                0,
                3
              ],
              "dtype": "torch.int64",
              "shape": [
                2
              ]
            },
            {
              "type": "torch.Tensor",
              "contents": [
                1,
                2
              ],
              "dtype": "torch.int64",
              "shape": [
                2
              ]
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 562,
          "function_name": "optimizers",
          "code": "stochastic_grads = torch.stack([torch.mean(grads[indices], axis=0) for indices in batches])  # @inspect stochastic_grads"
        }
      ],
      "env": {
        "stochastic_grads": {
          "type": "torch.Tensor",
          "contents": [
            [
              4.0,
              5.0
            ],
            [
              4.0,
              5.0
            ]
          ],
          "dtype": "torch.float32",
          "shape": [
            2,
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 563,
          "function_name": "optimizers",
          "code": "stochastic_grad = torch.mean(stochastic_grads, axis=0)  # @inspect stochastic_grad"
        }
      ],
      "env": {
        "stochastic_grad": {
          "type": "torch.Tensor",
          "contents": [
            4.0,
            5.0
          ],
          "dtype": "torch.float32",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        },
        {
          "path": "deep_learning.py",
          "line_number": 565,
          "function_name": "optimizers",
          "code": "text(\"Fancier optimizer: use Adam instead of SGD.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Fancier optimizer: use Adam instead of SGD.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimizers()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 29,
          "function_name": "main",
          "code": "text(\"Summary:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 30,
          "function_name": "main",
          "code": "text(\"- PyTorch: NumPy + automatic differentiation + pre-defined modules\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- PyTorch: NumPy + automatic differentiation + pre-defined modules",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 31,
          "function_name": "main",
          "code": "text(\"- More (non-linear) layers = more expressivity\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- More (non-linear) layers = more expressivity",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 32,
          "function_name": "main",
          "code": "text(\"- Don't vanish/explode: choose activation functions to avoid dead neurons\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Don't vanish/explode: choose activation functions to avoid dead neurons",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 33,
          "function_name": "main",
          "code": "text(\"- Don't vanish/explode: use residual connections\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Don't vanish/explode: use residual connections",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 34,
          "function_name": "main",
          "code": "text(\"- Don't vanish/explode: use layer normalization\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Don't vanish/explode: use layer normalization",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 35,
          "function_name": "main",
          "code": "text(\"- Don't vanish/explode: use proper initialization\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Don't vanish/explode: use proper initialization",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "deep_learning.py",
          "line_number": 36,
          "function_name": "main",
          "code": "text(\"- Don't vanish/explode: use better optimizers (Adam)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Don't vanish/explode: use better optimizers (Adam)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    }
  ]
}
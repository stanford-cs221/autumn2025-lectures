{
  "files": {
    "linear_classification.py": "import numpy as np\nfrom typing import Callable\nfrom dataclasses import dataclass\nfrom edtrace import text, link, plot, image\nfrom altair import Chart, Data\nfrom einops import reduce\nimport tiktoken\n\ndef main():\n    text(\"Last unit: linear regression\")\n    text(\"- Hypothesis class: linear functions\")\n    text(\"- Prediction task: input \u2192 output (number)\")\n\n    text(\"This unit: linear classification\")\n    text(\"- Hypothesis class: (thresholded) linear functions\")\n    text(\"- Prediction task: input \u2192 output (one of K choices)\")\n\n    link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=machine-learning%2Flinear-classification.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")\n\n    text(\"Let's walk through the same steps as for linear regression and see what changes...\")\n\n    prediction_task()\n    machine_learning_problem()\n\n    hypothesis_class()\n    zero_one_loss_function()\n    optimization_algorithm()\n    hinge_loss_function()\n    optimization_algorithm_take_2()\n\n    multiclass_classification()\n    handling_text()\n\n    text(\"Summary\")\n    text(\"- Linear classification: linear functions \u2192 one of K choices\")\n\n    \ndef prediction_task():\n    text(\"Example task: image classification\")\n    text(\"- **Input**: an image; e.g.\")\n    image(\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/Felis_catus-cat_on_snow.jpg/1920px-Felis_catus-cat_on_snow.jpg\", width=200)\n    text(\"- **Output**: what kind of object it is (e.g., cat)\")\n\n    text(\"What's the type of the **input**?\")\n    text(\"- Image: width x height x 3 (RGB) tensor\")\n    text(\"- Text: a string (hmm, not a tensor...we'll come back to this later)\")\n\n    text(\"What's the type of the **output**?\")\n    text(\"- Binary classification (two choices): usually {-1, 1}\")\n    text(\"- Multiclass classification (K choices): usually {0, 1, ..., K-1}\")\n\n    text(\"A **predictor** is a function that takes an input and produces an output.\")\n    text(\"Here's an example predictor for binary classification:\")\n    def simple_binary_classifier(x: np.ndarray) -> int:  # @inspect x\n        logit = x[0] - x[1] - 1  # @inspect logit\n        if logit > 0:\n            predicted_y = 1  # @inspect predicted_y\n        else:\n            predicted_y = -1  # @inspect predicted_y\n        return predicted_y\n\n    text(\"Given an input `x`, we can get a prediction `predicted_y` by calling the predictor:\")\n    x = np.array([1, 2])  # @inspect x\n    predicted_y = simple_binary_classifier(x)  # @inspect predicted_y\n    x = np.array([2, 0])  #  @inspect x  @clear predicted_y\n    predicted_y = simple_binary_classifier(x)  # @inspect predicted_y\n\n    text(\"The points where logit = x[0] - x[1] - 1 = 0 is the **decision boundary**.\")\n    values = [{\"x0\": x, \"x1\": x - 1} for x in np.linspace(-3, 3, 30)]\n    plot(Chart(Data(values=values)).mark_line().encode(x=\"x0:Q\", y=\"x1:Q\").to_dict())  # @clear values\n\n    text(\"But how do we get the predictor?\")\n\n\ndef machine_learning_problem():\n    text(\"The **training data** is a set of examples that demonstrate the task.\")\n    text(\"Each **example** consists of an (input x, target output y) pair.\")\n    training_data = get_training_data()  # @inspect training_data\n\n    text(\"A **learning algorithm** takes the training data and produces a predictor.\")\n\n    text(\"Key questions:\")\n    text(\"1. Which predictors are possible? **hypothesis class**\")\n    text(\"2. How good is a predictor? **loss function**\")\n    text(\"3. How do we compute the best predictor? **optimization algorithm**\")\n\n\n@dataclass(frozen=True)\nclass Example:\n    x: np.ndarray\n    target_y: float\n\n\ndef get_training_data():\n    return [\n        Example(x=np.array([1, 2]), target_y=-1),\n        Example(x=np.array([2, 0]), target_y=1),\n        Example(x=np.array([0, 0]), target_y=-1),\n    ]\n\n\ndef hypothesis_class():\n    text(\"Which predictors (classifiers) are possible?\")\n\n    text(\"For linear classifiers, each set of parameters has a **weight vector** and a **bias**.\")\n    params = Parameters(weight=np.array([1, -1]), bias=-1)\n    x = np.array([1, -1])  #  @inspect x\n    predicted_y = binary_classifier(params, x)  # @inspect y\n\n    text(\"Here's another predictor:\")  # @clear params x predicted_y\n    params = Parameters(weight=np.array([1, -1]), bias=1)\n    x = np.array([1, 1])  #  @inspect x\n    predicted_y = binary_classifier(params, x)  # @inspect predicted_y\n\n    text(\"The **hypothesis class** is the set of all predictors you can get by choosing parameters (weight, bias).\")\n\n\n@dataclass(frozen=True)\nclass Parameters:\n    weight: np.ndarray\n    bias: float\n\n\ndef binary_classifier(params: Parameters, x: np.ndarray) -> float:  # @inspect params x\n    \"\"\"Applies the linear predictor given by `params` to input `x`.\"\"\"\n    score = params.weight @ x + params.bias  # @inspect score\n    predicted_y = 1 if score > 0 else -1  # @inspect predicted_y\n    return predicted_y\n\n\ndef zero_one_loss_function():\n    text(\"The next design decision is how to judge each of the many possible predictors.\")\n\n    text(\"Let's consider a predictor:\")\n    params = Parameters(weight=np.array([1, -1]), bias=1)  # @inspect params\n\n    text(\"Recall the training data:\")\n    training_data = get_training_data()  # @inspect training_data @stepover\n    \n    text(\"How well does `params` fit `training_data`?\")\n    text(\"We define a loss function that measures how unhappy one point is based on params.\")\n    text(\"For regression, we used the squared loss:\")\n    text(\"Intuition: how far away the prediction (score) is from the target.\")\n    loss = squared_loss(Example(x=np.array([2, 0]), target_y=0.5), params)  # @inspect loss\n    values = [{\"residual\": residual, \"loss\": residual ** 2} for residual in np.linspace(-1, 1, 30)]  # @stepover\n    plot(Chart(Data(values=values)).mark_line().encode(x=\"residual:Q\", y=\"loss:Q\").to_dict())\n\n    text(\"For binary classification, we use the zero-one loss:\")\n    text(\"Intuition: whether the prediction has the same sign as the target.\")\n    loss = zero_one_loss_using_predictor(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss\n    loss = zero_one_loss_using_predictor(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss\n    text(\"We can write the zero-one loss in terms of the score.\")\n    loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss\n    values = [{\"margin\": margin, \"loss\": int(margin <= 0)} for margin in np.linspace(-1, 1, 30)]  # @stepover\n    plot(Chart(Data(values=values)).mark_line().encode(x=\"margin:Q\", y=\"loss:Q\").to_dict())\n\n    text(\"The training loss is the average of the per-example losses of the training examples.\")  # @clear loss\n    train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss\n\n\ndef zero_one_loss_using_predictor(example: Example, params: Parameters) -> float:  # @inspect example params\n    predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y\n    return int(predicted_y != example.target_y)  # Whether the prediction was wrong\n\n\ndef zero_one_loss(example: Example, params: Parameters) -> float:  # @inspect example params\n    score = example.x @ params.weight + params.bias  # @inspect score\n    margin = score * example.target_y  # @inspect margin\n    return int(margin <= 0)  # Whether the prediction was wrong\n\n\ndef squared_loss(example: Example, params: Parameters) -> float:  # @inspect example params\n    predicted_y = example.x @ params.weight + params.bias  # @inspect prediction\n    residual = predicted_y - example.target_y  # @inspect residual\n    return residual ** 2\n\n\ndef train_zero_one_loss(params: Parameters, training_data: list[Example]) -> float:  # @inspect params training_data\n    losses = [zero_one_loss(example, params) for example in training_data]  # @inspect losses @stepover\n    train_loss = np.mean(losses)  # @inspect train_loss\n    return train_loss\n\n\ndef optimization_algorithm():\n    text(\"Recall that for every set of parameters `params`, we can compute the training loss `train_loss`.\")\n\n    text(\"Recall in linear regression we optimized the parameters using gradient descent.\")\n    text(\"So let's do the same thing here.\")\n\n    params = Parameters(weight=np.array([1, 1]), bias=0)  # @inspect params\n    training_data = get_training_data()  # @inspect training_data @stepover\n    train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss\n\n    text(\"We want to find the parameters that yield the lowest training loss.\")\n    text(\"This is an optimization problem as with linear regression.\")\n\n    text(\"Let's take the gradient\")\n    grad = gradient_zero_one_loss(training_data[0], params)  # @inspect grad\n    text(\"We have a problem: the gradient is zero everywhere!\")\n    text(\"So gradient descent won't move!\")\n    text(\"Intuition: if example is wrong, moving parameters a bit won't make it right, so no local improvement.\")\n    text(\"So what do we do?\")\n\n\ndef gradient_zero_one_loss(example: Example, params: Parameters) -> Parameters:  # @inspect example params\n    score = example.x @ params.weight + params.bias  # @inspect score\n    margin = score * example.target_y  # @inspect margin\n    # Zero everywhere except when margin = 0, where it's undefined\n    return Parameters(weight=np.zeros_like(params.weight), bias=0)\n\n\ndef logistic_function():\n    text(\"Score is a number between -\u221e and +\u221e\")\n    text(\"We want to convert a score into a probability (must be between 0 and 1)\")\n    text(\"There are many functions that do this, \")\n    text(\"The logistic function takes a number between -\u221e and +\u221e and maps it to a number between 0 and 1.\")\n\n    plot(make_plot(\"logistic function\", \"x\", \"y\", logistic))\n\n    score = 0  # @inspect score\n    p = logistic(score)  # @inspect p\n    score = 1  # @inspect score\n    p = logistic(score)  # @inspect p\n    score = 8  # @inspect score\n    p = logistic(score)  # @inspect p\n    score = -1  # @inspect score\n    p = logistic(score)  # @inspect p\n\n    text(\"Another interpretation: log odds\")\n    p = 0.2  # @inspect p\n    odds = p / (1 - p)  # @inspect odds\n    score = np.log(odds)  # @inspect score\n    p2 = logistic(score)  # @inspect p2\n    assert p == p2\n\n    text(\"Properties\")\n    text(\"- As score \u2192 -\u221e, p \u2192 0\")\n    text(\"- As score \u2192 +\u221e, p \u2192 1\")\n    text(\"- As score \u2192 0, p \u2192 0.5\")\n\n    p1 = logistic(score=3)  # @inspect p\n    p2 = logistic(score=-3)  # @inspect p2\n    assert p1 + p2 == 1\n\n    text(\"The derivative of the logistic function is quite simple\")\n    dp = d_logistic(score=3)  # @inspect dp\n\n    plot(make_plot(\"derivative of logistic function\", \"x\", \"y\", d_logistic))\n\n\ndef logistic(score: float) -> float:  # @inspect score\n    return 1 / (1 + np.exp(-score))\n\n\ndef d_logistic(score: float) -> float:\n    return logistic(score) * (1 - logistic(score))\n\ndef logistic_loss_function():\n    params = Parameters(weight=np.array([1, -1]), bias=1)  # @inspect params\n    example = Example(x=np.array([2, 0]), target_y=1)  # @inspect example\n    text(\"Before, our predictor turns a score into a single prediction\")    \n    logit = example.x @ params.weight + params.bias  # @inspect score\n    predicted_y = 1 if logit > 0 else -1  # @inspect predicted_y\n    \n    text(\"But let us turn the scores into a probability\")\n    logistic_function()\n\n    text(\"Now we can compute the probability of y\")\n    prob_pos = logistic(logit)  # @inspect prob_pos\n    prob_neg = logistic(-logit)  # @inspect prob_neg\n    prob_target = logistic(logit * example.target_y)  # @inspect prob_target\n\n    text(\"If we have multiple examples, we'd multiply the probabilities.\")\n    text(\"Equivalent to summing the log probabilities.\")\n    log_prob_target = np.log(prob_target)  # @inspect log_prob_target\n\n    text(\"To turn this into a loss, we can just negate it.\")\n    log_loss = -log_prob_target  # @inspect log_loss\n\n    text(\"Maximum likelihood: find parameters that maximize the log probability of the training targets\")\n\n    text(\"Packaging it up:\")\n    loss = logistic_loss(example, params)  # @inspect loss\n\n    training_data = get_training_data()  # @inspect training_data\n    train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss\n    grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad\n\n\ndef logistic_loss(example: Example, params: Parameters) -> float:  # @inspect example params\n    logit = example.x @ params.weight + params.bias  # @inspect logit\n    prob_target = logistic(logit * example.target_y)  # @inspect prob_target\n    return -np.log(prob_target)\n\n\ndef gradient_logistic_loss(example: Example, params: Parameters) -> Parameters:  # @inspect example params\n    logit = example.x @ params.weight + params.bias  # @inspect logit\n    prob_target = logistic(logit * example.target_y)  # @inspect prob_target\n    dloss_dlogit = -logistic(-logit * example.target_y)  # @inspect dloss_dlogit\n    grad_weight = -example.target_y * example.x * dloss_dlogit  # @inspect grad_weight\n    grad_bias = -example.target_y * dloss_dlogit  # @inspect grad_bias\n    return Parameters(weight=grad_weight, bias=grad_bias)\n\n\ndef train_logistic_loss(params: Parameters, training_data: list[Example]) -> float:  # @inspect params training_data\n    losses = [logistic_loss(example, params) for example in training_data]  # @inspect losses @stepover\n    train_loss = np.mean(losses)  # @inspect train_loss\n    return train_loss\n\n\ndef gradient_train_logistic_loss(params: Parameters, training_data: list[Example]) -> Parameters:  # @inspect params training_data\n    grads = [gradient_logistic_loss(example, params) for example in training_data]  # @inspect grads @stepover\n    mean_weight = np.mean([grad.weight for grad in grads])  # @inspect mean_weight\n    mean_bias = np.mean([grad.bias for grad in grads])  # @inspect mean_bias\n    return Parameters(weight=mean_weight, bias=mean_bias)\n\n\ndef hinge_loss_function():\n    text(\"Let's define a **surrogate** loss function that is easier to optimize.\")\n\n    data = make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0))\n    plot(data)  # @stepover\n\n    text(\"The **hinge loss**\")\n    data = make_plot(\"hinge loss\", \"margin\", \"loss\", lambda margin: max(0, 1 - margin))\n    plot(data)  # @stepover\n\n    example = Example(x=np.array([2, 0]), target_y=1)\n    params = Parameters(weight=np.array([1, -1]), bias=1)  # @inspect params\n    loss = hinge_loss(example, params)  # @inspect loss\n\n    training_data = get_training_data()  # @inspect training_data\n    train_loss = train_hinge_loss(params, training_data)  # @inspect train_loss\n\n\ndef make_plot(title: str, xlabel: str, ylabel: str, f: Callable[[float], float]) -> dict:\n    values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(-1, 1, 30)]\n    return Chart(Data(values=values)).mark_line().encode(x=f\"{xlabel}:Q\", y=f\"{ylabel}:Q\").to_dict()\n\n\ndef hinge_loss(example: Example, params: Parameters) -> float:  # @inspect example params\n    score = example.x @ params.weight + params.bias  # @inspect score\n    margin = score * example.target_y  # @inspect margin\n    loss = max(0, 1 - margin)  # @inspect loss\n    return loss\n\n\ndef train_hinge_loss(params: Parameters, training_data: list[Example]) -> float:  # @inspect params training_data\n    losses = [hinge_loss(example, params) for example in training_data]  # @inspect losses @stepover\n    train_loss = np.mean(losses)  # @inspect train_loss\n    return train_loss\n\n\ndef optimization_algorithm_take_2():\n    params = Parameters(weight=np.array([0, 0]), bias=0)  # @inspect params\n    training_data = get_training_data()  # @inspect training_data\n\n    text(\"Let us compute the gradient.\")\n    grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad\n\n    text(\"Now we can do gradient descent.\")\n    gradient_descent()\n\n\ndef gradient_hinge_loss(example: Example, params: Parameters) -> Parameters:  # @inspect example params\n    score = example.x @ params.weight + params.bias  # @inspect score\n    margin = score * example.target_y  # @inspect margin\n    if 1 - margin >= 0:  # Incorrectly classified\n        grad_weight = -example.target_y * example.x  # @inspect grad_weight\n        grad_bias = -example.target_y  # @inspect grad_bias\n    else:  # Correctly classified\n        grad_weight = np.zeros_like(params.weight)  # @inspect grad_weight\n        grad_bias = 0  # @inspect grad_bias\n    return Parameters(weight=grad_weight, bias=grad_bias)\n\n\ndef gradient_train_hinge_loss(params: Parameters, training_data: list[Example]) -> Parameters:  # @inspect params training_data\n    grads = [gradient_hinge_loss(example, params) for example in training_data]  # @inspect grads @stepover\n    mean_weight = np.mean([grad.weight for grad in grads])  # @inspect mean_weight\n    mean_bias = np.mean([grad.bias for grad in grads])  # @inspect mean_bias\n    return Parameters(weight=mean_weight, bias=mean_bias)\n\n\ndef gradient_descent():\n    training_data = get_training_data()  # @stepover\n    params = Parameters(weight=np.array([0, 0]), bias=0)  # @inspect params\n    learning_rate = 0.01\n    losses = []\n    for step in range(10):  # @inspect step\n        train_loss = train_hinge_loss(params, training_data)  # @inspect train_loss @stepover\n        grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad @stepover\n        params = Parameters(  # @inspect params\n            weight=params.weight - learning_rate * grad.weight,\n            bias=params.bias - learning_rate * grad.bias,\n        )\n        losses.append(train_loss)\n\n    plot(Chart(Data(values=[{\"step\": i, \"loss\": loss} for i, loss in enumerate(losses)])).mark_line().encode(x=\"step:Q\", y=\"loss:Q\").to_dict())\n\n\ndef multiclass_classification():\n    text(\"Binary classification (output y \u2208 {-1, 1})\")\n    text(\"Multiclass classification (output y \u2208 {0, 1, ..., K-1})\")\n\n    text(\"For binary classification, we compute a single score for an input\")\n    text(\"Negative score means -1, positive score means 1\")\n    x = np.array([1, -1])  # @inspect x\n    params = Parameters(weight=np.array([1, -1]), bias=1)  # @inspect params\n    predicted_y = binary_classifier(params, x)  # @inspect predicted_y\n\n    text(\"For multiclass classification\")\n    text(\"- Define a weight vector for each class\")\n    text(\"- Compute a score for each class\")\n    text(\"- Predict a distribution over classes\")\n    params = Parameters(weight=np.array([[1, -1], [1, -1]]), bias=np.array([1, 1]))  # @inspect params\n    x = np.array([1, -1])  # @inspect x\n    logits = params.weight @ x + params.bias\n    introduce_softmax()\n    probs = softmax(logits)  # @inspect probs\n\n    text(\"Now let us define the cross entropy loss.\")\n    introduce_cross_entropy()\n\n\ndef introduce_softmax():\n    text(\"Recall: the logistic function maps (-\u221e, +\u221e) to (0, 1)\")\n\n    text(\"The softmax function generalizes this to multiple classes\")\n\n    logits = np.array([1, -1, 0])  # @inspect logits\n    probs = softmax(logits)  # @inspect softmax_logits\n\n    text(\"Shifting up scores doesn't change the relative probabilities\")\n    logits1 = np.array([1, -1, 0])  # @inspect logits1\n    probs1 = softmax(logits1)  # @inspect probs1\n    logits2 = np.array(logits1 + 2)  # @inspect logits2\n    probs2 = softmax(logits2)  # @inspect probs2\n    assert np.allclose(probs1, probs2)\n\n\ndef softmax(logits: np.ndarray) -> np.ndarray:  # @inspect logits\n    exp_logits = np.exp(logits)  # @inspect exp_logits\n    return exp_logits / np.sum(exp_logits)  # @inspect softmax\n\n\ndef multiclass_classifier(params: Parameters, x: np.ndarray) -> int:  # @inspect params x\n    scores = [x @ params.weight[y] + params.bias[y] for y in range(len(params.weight))]  # @inspect scores\n    predicted_y = np.argmax(scores)  # @inspect predicted_y\n    return predicted_y\n\n\ndef introduce_cross_entropy():\n    text(\"Cross entropy: measures the difference between a target distribution and a predicted distribution\")\n    target = np.array([0.5, 0.2, 0.3])  # @inspect target\n    predicted = np.array([0.1, 0.5, 0.4])  # @inspect predicted\n\n    terms = target * -np.log(predicted)  # @inspect terms\n    cross_entropy = np.sum(terms)  # @inspect cross_entropy\n\n    text(\"Special case: target is a single label (represented as a one-hot vector)\")\n    target = np.array([0, 1, 0])  # @inspect target\n    predicted = np.array([0.1, 0.5, 0.4])  # @inspect predicted\n    terms = target * -np.log(predicted)  # @inspect terms\n    cross_entropy = np.sum(terms)  # @inspect cross_entropy\n    text(\"This is the same as the negative log probability of the target class.\")\n\n\ndef handling_text():\n    tokenization()\n\n\ndef tokenization():\n    string = \"the cat in the hat\"\n\n    text(\"How do we represent a string as a tensor?\")\n    text(\"1. Tokenization: convert a string into a sequence of integers.\")\n    text(\"2. Represent each integer as a one-hot vector.\")\n\n    text(\"### Tokenization\")\n    text(\"Split a string by space into words and convert them into integers.\")\n    vocab = Vocabulary()  # @inspect vocab\n    words = string.split()  # @inspect words\n    indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab\n\n    text(\"Language models use more sophisticated tokenizers (Byte-Pair Encoding) \"), link(\"https://arxiv.org/pdf/1508.07909\")\n    text(\"To get a feel for how tokenizers work, play with this \"), link(title=\"interactive site\", url=\"https://tiktokenizer.vercel.app/?encoder=gpt2\")\n    tokenzier = tiktoken.get_encoding(\"gpt2\")\n    gpt2_indices = tokenzier.encode(string)  # @inspect gpt2_indices\n\n    text(\"### Interpretation\")  # clear @gpt2_indices\n    text(\"Treat each index as a one-hot vector.\")\n    index = indices[4]  # @inspect index\n    vector = np.eye(len(vocab))[index]  # @inspect vector @stepover\n\n    text(\"So the string is represented as a sequence of vectors, or a matrix:\")\n    matrix = np.eye(len(vocab))[indices]  # @inspect matrix @stepover @clear index vector\n\n    text(\"### Operations\")\n\n    text(\"In practice, we store the indices and not the one-hot vectors to save memory.\")\n    text(\"We can operate directly using the indices.\")\n    text(\"Suppose we want to take the dot product of each position with `w`.\")\n    w = np.random.randn(len(vocab))  # @inspect w @stepover\n\n    # Use a matrix-vector product (don't do this!)\n    y_dot = matrix @ w  # @inspect y_dot\n\n    # Equivalently, index into the weight vectors (do this!)\n    y_index = w[indices]  # @inspect y_index\n\n    text(\"Bag of words representation\")\n    text(\"Each word is represented as a (one-hot) vector.\")\n    text(\"The representation is the average of the one-hot vectors.\")\n    bow = reduce(matrix, \"pos vocab -> vocab\", \"mean\")  # @inspect b\n    # Then operate on it\n    y_bow = bow @ w  # @inspect y_bow\n\n    text(\"Summary\")\n    text(\"- Problem: convert strings to tensors for machine learning\")\n    text(\"- Solution: tokenization + one-hot encoding\")\n    text(\"- Tokenization: split strings into words and build up a vocabulary (string \u2194 index)\")\n    text(\"- Mathematically one-hot vectors; in code, directly work with indices\")\n\n\nclass Vocabulary:\n    \"\"\"Maps strings to integers.\"\"\"\n    def __init__(self):\n        self.index_to_string: list[str] = []\n        self.string_to_index: dict[str, int] = {}\n\n    def get_index(self, string: str) -> int:  # @inspect string\n        index = self.string_to_index.get(string)  # @inspect index\n        if index is None:  # New string\n            index = len(self.index_to_string)  # @inspect index\n            self.index_to_string.append(string)\n            self.string_to_index[string] = index\n        return index\n\n    def get_string(self, index: int) -> str:\n        return self.index_to_string[index]\n\n    def __len__(self):\n        return len(self.index_to_string)\n\n    def asdict(self):\n        return {\n            \"index_to_string\": self.index_to_string,\n            \"string_to_index\": self.string_to_index,\n        }\n\n\n\nif __name__ == \"__main__\":\n    main()\n"
  },
  "hidden_line_numbers": {
    "linear_classification.py": []
  },
  "steps": [
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 9,
          "function_name": "main",
          "code": "def main():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 10,
          "function_name": "main",
          "code": "text(\"Last unit: linear regression\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Last unit: linear regression",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 11,
          "function_name": "main",
          "code": "text(\"- Hypothesis class: linear functions\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Hypothesis class: linear functions",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 12,
          "function_name": "main",
          "code": "text(\"- Prediction task: input \u2192 output (number)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Prediction task: input \u2192 output (number)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 14,
          "function_name": "main",
          "code": "text(\"This unit: linear classification\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This unit: linear classification",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 15,
          "function_name": "main",
          "code": "text(\"- Hypothesis class: (thresholded) linear functions\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Hypothesis class: (thresholded) linear functions",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 16,
          "function_name": "main",
          "code": "text(\"- Prediction task: input \u2192 output (one of K choices)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Prediction task: input \u2192 output (one of K choices)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 18,
          "function_name": "main",
          "code": "link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=machine-learning%2Flinear-classification.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[Autumn 2023 lecture]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://stanford-cs221.github.io/autumn2023/modules/module.html#include=machine-learning%2Flinear-classification.js&mode=print6pp",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 20,
          "function_name": "main",
          "code": "text(\"Let's walk through the same steps as for linear regression and see what changes...\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's walk through the same steps as for linear regression and see what changes...",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 38,
          "function_name": "prediction_task",
          "code": "def prediction_task():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 39,
          "function_name": "prediction_task",
          "code": "text(\"Example task: image classification\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Example task: image classification",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 40,
          "function_name": "prediction_task",
          "code": "text(\"- **Input**: an image; e.g.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- **Input**: an image; e.g.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 41,
          "function_name": "prediction_task",
          "code": "image(\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/Felis_catus-cat_on_snow.jpg/1920px-Felis_catus-cat_on_snow.jpg\", width=200)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "var/files/image-c583139e7f51d1c8e2010c1ed18a9d19-https_upload_wikimedia_org_wikipedia_commons_thumb_b_b6_Felis_catus-cat_on_snow_jpg_1920px-Felis_catus-cat_on_snow_jpg",
          "style": {
            "width": 200
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 42,
          "function_name": "prediction_task",
          "code": "text(\"- **Output**: what kind of object it is (e.g., cat)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- **Output**: what kind of object it is (e.g., cat)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 44,
          "function_name": "prediction_task",
          "code": "text(\"What's the type of the **input**?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "What's the type of the **input**?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 45,
          "function_name": "prediction_task",
          "code": "text(\"- Image: width x height x 3 (RGB) tensor\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Image: width x height x 3 (RGB) tensor",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 46,
          "function_name": "prediction_task",
          "code": "text(\"- Text: a string (hmm, not a tensor...we'll come back to this later)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Text: a string (hmm, not a tensor...we'll come back to this later)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 48,
          "function_name": "prediction_task",
          "code": "text(\"What's the type of the **output**?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "What's the type of the **output**?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 49,
          "function_name": "prediction_task",
          "code": "text(\"- Binary classification (two choices): usually {-1, 1}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Binary classification (two choices): usually {-1, 1}",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 50,
          "function_name": "prediction_task",
          "code": "text(\"- Multiclass classification (K choices): usually {0, 1, ..., K-1}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Multiclass classification (K choices): usually {0, 1, ..., K-1}",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 52,
          "function_name": "prediction_task",
          "code": "text(\"A **predictor** is a function that takes an input and produces an output.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "A **predictor** is a function that takes an input and produces an output.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 53,
          "function_name": "prediction_task",
          "code": "text(\"Here's an example predictor for binary classification:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Here's an example predictor for binary classification:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 54,
          "function_name": "prediction_task",
          "code": "def simple_binary_classifier(x: np.ndarray) -> int:  # @inspect x"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 62,
          "function_name": "prediction_task",
          "code": "text(\"Given an input `x`, we can get a prediction `predicted_y` by calling the predictor:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Given an input `x`, we can get a prediction `predicted_y` by calling the predictor:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 63,
          "function_name": "prediction_task",
          "code": "x = np.array([1, 2])  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            2
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 64,
          "function_name": "prediction_task",
          "code": "predicted_y = simple_binary_classifier(x)  # @inspect predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 64,
          "function_name": "prediction_task",
          "code": "predicted_y = simple_binary_classifier(x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 54,
          "function_name": "simple_binary_classifier",
          "code": "def simple_binary_classifier(x: np.ndarray) -> int:  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            2
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 64,
          "function_name": "prediction_task",
          "code": "predicted_y = simple_binary_classifier(x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 55,
          "function_name": "simple_binary_classifier",
          "code": "logit = x[0] - x[1] - 1  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.int64",
          "contents": -2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 64,
          "function_name": "prediction_task",
          "code": "predicted_y = simple_binary_classifier(x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 56,
          "function_name": "simple_binary_classifier",
          "code": "if logit > 0:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 64,
          "function_name": "prediction_task",
          "code": "predicted_y = simple_binary_classifier(x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 59,
          "function_name": "simple_binary_classifier",
          "code": "predicted_y = -1  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": -1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 64,
          "function_name": "prediction_task",
          "code": "predicted_y = simple_binary_classifier(x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 60,
          "function_name": "simple_binary_classifier",
          "code": "return predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 64,
          "function_name": "prediction_task",
          "code": "predicted_y = simple_binary_classifier(x)  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": -1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 65,
          "function_name": "prediction_task",
          "code": "x = np.array([2, 0])  #  @inspect x  @clear predicted_y"
        }
      ],
      "env": {
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            2,
            0
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        },
        "predicted_y": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 66,
          "function_name": "prediction_task",
          "code": "predicted_y = simple_binary_classifier(x)  # @inspect predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 66,
          "function_name": "prediction_task",
          "code": "predicted_y = simple_binary_classifier(x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 54,
          "function_name": "simple_binary_classifier",
          "code": "def simple_binary_classifier(x: np.ndarray) -> int:  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            2,
            0
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 66,
          "function_name": "prediction_task",
          "code": "predicted_y = simple_binary_classifier(x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 55,
          "function_name": "simple_binary_classifier",
          "code": "logit = x[0] - x[1] - 1  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.int64",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 66,
          "function_name": "prediction_task",
          "code": "predicted_y = simple_binary_classifier(x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 56,
          "function_name": "simple_binary_classifier",
          "code": "if logit > 0:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 66,
          "function_name": "prediction_task",
          "code": "predicted_y = simple_binary_classifier(x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 57,
          "function_name": "simple_binary_classifier",
          "code": "predicted_y = 1  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 66,
          "function_name": "prediction_task",
          "code": "predicted_y = simple_binary_classifier(x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 60,
          "function_name": "simple_binary_classifier",
          "code": "return predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 66,
          "function_name": "prediction_task",
          "code": "predicted_y = simple_binary_classifier(x)  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 68,
          "function_name": "prediction_task",
          "code": "text(\"The points where logit = x[0] - x[1] - 1 = 0 is the **decision boundary**.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The points where logit = x[0] - x[1] - 1 = 0 is the **decision boundary**.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 69,
          "function_name": "prediction_task",
          "code": "values = [{\"x0\": x, \"x1\": x - 1} for x in np.linspace(-3, 3, 30)]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 70,
          "function_name": "prediction_task",
          "code": "plot(Chart(Data(values=values)).mark_line().encode(x=\"x0:Q\", y=\"x1:Q\").to_dict())  # @clear values"
        }
      ],
      "env": {
        "values": null
      },
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "x0": -3.0,
                  "x1": -4.0
                },
                {
                  "x0": -2.793103448275862,
                  "x1": -3.793103448275862
                },
                {
                  "x0": -2.586206896551724,
                  "x1": -3.586206896551724
                },
                {
                  "x0": -2.3793103448275863,
                  "x1": -3.3793103448275863
                },
                {
                  "x0": -2.1724137931034484,
                  "x1": -3.1724137931034484
                },
                {
                  "x0": -1.9655172413793103,
                  "x1": -2.9655172413793105
                },
                {
                  "x0": -1.7586206896551724,
                  "x1": -2.7586206896551726
                },
                {
                  "x0": -1.5517241379310345,
                  "x1": -2.5517241379310347
                },
                {
                  "x0": -1.3448275862068966,
                  "x1": -2.344827586206897
                },
                {
                  "x0": -1.1379310344827587,
                  "x1": -2.137931034482759
                },
                {
                  "x0": -0.9310344827586206,
                  "x1": -1.9310344827586206
                },
                {
                  "x0": -0.7241379310344827,
                  "x1": -1.7241379310344827
                },
                {
                  "x0": -0.5172413793103448,
                  "x1": -1.5172413793103448
                },
                {
                  "x0": -0.31034482758620685,
                  "x1": -1.3103448275862069
                },
                {
                  "x0": -0.10344827586206895,
                  "x1": -1.103448275862069
                },
                {
                  "x0": 0.10344827586206895,
                  "x1": -0.896551724137931
                },
                {
                  "x0": 0.31034482758620685,
                  "x1": -0.6896551724137931
                },
                {
                  "x0": 0.5172413793103448,
                  "x1": -0.48275862068965525
                },
                {
                  "x0": 0.7241379310344827,
                  "x1": -0.27586206896551735
                },
                {
                  "x0": 0.9310344827586206,
                  "x1": -0.06896551724137945
                },
                {
                  "x0": 1.137931034482759,
                  "x1": 0.1379310344827589
                },
                {
                  "x0": 1.3448275862068968,
                  "x1": 0.3448275862068968
                },
                {
                  "x0": 1.5517241379310347,
                  "x1": 0.5517241379310347
                },
                {
                  "x0": 1.7586206896551726,
                  "x1": 0.7586206896551726
                },
                {
                  "x0": 1.9655172413793105,
                  "x1": 0.9655172413793105
                },
                {
                  "x0": 2.1724137931034484,
                  "x1": 1.1724137931034484
                },
                {
                  "x0": 2.3793103448275863,
                  "x1": 1.3793103448275863
                },
                {
                  "x0": 2.586206896551724,
                  "x1": 1.5862068965517242
                },
                {
                  "x0": 2.793103448275862,
                  "x1": 1.793103448275862
                },
                {
                  "x0": 3.0,
                  "x1": 2.0
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "x0",
                "type": "quantitative"
              },
              "y": {
                "field": "x1",
                "type": "quantitative"
              }
            },
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 72,
          "function_name": "prediction_task",
          "code": "text(\"But how do we get the predictor?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "But how do we get the predictor?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 22,
          "function_name": "main",
          "code": "prediction_task()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "machine_learning_problem()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 75,
          "function_name": "machine_learning_problem",
          "code": "def machine_learning_problem():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 76,
          "function_name": "machine_learning_problem",
          "code": "text(\"The **training data** is a set of examples that demonstrate the task.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The **training data** is a set of examples that demonstrate the task.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 77,
          "function_name": "machine_learning_problem",
          "code": "text(\"Each **example** consists of an (input x, target output y) pair.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Each **example** consists of an (input x, target output y) pair.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 78,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 78,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 94,
          "function_name": "get_training_data",
          "code": "def get_training_data():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 78,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 96,
          "function_name": "get_training_data",
          "code": "Example(x=np.array([1, 2]), target_y=-1),"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 78,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 97,
          "function_name": "get_training_data",
          "code": "Example(x=np.array([2, 0]), target_y=1),"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 78,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 98,
          "function_name": "get_training_data",
          "code": "Example(x=np.array([0, 0]), target_y=-1),"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 78,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 95,
          "function_name": "get_training_data",
          "code": "return ["
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 78,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        }
      ],
      "env": {
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 80,
          "function_name": "machine_learning_problem",
          "code": "text(\"A **learning algorithm** takes the training data and produces a predictor.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "A **learning algorithm** takes the training data and produces a predictor.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 82,
          "function_name": "machine_learning_problem",
          "code": "text(\"Key questions:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Key questions:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 83,
          "function_name": "machine_learning_problem",
          "code": "text(\"1. Which predictors are possible? **hypothesis class**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "1. Which predictors are possible? **hypothesis class**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 84,
          "function_name": "machine_learning_problem",
          "code": "text(\"2. How good is a predictor? **loss function**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "2. How good is a predictor? **loss function**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 85,
          "function_name": "machine_learning_problem",
          "code": "text(\"3. How do we compute the best predictor? **optimization algorithm**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "3. How do we compute the best predictor? **optimization algorithm**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "machine_learning_problem()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 102,
          "function_name": "hypothesis_class",
          "code": "def hypothesis_class():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 103,
          "function_name": "hypothesis_class",
          "code": "text(\"Which predictors (classifiers) are possible?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Which predictors (classifiers) are possible?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 105,
          "function_name": "hypothesis_class",
          "code": "text(\"For linear classifiers, each set of parameters has a **weight vector** and a **bias**.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "For linear classifiers, each set of parameters has a **weight vector** and a **bias**.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 106,
          "function_name": "hypothesis_class",
          "code": "params = Parameters(weight=np.array([1, -1]), bias=-1)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 107,
          "function_name": "hypothesis_class",
          "code": "x = np.array([1, -1])  #  @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            -1
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 108,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 108,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 124,
          "function_name": "binary_classifier",
          "code": "def binary_classifier(params: Parameters, x: np.ndarray) -> float:  # @inspect params x"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": -1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            -1
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 108,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 126,
          "function_name": "binary_classifier",
          "code": "score = params.weight @ x + params.bias  # @inspect score"
        }
      ],
      "env": {
        "score": {
          "type": "numpy.int64",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 108,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 127,
          "function_name": "binary_classifier",
          "code": "predicted_y = 1 if score > 0 else -1  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 108,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 128,
          "function_name": "binary_classifier",
          "code": "return predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 108,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 110,
          "function_name": "hypothesis_class",
          "code": "text(\"Here's another predictor:\")  # @clear params x predicted_y"
        }
      ],
      "env": {
        "params": null,
        "x": null,
        "predicted_y": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "Here's another predictor:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 111,
          "function_name": "hypothesis_class",
          "code": "params = Parameters(weight=np.array([1, -1]), bias=1)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 112,
          "function_name": "hypothesis_class",
          "code": "x = np.array([1, 1])  #  @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            1
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 113,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 113,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 124,
          "function_name": "binary_classifier",
          "code": "def binary_classifier(params: Parameters, x: np.ndarray) -> float:  # @inspect params x"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            1
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 113,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 126,
          "function_name": "binary_classifier",
          "code": "score = params.weight @ x + params.bias  # @inspect score"
        }
      ],
      "env": {
        "score": {
          "type": "numpy.int64",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 113,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 127,
          "function_name": "binary_classifier",
          "code": "predicted_y = 1 if score > 0 else -1  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 113,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 128,
          "function_name": "binary_classifier",
          "code": "return predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 113,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 115,
          "function_name": "hypothesis_class",
          "code": "text(\"The **hypothesis class** is the set of all predictors you can get by choosing parameters (weight, bias).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The **hypothesis class** is the set of all predictors you can get by choosing parameters (weight, bias).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 25,
          "function_name": "main",
          "code": "hypothesis_class()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 131,
          "function_name": "zero_one_loss_function",
          "code": "def zero_one_loss_function():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 132,
          "function_name": "zero_one_loss_function",
          "code": "text(\"The next design decision is how to judge each of the many possible predictors.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The next design decision is how to judge each of the many possible predictors.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 134,
          "function_name": "zero_one_loss_function",
          "code": "text(\"Let's consider a predictor:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's consider a predictor:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 135,
          "function_name": "zero_one_loss_function",
          "code": "params = Parameters(weight=np.array([1, -1]), bias=1)  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 137,
          "function_name": "zero_one_loss_function",
          "code": "text(\"Recall the training data:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall the training data:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 138,
          "function_name": "zero_one_loss_function",
          "code": "training_data = get_training_data()  # @inspect training_data @stepover"
        }
      ],
      "env": {
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 140,
          "function_name": "zero_one_loss_function",
          "code": "text(\"How well does `params` fit `training_data`?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "How well does `params` fit `training_data`?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 141,
          "function_name": "zero_one_loss_function",
          "code": "text(\"We define a loss function that measures how unhappy one point is based on params.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We define a loss function that measures how unhappy one point is based on params.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 142,
          "function_name": "zero_one_loss_function",
          "code": "text(\"For regression, we used the squared loss:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "For regression, we used the squared loss:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 143,
          "function_name": "zero_one_loss_function",
          "code": "text(\"Intuition: how far away the prediction (score) is from the target.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Intuition: how far away the prediction (score) is from the target.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 144,
          "function_name": "zero_one_loss_function",
          "code": "loss = squared_loss(Example(x=np.array([2, 0]), target_y=0.5), params)  # @inspect loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 144,
          "function_name": "zero_one_loss_function",
          "code": "loss = squared_loss(Example(x=np.array([2, 0]), target_y=0.5), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 172,
          "function_name": "squared_loss",
          "code": "def squared_loss(example: Example, params: Parameters) -> float:  # @inspect example params"
        }
      ],
      "env": {
        "example": {
          "type": "linear_classification.Example",
          "contents": {
            "x": {
              "type": "numpy.ndarray",
              "contents": [
                2,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "target_y": {
              "type": "float",
              "contents": 0.5,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 144,
          "function_name": "zero_one_loss_function",
          "code": "loss = squared_loss(Example(x=np.array([2, 0]), target_y=0.5), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 173,
          "function_name": "squared_loss",
          "code": "predicted_y = example.x @ params.weight + params.bias  # @inspect prediction"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 144,
          "function_name": "zero_one_loss_function",
          "code": "loss = squared_loss(Example(x=np.array([2, 0]), target_y=0.5), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 174,
          "function_name": "squared_loss",
          "code": "residual = predicted_y - example.target_y  # @inspect residual"
        }
      ],
      "env": {
        "residual": {
          "type": "numpy.float64",
          "contents": 2.5,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 144,
          "function_name": "zero_one_loss_function",
          "code": "loss = squared_loss(Example(x=np.array([2, 0]), target_y=0.5), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 175,
          "function_name": "squared_loss",
          "code": "return residual ** 2"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 144,
          "function_name": "zero_one_loss_function",
          "code": "loss = squared_loss(Example(x=np.array([2, 0]), target_y=0.5), params)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "numpy.float64",
          "contents": 6.25,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 145,
          "function_name": "zero_one_loss_function",
          "code": "values = [{\"residual\": residual, \"loss\": residual ** 2} for residual in np.linspace(-1, 1, 30)]  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 146,
          "function_name": "zero_one_loss_function",
          "code": "plot(Chart(Data(values=values)).mark_line().encode(x=\"residual:Q\", y=\"loss:Q\").to_dict())"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "residual": -1.0,
                  "loss": 1.0
                },
                {
                  "residual": -0.9310344827586207,
                  "loss": 0.8668252080856124
                },
                {
                  "residual": -0.8620689655172413,
                  "loss": 0.7431629013079666
                },
                {
                  "residual": -0.7931034482758621,
                  "loss": 0.6290130796670631
                },
                {
                  "residual": -0.7241379310344828,
                  "loss": 0.5243757431629014
                },
                {
                  "residual": -0.6551724137931034,
                  "loss": 0.42925089179548154
                },
                {
                  "residual": -0.5862068965517242,
                  "loss": 0.3436385255648039
                },
                {
                  "residual": -0.5172413793103449,
                  "loss": 0.26753864447086806
                },
                {
                  "residual": -0.4482758620689655,
                  "loss": 0.2009512485136742
                },
                {
                  "residual": -0.3793103448275862,
                  "loss": 0.14387633769322233
                },
                {
                  "residual": -0.31034482758620685,
                  "loss": 0.09631391200951246
                },
                {
                  "residual": -0.24137931034482762,
                  "loss": 0.05826397146254461
                },
                {
                  "residual": -0.1724137931034483,
                  "loss": 0.02972651605231867
                },
                {
                  "residual": -0.10344827586206895,
                  "loss": 0.010701545778834717
                },
                {
                  "residual": -0.034482758620689724,
                  "loss": 0.0011890606420927514
                },
                {
                  "residual": 0.034482758620689724,
                  "loss": 0.0011890606420927514
                },
                {
                  "residual": 0.10344827586206895,
                  "loss": 0.010701545778834717
                },
                {
                  "residual": 0.17241379310344818,
                  "loss": 0.029726516052318634
                },
                {
                  "residual": 0.24137931034482762,
                  "loss": 0.05826397146254461
                },
                {
                  "residual": 0.31034482758620685,
                  "loss": 0.09631391200951246
                },
                {
                  "residual": 0.3793103448275863,
                  "loss": 0.14387633769322242
                },
                {
                  "residual": 0.4482758620689655,
                  "loss": 0.2009512485136742
                },
                {
                  "residual": 0.5172413793103448,
                  "loss": 0.26753864447086795
                },
                {
                  "residual": 0.5862068965517242,
                  "loss": 0.3436385255648039
                },
                {
                  "residual": 0.6551724137931034,
                  "loss": 0.42925089179548154
                },
                {
                  "residual": 0.7241379310344827,
                  "loss": 0.5243757431629011
                },
                {
                  "residual": 0.7931034482758621,
                  "loss": 0.6290130796670631
                },
                {
                  "residual": 0.8620689655172413,
                  "loss": 0.7431629013079666
                },
                {
                  "residual": 0.9310344827586206,
                  "loss": 0.8668252080856121
                },
                {
                  "residual": 1.0,
                  "loss": 1.0
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "residual",
                "type": "quantitative"
              },
              "y": {
                "field": "loss",
                "type": "quantitative"
              }
            },
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 148,
          "function_name": "zero_one_loss_function",
          "code": "text(\"For binary classification, we use the zero-one loss:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "For binary classification, we use the zero-one loss:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 149,
          "function_name": "zero_one_loss_function",
          "code": "text(\"Intuition: whether the prediction has the same sign as the target.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Intuition: whether the prediction has the same sign as the target.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 150,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 150,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 161,
          "function_name": "zero_one_loss_using_predictor",
          "code": "def zero_one_loss_using_predictor(example: Example, params: Parameters) -> float:  # @inspect example params"
        }
      ],
      "env": {
        "example": {
          "type": "linear_classification.Example",
          "contents": {
            "x": {
              "type": "numpy.ndarray",
              "contents": [
                2,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "target_y": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 150,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 162,
          "function_name": "zero_one_loss_using_predictor",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 150,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 162,
          "function_name": "zero_one_loss_using_predictor",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 124,
          "function_name": "binary_classifier",
          "code": "def binary_classifier(params: Parameters, x: np.ndarray) -> float:  # @inspect params x"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            2,
            0
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 150,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 162,
          "function_name": "zero_one_loss_using_predictor",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 126,
          "function_name": "binary_classifier",
          "code": "score = params.weight @ x + params.bias  # @inspect score"
        }
      ],
      "env": {
        "score": {
          "type": "numpy.int64",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 150,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 162,
          "function_name": "zero_one_loss_using_predictor",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 127,
          "function_name": "binary_classifier",
          "code": "predicted_y = 1 if score > 0 else -1  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 150,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 162,
          "function_name": "zero_one_loss_using_predictor",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 128,
          "function_name": "binary_classifier",
          "code": "return predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 150,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 162,
          "function_name": "zero_one_loss_using_predictor",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 150,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 163,
          "function_name": "zero_one_loss_using_predictor",
          "code": "return int(predicted_y != example.target_y)  # Whether the prediction was wrong"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 150,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 151,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 151,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 161,
          "function_name": "zero_one_loss_using_predictor",
          "code": "def zero_one_loss_using_predictor(example: Example, params: Parameters) -> float:  # @inspect example params"
        }
      ],
      "env": {
        "example": {
          "type": "linear_classification.Example",
          "contents": {
            "x": {
              "type": "numpy.ndarray",
              "contents": [
                0,
                -2
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "target_y": {
              "type": "int",
              "contents": -1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 151,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 162,
          "function_name": "zero_one_loss_using_predictor",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 151,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 162,
          "function_name": "zero_one_loss_using_predictor",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 124,
          "function_name": "binary_classifier",
          "code": "def binary_classifier(params: Parameters, x: np.ndarray) -> float:  # @inspect params x"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            0,
            -2
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 151,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 162,
          "function_name": "zero_one_loss_using_predictor",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 126,
          "function_name": "binary_classifier",
          "code": "score = params.weight @ x + params.bias  # @inspect score"
        }
      ],
      "env": {
        "score": {
          "type": "numpy.int64",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 151,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 162,
          "function_name": "zero_one_loss_using_predictor",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 127,
          "function_name": "binary_classifier",
          "code": "predicted_y = 1 if score > 0 else -1  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 151,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 162,
          "function_name": "zero_one_loss_using_predictor",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 128,
          "function_name": "binary_classifier",
          "code": "return predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 151,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 162,
          "function_name": "zero_one_loss_using_predictor",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 151,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 163,
          "function_name": "zero_one_loss_using_predictor",
          "code": "return int(predicted_y != example.target_y)  # Whether the prediction was wrong"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 151,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_using_predictor(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 152,
          "function_name": "zero_one_loss_function",
          "code": "text(\"We can write the zero-one loss in terms of the score.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We can write the zero-one loss in terms of the score.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 153,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 153,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 166,
          "function_name": "zero_one_loss",
          "code": "def zero_one_loss(example: Example, params: Parameters) -> float:  # @inspect example params"
        }
      ],
      "env": {
        "example": {
          "type": "linear_classification.Example",
          "contents": {
            "x": {
              "type": "numpy.ndarray",
              "contents": [
                2,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "target_y": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 153,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 167,
          "function_name": "zero_one_loss",
          "code": "score = example.x @ params.weight + params.bias  # @inspect score"
        }
      ],
      "env": {
        "score": {
          "type": "numpy.int64",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 153,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 168,
          "function_name": "zero_one_loss",
          "code": "margin = score * example.target_y  # @inspect margin"
        }
      ],
      "env": {
        "margin": {
          "type": "numpy.int64",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 153,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 169,
          "function_name": "zero_one_loss",
          "code": "return int(margin <= 0)  # Whether the prediction was wrong"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 153,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 154,
          "function_name": "zero_one_loss_function",
          "code": "values = [{\"margin\": margin, \"loss\": int(margin <= 0)} for margin in np.linspace(-1, 1, 30)]  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 155,
          "function_name": "zero_one_loss_function",
          "code": "plot(Chart(Data(values=values)).mark_line().encode(x=\"margin:Q\", y=\"loss:Q\").to_dict())"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "margin": -1.0,
                  "loss": 1
                },
                {
                  "margin": -0.9310344827586207,
                  "loss": 1
                },
                {
                  "margin": -0.8620689655172413,
                  "loss": 1
                },
                {
                  "margin": -0.7931034482758621,
                  "loss": 1
                },
                {
                  "margin": -0.7241379310344828,
                  "loss": 1
                },
                {
                  "margin": -0.6551724137931034,
                  "loss": 1
                },
                {
                  "margin": -0.5862068965517242,
                  "loss": 1
                },
                {
                  "margin": -0.5172413793103449,
                  "loss": 1
                },
                {
                  "margin": -0.4482758620689655,
                  "loss": 1
                },
                {
                  "margin": -0.3793103448275862,
                  "loss": 1
                },
                {
                  "margin": -0.31034482758620685,
                  "loss": 1
                },
                {
                  "margin": -0.24137931034482762,
                  "loss": 1
                },
                {
                  "margin": -0.1724137931034483,
                  "loss": 1
                },
                {
                  "margin": -0.10344827586206895,
                  "loss": 1
                },
                {
                  "margin": -0.034482758620689724,
                  "loss": 1
                },
                {
                  "margin": 0.034482758620689724,
                  "loss": 0
                },
                {
                  "margin": 0.10344827586206895,
                  "loss": 0
                },
                {
                  "margin": 0.17241379310344818,
                  "loss": 0
                },
                {
                  "margin": 0.24137931034482762,
                  "loss": 0
                },
                {
                  "margin": 0.31034482758620685,
                  "loss": 0
                },
                {
                  "margin": 0.3793103448275863,
                  "loss": 0
                },
                {
                  "margin": 0.4482758620689655,
                  "loss": 0
                },
                {
                  "margin": 0.5172413793103448,
                  "loss": 0
                },
                {
                  "margin": 0.5862068965517242,
                  "loss": 0
                },
                {
                  "margin": 0.6551724137931034,
                  "loss": 0
                },
                {
                  "margin": 0.7241379310344827,
                  "loss": 0
                },
                {
                  "margin": 0.7931034482758621,
                  "loss": 0
                },
                {
                  "margin": 0.8620689655172413,
                  "loss": 0
                },
                {
                  "margin": 0.9310344827586206,
                  "loss": 0
                },
                {
                  "margin": 1.0,
                  "loss": 0
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "margin",
                "type": "quantitative"
              },
              "y": {
                "field": "loss",
                "type": "quantitative"
              }
            },
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 157,
          "function_name": "zero_one_loss_function",
          "code": "text(\"The training loss is the average of the per-example losses of the training examples.\")  # @clear loss"
        }
      ],
      "env": {
        "loss": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "The training loss is the average of the per-example losses of the training examples.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 158,
          "function_name": "zero_one_loss_function",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 158,
          "function_name": "zero_one_loss_function",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 178,
          "function_name": "train_zero_one_loss",
          "code": "def train_zero_one_loss(params: Parameters, training_data: list[Example]) -> float:  # @inspect params training_data"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 158,
          "function_name": "zero_one_loss_function",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 179,
          "function_name": "train_zero_one_loss",
          "code": "losses = [zero_one_loss(example, params) for example in training_data]  # @inspect losses @stepover"
        }
      ],
      "env": {
        "losses": {
          "type": "list",
          "contents": [
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 158,
          "function_name": "zero_one_loss_function",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 180,
          "function_name": "train_zero_one_loss",
          "code": "train_loss = np.mean(losses)  # @inspect train_loss"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.6666666666666666,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 158,
          "function_name": "zero_one_loss_function",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 181,
          "function_name": "train_zero_one_loss",
          "code": "return train_loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 158,
          "function_name": "zero_one_loss_function",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.6666666666666666,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 184,
          "function_name": "optimization_algorithm",
          "code": "def optimization_algorithm():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 185,
          "function_name": "optimization_algorithm",
          "code": "text(\"Recall that for every set of parameters `params`, we can compute the training loss `train_loss`.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall that for every set of parameters `params`, we can compute the training loss `train_loss`.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 187,
          "function_name": "optimization_algorithm",
          "code": "text(\"Recall in linear regression we optimized the parameters using gradient descent.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall in linear regression we optimized the parameters using gradient descent.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 188,
          "function_name": "optimization_algorithm",
          "code": "text(\"So let's do the same thing here.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So let's do the same thing here.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 190,
          "function_name": "optimization_algorithm",
          "code": "params = Parameters(weight=np.array([1, 1]), bias=0)  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 191,
          "function_name": "optimization_algorithm",
          "code": "training_data = get_training_data()  # @inspect training_data @stepover"
        }
      ],
      "env": {
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 192,
          "function_name": "optimization_algorithm",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 192,
          "function_name": "optimization_algorithm",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 178,
          "function_name": "train_zero_one_loss",
          "code": "def train_zero_one_loss(params: Parameters, training_data: list[Example]) -> float:  # @inspect params training_data"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 192,
          "function_name": "optimization_algorithm",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 179,
          "function_name": "train_zero_one_loss",
          "code": "losses = [zero_one_loss(example, params) for example in training_data]  # @inspect losses @stepover"
        }
      ],
      "env": {
        "losses": {
          "type": "list",
          "contents": [
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 192,
          "function_name": "optimization_algorithm",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 180,
          "function_name": "train_zero_one_loss",
          "code": "train_loss = np.mean(losses)  # @inspect train_loss"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.6666666666666666,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 192,
          "function_name": "optimization_algorithm",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 181,
          "function_name": "train_zero_one_loss",
          "code": "return train_loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 192,
          "function_name": "optimization_algorithm",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.6666666666666666,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 194,
          "function_name": "optimization_algorithm",
          "code": "text(\"We want to find the parameters that yield the lowest training loss.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We want to find the parameters that yield the lowest training loss.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 195,
          "function_name": "optimization_algorithm",
          "code": "text(\"This is an optimization problem as with linear regression.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This is an optimization problem as with linear regression.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 197,
          "function_name": "optimization_algorithm",
          "code": "text(\"Let's take the gradient\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's take the gradient",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 198,
          "function_name": "optimization_algorithm",
          "code": "grad = gradient_zero_one_loss(training_data[0], params)  # @inspect grad"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 198,
          "function_name": "optimization_algorithm",
          "code": "grad = gradient_zero_one_loss(training_data[0], params)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 205,
          "function_name": "gradient_zero_one_loss",
          "code": "def gradient_zero_one_loss(example: Example, params: Parameters) -> Parameters:  # @inspect example params"
        }
      ],
      "env": {
        "example": {
          "type": "linear_classification.Example",
          "contents": {
            "x": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                2
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "target_y": {
              "type": "int",
              "contents": -1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 198,
          "function_name": "optimization_algorithm",
          "code": "grad = gradient_zero_one_loss(training_data[0], params)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 206,
          "function_name": "gradient_zero_one_loss",
          "code": "score = example.x @ params.weight + params.bias  # @inspect score"
        }
      ],
      "env": {
        "score": {
          "type": "numpy.int64",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 198,
          "function_name": "optimization_algorithm",
          "code": "grad = gradient_zero_one_loss(training_data[0], params)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 207,
          "function_name": "gradient_zero_one_loss",
          "code": "margin = score * example.target_y  # @inspect margin"
        }
      ],
      "env": {
        "margin": {
          "type": "numpy.int64",
          "contents": -3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 198,
          "function_name": "optimization_algorithm",
          "code": "grad = gradient_zero_one_loss(training_data[0], params)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 209,
          "function_name": "gradient_zero_one_loss",
          "code": "return Parameters(weight=np.zeros_like(params.weight), bias=0)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 198,
          "function_name": "optimization_algorithm",
          "code": "grad = gradient_zero_one_loss(training_data[0], params)  # @inspect grad"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 199,
          "function_name": "optimization_algorithm",
          "code": "text(\"We have a problem: the gradient is zero everywhere!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We have a problem: the gradient is zero everywhere!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 200,
          "function_name": "optimization_algorithm",
          "code": "text(\"So gradient descent won't move!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So gradient descent won't move!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 201,
          "function_name": "optimization_algorithm",
          "code": "text(\"Intuition: if example is wrong, moving parameters a bit won't make it right, so no local improvement.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Intuition: if example is wrong, moving parameters a bit won't make it right, so no local improvement.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 202,
          "function_name": "optimization_algorithm",
          "code": "text(\"So what do we do?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So what do we do?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "optimization_algorithm()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 318,
          "function_name": "hinge_loss_function",
          "code": "def hinge_loss_function():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 319,
          "function_name": "hinge_loss_function",
          "code": "text(\"Let's define a **surrogate** loss function that is easier to optimize.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's define a **surrogate** loss function that is easier to optimize.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 321,
          "function_name": "hinge_loss_function",
          "code": "data = make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0))"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 321,
          "function_name": "hinge_loss_function",
          "code": "data = make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0))"
        },
        {
          "path": "linear_classification.py",
          "line_number": 336,
          "function_name": "make_plot",
          "code": "def make_plot(title: str, xlabel: str, ylabel: str, f: Callable[[float], float]) -> dict:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 321,
          "function_name": "hinge_loss_function",
          "code": "data = make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0))"
        },
        {
          "path": "linear_classification.py",
          "line_number": 337,
          "function_name": "make_plot",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(-1, 1, 30)]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 321,
          "function_name": "hinge_loss_function",
          "code": "data = make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0))"
        },
        {
          "path": "linear_classification.py",
          "line_number": 337,
          "function_name": "make_plot",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(-1, 1, 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 337,
          "function_name": "<listcomp>",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(-1, 1, 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 321,
          "function_name": "<lambda>",
          "code": "data = make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0))"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 321,
          "function_name": "hinge_loss_function",
          "code": "data = make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0))"
        },
        {
          "path": "linear_classification.py",
          "line_number": 337,
          "function_name": "make_plot",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(-1, 1, 30)]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 321,
          "function_name": "hinge_loss_function",
          "code": "data = make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0))"
        },
        {
          "path": "linear_classification.py",
          "line_number": 338,
          "function_name": "make_plot",
          "code": "return Chart(Data(values=values)).mark_line().encode(x=f\"{xlabel}:Q\", y=f\"{ylabel}:Q\").to_dict()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 321,
          "function_name": "hinge_loss_function",
          "code": "data = make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0))"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 322,
          "function_name": "hinge_loss_function",
          "code": "plot(data)  # @stepover"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "margin": -1.0,
                  "loss": 1
                },
                {
                  "margin": -0.9310344827586207,
                  "loss": 1
                },
                {
                  "margin": -0.8620689655172413,
                  "loss": 1
                },
                {
                  "margin": -0.7931034482758621,
                  "loss": 1
                },
                {
                  "margin": -0.7241379310344828,
                  "loss": 1
                },
                {
                  "margin": -0.6551724137931034,
                  "loss": 1
                },
                {
                  "margin": -0.5862068965517242,
                  "loss": 1
                },
                {
                  "margin": -0.5172413793103449,
                  "loss": 1
                },
                {
                  "margin": -0.4482758620689655,
                  "loss": 1
                },
                {
                  "margin": -0.3793103448275862,
                  "loss": 1
                },
                {
                  "margin": -0.31034482758620685,
                  "loss": 1
                },
                {
                  "margin": -0.24137931034482762,
                  "loss": 1
                },
                {
                  "margin": -0.1724137931034483,
                  "loss": 1
                },
                {
                  "margin": -0.10344827586206895,
                  "loss": 1
                },
                {
                  "margin": -0.034482758620689724,
                  "loss": 1
                },
                {
                  "margin": 0.034482758620689724,
                  "loss": 0
                },
                {
                  "margin": 0.10344827586206895,
                  "loss": 0
                },
                {
                  "margin": 0.17241379310344818,
                  "loss": 0
                },
                {
                  "margin": 0.24137931034482762,
                  "loss": 0
                },
                {
                  "margin": 0.31034482758620685,
                  "loss": 0
                },
                {
                  "margin": 0.3793103448275863,
                  "loss": 0
                },
                {
                  "margin": 0.4482758620689655,
                  "loss": 0
                },
                {
                  "margin": 0.5172413793103448,
                  "loss": 0
                },
                {
                  "margin": 0.5862068965517242,
                  "loss": 0
                },
                {
                  "margin": 0.6551724137931034,
                  "loss": 0
                },
                {
                  "margin": 0.7241379310344827,
                  "loss": 0
                },
                {
                  "margin": 0.7931034482758621,
                  "loss": 0
                },
                {
                  "margin": 0.8620689655172413,
                  "loss": 0
                },
                {
                  "margin": 0.9310344827586206,
                  "loss": 0
                },
                {
                  "margin": 1.0,
                  "loss": 0
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "margin",
                "type": "quantitative"
              },
              "y": {
                "field": "loss",
                "type": "quantitative"
              }
            },
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 324,
          "function_name": "hinge_loss_function",
          "code": "text(\"The **hinge loss**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The **hinge loss**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 325,
          "function_name": "hinge_loss_function",
          "code": "data = make_plot(\"hinge loss\", \"margin\", \"loss\", lambda margin: max(0, 1 - margin))"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 325,
          "function_name": "hinge_loss_function",
          "code": "data = make_plot(\"hinge loss\", \"margin\", \"loss\", lambda margin: max(0, 1 - margin))"
        },
        {
          "path": "linear_classification.py",
          "line_number": 336,
          "function_name": "make_plot",
          "code": "def make_plot(title: str, xlabel: str, ylabel: str, f: Callable[[float], float]) -> dict:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 325,
          "function_name": "hinge_loss_function",
          "code": "data = make_plot(\"hinge loss\", \"margin\", \"loss\", lambda margin: max(0, 1 - margin))"
        },
        {
          "path": "linear_classification.py",
          "line_number": 337,
          "function_name": "make_plot",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(-1, 1, 30)]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 325,
          "function_name": "hinge_loss_function",
          "code": "data = make_plot(\"hinge loss\", \"margin\", \"loss\", lambda margin: max(0, 1 - margin))"
        },
        {
          "path": "linear_classification.py",
          "line_number": 337,
          "function_name": "make_plot",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(-1, 1, 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 337,
          "function_name": "<listcomp>",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(-1, 1, 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 325,
          "function_name": "<lambda>",
          "code": "data = make_plot(\"hinge loss\", \"margin\", \"loss\", lambda margin: max(0, 1 - margin))"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 325,
          "function_name": "hinge_loss_function",
          "code": "data = make_plot(\"hinge loss\", \"margin\", \"loss\", lambda margin: max(0, 1 - margin))"
        },
        {
          "path": "linear_classification.py",
          "line_number": 337,
          "function_name": "make_plot",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(-1, 1, 30)]"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 325,
          "function_name": "hinge_loss_function",
          "code": "data = make_plot(\"hinge loss\", \"margin\", \"loss\", lambda margin: max(0, 1 - margin))"
        },
        {
          "path": "linear_classification.py",
          "line_number": 338,
          "function_name": "make_plot",
          "code": "return Chart(Data(values=values)).mark_line().encode(x=f\"{xlabel}:Q\", y=f\"{ylabel}:Q\").to_dict()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 325,
          "function_name": "hinge_loss_function",
          "code": "data = make_plot(\"hinge loss\", \"margin\", \"loss\", lambda margin: max(0, 1 - margin))"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 326,
          "function_name": "hinge_loss_function",
          "code": "plot(data)  # @stepover"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "margin": -1.0,
                  "loss": 2.0
                },
                {
                  "margin": -0.9310344827586207,
                  "loss": 1.9310344827586206
                },
                {
                  "margin": -0.8620689655172413,
                  "loss": 1.8620689655172413
                },
                {
                  "margin": -0.7931034482758621,
                  "loss": 1.793103448275862
                },
                {
                  "margin": -0.7241379310344828,
                  "loss": 1.7241379310344827
                },
                {
                  "margin": -0.6551724137931034,
                  "loss": 1.6551724137931034
                },
                {
                  "margin": -0.5862068965517242,
                  "loss": 1.5862068965517242
                },
                {
                  "margin": -0.5172413793103449,
                  "loss": 1.5172413793103448
                },
                {
                  "margin": -0.4482758620689655,
                  "loss": 1.4482758620689655
                },
                {
                  "margin": -0.3793103448275862,
                  "loss": 1.3793103448275863
                },
                {
                  "margin": -0.31034482758620685,
                  "loss": 1.3103448275862069
                },
                {
                  "margin": -0.24137931034482762,
                  "loss": 1.2413793103448276
                },
                {
                  "margin": -0.1724137931034483,
                  "loss": 1.1724137931034484
                },
                {
                  "margin": -0.10344827586206895,
                  "loss": 1.103448275862069
                },
                {
                  "margin": -0.034482758620689724,
                  "loss": 1.0344827586206897
                },
                {
                  "margin": 0.034482758620689724,
                  "loss": 0.9655172413793103
                },
                {
                  "margin": 0.10344827586206895,
                  "loss": 0.896551724137931
                },
                {
                  "margin": 0.17241379310344818,
                  "loss": 0.8275862068965518
                },
                {
                  "margin": 0.24137931034482762,
                  "loss": 0.7586206896551724
                },
                {
                  "margin": 0.31034482758620685,
                  "loss": 0.6896551724137931
                },
                {
                  "margin": 0.3793103448275863,
                  "loss": 0.6206896551724137
                },
                {
                  "margin": 0.4482758620689655,
                  "loss": 0.5517241379310345
                },
                {
                  "margin": 0.5172413793103448,
                  "loss": 0.48275862068965525
                },
                {
                  "margin": 0.5862068965517242,
                  "loss": 0.4137931034482758
                },
                {
                  "margin": 0.6551724137931034,
                  "loss": 0.3448275862068966
                },
                {
                  "margin": 0.7241379310344827,
                  "loss": 0.27586206896551735
                },
                {
                  "margin": 0.7931034482758621,
                  "loss": 0.2068965517241379
                },
                {
                  "margin": 0.8620689655172413,
                  "loss": 0.13793103448275867
                },
                {
                  "margin": 0.9310344827586206,
                  "loss": 0.06896551724137945
                },
                {
                  "margin": 1.0,
                  "loss": 0
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "margin",
                "type": "quantitative"
              },
              "y": {
                "field": "loss",
                "type": "quantitative"
              }
            },
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 328,
          "function_name": "hinge_loss_function",
          "code": "example = Example(x=np.array([2, 0]), target_y=1)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 329,
          "function_name": "hinge_loss_function",
          "code": "params = Parameters(weight=np.array([1, -1]), bias=1)  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 330,
          "function_name": "hinge_loss_function",
          "code": "loss = hinge_loss(example, params)  # @inspect loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 330,
          "function_name": "hinge_loss_function",
          "code": "loss = hinge_loss(example, params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 341,
          "function_name": "hinge_loss",
          "code": "def hinge_loss(example: Example, params: Parameters) -> float:  # @inspect example params"
        }
      ],
      "env": {
        "example": {
          "type": "linear_classification.Example",
          "contents": {
            "x": {
              "type": "numpy.ndarray",
              "contents": [
                2,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "target_y": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 330,
          "function_name": "hinge_loss_function",
          "code": "loss = hinge_loss(example, params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 342,
          "function_name": "hinge_loss",
          "code": "score = example.x @ params.weight + params.bias  # @inspect score"
        }
      ],
      "env": {
        "score": {
          "type": "numpy.int64",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 330,
          "function_name": "hinge_loss_function",
          "code": "loss = hinge_loss(example, params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 343,
          "function_name": "hinge_loss",
          "code": "margin = score * example.target_y  # @inspect margin"
        }
      ],
      "env": {
        "margin": {
          "type": "numpy.int64",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 330,
          "function_name": "hinge_loss_function",
          "code": "loss = hinge_loss(example, params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 344,
          "function_name": "hinge_loss",
          "code": "loss = max(0, 1 - margin)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 330,
          "function_name": "hinge_loss_function",
          "code": "loss = hinge_loss(example, params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 345,
          "function_name": "hinge_loss",
          "code": "return loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 330,
          "function_name": "hinge_loss_function",
          "code": "loss = hinge_loss(example, params)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 332,
          "function_name": "hinge_loss_function",
          "code": "training_data = get_training_data()  # @inspect training_data"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 332,
          "function_name": "hinge_loss_function",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 94,
          "function_name": "get_training_data",
          "code": "def get_training_data():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 332,
          "function_name": "hinge_loss_function",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 96,
          "function_name": "get_training_data",
          "code": "Example(x=np.array([1, 2]), target_y=-1),"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 332,
          "function_name": "hinge_loss_function",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 97,
          "function_name": "get_training_data",
          "code": "Example(x=np.array([2, 0]), target_y=1),"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 332,
          "function_name": "hinge_loss_function",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 98,
          "function_name": "get_training_data",
          "code": "Example(x=np.array([0, 0]), target_y=-1),"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 332,
          "function_name": "hinge_loss_function",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 95,
          "function_name": "get_training_data",
          "code": "return ["
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 332,
          "function_name": "hinge_loss_function",
          "code": "training_data = get_training_data()  # @inspect training_data"
        }
      ],
      "env": {
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 333,
          "function_name": "hinge_loss_function",
          "code": "train_loss = train_hinge_loss(params, training_data)  # @inspect train_loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 333,
          "function_name": "hinge_loss_function",
          "code": "train_loss = train_hinge_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 348,
          "function_name": "train_hinge_loss",
          "code": "def train_hinge_loss(params: Parameters, training_data: list[Example]) -> float:  # @inspect params training_data"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 333,
          "function_name": "hinge_loss_function",
          "code": "train_loss = train_hinge_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 349,
          "function_name": "train_hinge_loss",
          "code": "losses = [hinge_loss(example, params) for example in training_data]  # @inspect losses @stepover"
        }
      ],
      "env": {
        "losses": {
          "type": "list",
          "contents": [
            {
              "type": "numpy.int64",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            {
              "type": "numpy.int64",
              "contents": 2,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 333,
          "function_name": "hinge_loss_function",
          "code": "train_loss = train_hinge_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 350,
          "function_name": "train_hinge_loss",
          "code": "train_loss = np.mean(losses)  # @inspect train_loss"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 1.0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 333,
          "function_name": "hinge_loss_function",
          "code": "train_loss = train_hinge_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 351,
          "function_name": "train_hinge_loss",
          "code": "return train_loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 333,
          "function_name": "hinge_loss_function",
          "code": "train_loss = train_hinge_loss(params, training_data)  # @inspect train_loss"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 1.0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "hinge_loss_function()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 354,
          "function_name": "optimization_algorithm_take_2",
          "code": "def optimization_algorithm_take_2():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 355,
          "function_name": "optimization_algorithm_take_2",
          "code": "params = Parameters(weight=np.array([0, 0]), bias=0)  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 356,
          "function_name": "optimization_algorithm_take_2",
          "code": "training_data = get_training_data()  # @inspect training_data"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 356,
          "function_name": "optimization_algorithm_take_2",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 94,
          "function_name": "get_training_data",
          "code": "def get_training_data():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 356,
          "function_name": "optimization_algorithm_take_2",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 96,
          "function_name": "get_training_data",
          "code": "Example(x=np.array([1, 2]), target_y=-1),"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 356,
          "function_name": "optimization_algorithm_take_2",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 97,
          "function_name": "get_training_data",
          "code": "Example(x=np.array([2, 0]), target_y=1),"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 356,
          "function_name": "optimization_algorithm_take_2",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 98,
          "function_name": "get_training_data",
          "code": "Example(x=np.array([0, 0]), target_y=-1),"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 356,
          "function_name": "optimization_algorithm_take_2",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 95,
          "function_name": "get_training_data",
          "code": "return ["
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 356,
          "function_name": "optimization_algorithm_take_2",
          "code": "training_data = get_training_data()  # @inspect training_data"
        }
      ],
      "env": {
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 358,
          "function_name": "optimization_algorithm_take_2",
          "code": "text(\"Let us compute the gradient.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let us compute the gradient.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 359,
          "function_name": "optimization_algorithm_take_2",
          "code": "grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 359,
          "function_name": "optimization_algorithm_take_2",
          "code": "grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 377,
          "function_name": "gradient_train_hinge_loss",
          "code": "def gradient_train_hinge_loss(params: Parameters, training_data: list[Example]) -> Parameters:  # @inspect params training_data"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 359,
          "function_name": "optimization_algorithm_take_2",
          "code": "grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 378,
          "function_name": "gradient_train_hinge_loss",
          "code": "grads = [gradient_hinge_loss(example, params) for example in training_data]  # @inspect grads @stepover"
        }
      ],
      "env": {
        "grads": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Parameters",
              "contents": {
                "weight": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "bias": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Parameters",
              "contents": {
                "weight": {
                  "type": "numpy.ndarray",
                  "contents": [
                    -2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "bias": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Parameters",
              "contents": {
                "weight": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "bias": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 359,
          "function_name": "optimization_algorithm_take_2",
          "code": "grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 379,
          "function_name": "gradient_train_hinge_loss",
          "code": "mean_weight = np.mean([grad.weight for grad in grads])  # @inspect mean_weight"
        }
      ],
      "env": {
        "mean_weight": {
          "type": "numpy.float64",
          "contents": 0.16666666666666666,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 359,
          "function_name": "optimization_algorithm_take_2",
          "code": "grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 380,
          "function_name": "gradient_train_hinge_loss",
          "code": "mean_bias = np.mean([grad.bias for grad in grads])  # @inspect mean_bias"
        }
      ],
      "env": {
        "mean_bias": {
          "type": "numpy.float64",
          "contents": 0.3333333333333333,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 359,
          "function_name": "optimization_algorithm_take_2",
          "code": "grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 381,
          "function_name": "gradient_train_hinge_loss",
          "code": "return Parameters(weight=mean_weight, bias=mean_bias)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 359,
          "function_name": "optimization_algorithm_take_2",
          "code": "grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.16666666666666666,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.3333333333333333,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 361,
          "function_name": "optimization_algorithm_take_2",
          "code": "text(\"Now we can do gradient descent.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now we can do gradient descent.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 384,
          "function_name": "gradient_descent",
          "code": "def gradient_descent():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 385,
          "function_name": "gradient_descent",
          "code": "training_data = get_training_data()  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 386,
          "function_name": "gradient_descent",
          "code": "params = Parameters(weight=np.array([0, 0]), bias=0)  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 387,
          "function_name": "gradient_descent",
          "code": "learning_rate = 0.01"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 388,
          "function_name": "gradient_descent",
          "code": "losses = []"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 389,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 390,
          "function_name": "gradient_descent",
          "code": "train_loss = train_hinge_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 1.0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 391,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.16666666666666666,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.3333333333333333,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 393,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 394,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.0016666666666666666,
                -0.0016666666666666666
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.003333333333333333,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 396,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 389,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 390,
          "function_name": "gradient_descent",
          "code": "train_loss = train_hinge_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.9983333333333334,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 391,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.16666666666666666,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.3333333333333333,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.0016666666666666666,
                -0.0016666666666666666
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.003333333333333333,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 393,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 394,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.003333333333333333,
                -0.003333333333333333
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.006666666666666666,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 396,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 389,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 390,
          "function_name": "gradient_descent",
          "code": "train_loss = train_hinge_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.9966666666666667,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 391,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.16666666666666666,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.3333333333333333,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.003333333333333333,
                -0.003333333333333333
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.006666666666666666,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 393,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 394,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.004999999999999999,
                -0.004999999999999999
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.009999999999999998,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 396,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 389,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 390,
          "function_name": "gradient_descent",
          "code": "train_loss = train_hinge_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.9950000000000001,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 391,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.16666666666666666,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.3333333333333333,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.004999999999999999,
                -0.004999999999999999
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.009999999999999998,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 393,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 394,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.006666666666666666,
                -0.006666666666666666
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.013333333333333332,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 396,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 389,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 4,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 390,
          "function_name": "gradient_descent",
          "code": "train_loss = train_hinge_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.9933333333333333,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 391,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.16666666666666666,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.3333333333333333,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.006666666666666666,
                -0.006666666666666666
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.013333333333333332,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 393,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 394,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.008333333333333333,
                -0.008333333333333333
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.016666666666666666,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 396,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 389,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 5,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 390,
          "function_name": "gradient_descent",
          "code": "train_loss = train_hinge_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.9916666666666667,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 391,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.16666666666666666,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.3333333333333333,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.008333333333333333,
                -0.008333333333333333
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.016666666666666666,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 393,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 394,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.01,
                -0.01
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.02,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 396,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 389,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 6,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 390,
          "function_name": "gradient_descent",
          "code": "train_loss = train_hinge_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.9899999999999999,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 391,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.16666666666666666,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.3333333333333333,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.01,
                -0.01
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.02,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 393,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 394,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.011666666666666667,
                -0.011666666666666667
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.023333333333333334,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 396,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 389,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 7,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 390,
          "function_name": "gradient_descent",
          "code": "train_loss = train_hinge_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.9883333333333333,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 391,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.16666666666666666,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.3333333333333333,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.011666666666666667,
                -0.011666666666666667
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.023333333333333334,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 393,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 394,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.013333333333333334,
                -0.013333333333333334
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.02666666666666667,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 396,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 389,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 8,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 390,
          "function_name": "gradient_descent",
          "code": "train_loss = train_hinge_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.9866666666666667,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 391,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.16666666666666666,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.3333333333333333,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.013333333333333334,
                -0.013333333333333334
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.02666666666666667,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 393,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 394,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.015000000000000001,
                -0.015000000000000001
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.030000000000000002,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 396,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 389,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 9,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 390,
          "function_name": "gradient_descent",
          "code": "train_loss = train_hinge_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.985,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 391,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_hinge_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.float64",
              "contents": 0.16666666666666666,
              "dtype": null,
              "shape": null
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.3333333333333333,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.015000000000000001,
                -0.015000000000000001
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.030000000000000002,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 393,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 394,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.016666666666666666,
                -0.016666666666666666
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.03333333333333333,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 396,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 389,
          "function_name": "gradient_descent",
          "code": "for step in range(10):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 9,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 398,
          "function_name": "gradient_descent",
          "code": "plot(Chart(Data(values=[{\"step\": i, \"loss\": loss} for i, loss in enumerate(losses)])).mark_line().encode(x=\"step:Q\", y=\"loss:Q\").to_dict())"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "step": 0,
                  "loss": 1.0
                },
                {
                  "step": 1,
                  "loss": 0.9983333333333334
                },
                {
                  "step": 2,
                  "loss": 0.9966666666666667
                },
                {
                  "step": 3,
                  "loss": 0.9950000000000001
                },
                {
                  "step": 4,
                  "loss": 0.9933333333333333
                },
                {
                  "step": 5,
                  "loss": 0.9916666666666667
                },
                {
                  "step": 6,
                  "loss": 0.9899999999999999
                },
                {
                  "step": 7,
                  "loss": 0.9883333333333333
                },
                {
                  "step": 8,
                  "loss": 0.9866666666666667
                },
                {
                  "step": 9,
                  "loss": 0.985
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "step",
                "type": "quantitative"
              },
              "y": {
                "field": "loss",
                "type": "quantitative"
              }
            },
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "optimization_algorithm_take_2",
          "code": "gradient_descent()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "optimization_algorithm_take_2()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "multiclass_classification",
          "code": "def multiclass_classification():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "multiclass_classification",
          "code": "text(\"Binary classification (output y \u2208 {-1, 1})\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Binary classification (output y \u2208 {-1, 1})",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "multiclass_classification",
          "code": "text(\"Multiclass classification (output y \u2208 {0, 1, ..., K-1})\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Multiclass classification (output y \u2208 {0, 1, ..., K-1})",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 405,
          "function_name": "multiclass_classification",
          "code": "text(\"For binary classification, we compute a single score for an input\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "For binary classification, we compute a single score for an input",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "multiclass_classification",
          "code": "text(\"Negative score means -1, positive score means 1\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Negative score means -1, positive score means 1",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 407,
          "function_name": "multiclass_classification",
          "code": "x = np.array([1, -1])  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            -1
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 408,
          "function_name": "multiclass_classification",
          "code": "params = Parameters(weight=np.array([1, -1]), bias=1)  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 409,
          "function_name": "multiclass_classification",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 409,
          "function_name": "multiclass_classification",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 124,
          "function_name": "binary_classifier",
          "code": "def binary_classifier(params: Parameters, x: np.ndarray) -> float:  # @inspect params x"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            -1
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 409,
          "function_name": "multiclass_classification",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 126,
          "function_name": "binary_classifier",
          "code": "score = params.weight @ x + params.bias  # @inspect score"
        }
      ],
      "env": {
        "score": {
          "type": "numpy.int64",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 409,
          "function_name": "multiclass_classification",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 127,
          "function_name": "binary_classifier",
          "code": "predicted_y = 1 if score > 0 else -1  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 409,
          "function_name": "multiclass_classification",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 128,
          "function_name": "binary_classifier",
          "code": "return predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 409,
          "function_name": "multiclass_classification",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 411,
          "function_name": "multiclass_classification",
          "code": "text(\"For multiclass classification\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "For multiclass classification",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 412,
          "function_name": "multiclass_classification",
          "code": "text(\"- Define a weight vector for each class\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Define a weight vector for each class",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 413,
          "function_name": "multiclass_classification",
          "code": "text(\"- Compute a score for each class\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Compute a score for each class",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 414,
          "function_name": "multiclass_classification",
          "code": "text(\"- Predict a distribution over classes\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Predict a distribution over classes",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 415,
          "function_name": "multiclass_classification",
          "code": "params = Parameters(weight=np.array([[1, -1], [1, -1]]), bias=np.array([1, 1]))  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                [
                  1,
                  -1
                ],
                [
                  1,
                  -1
                ]
              ],
              "dtype": "int64",
              "shape": [
                2,
                2
              ]
            },
            "bias": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 416,
          "function_name": "multiclass_classification",
          "code": "x = np.array([1, -1])  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            -1
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 417,
          "function_name": "multiclass_classification",
          "code": "logits = params.weight @ x + params.bias"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 425,
          "function_name": "introduce_softmax",
          "code": "def introduce_softmax():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 426,
          "function_name": "introduce_softmax",
          "code": "text(\"Recall: the logistic function maps (-\u221e, +\u221e) to (0, 1)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall: the logistic function maps (-\u221e, +\u221e) to (0, 1)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 428,
          "function_name": "introduce_softmax",
          "code": "text(\"The softmax function generalizes this to multiple classes\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The softmax function generalizes this to multiple classes",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 430,
          "function_name": "introduce_softmax",
          "code": "logits = np.array([1, -1, 0])  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            -1,
            0
          ],
          "dtype": "int64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 431,
          "function_name": "introduce_softmax",
          "code": "probs = softmax(logits)  # @inspect softmax_logits"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 431,
          "function_name": "introduce_softmax",
          "code": "probs = softmax(logits)  # @inspect softmax_logits"
        },
        {
          "path": "linear_classification.py",
          "line_number": 441,
          "function_name": "softmax",
          "code": "def softmax(logits: np.ndarray) -> np.ndarray:  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            -1,
            0
          ],
          "dtype": "int64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 431,
          "function_name": "introduce_softmax",
          "code": "probs = softmax(logits)  # @inspect softmax_logits"
        },
        {
          "path": "linear_classification.py",
          "line_number": 442,
          "function_name": "softmax",
          "code": "exp_logits = np.exp(logits)  # @inspect exp_logits"
        }
      ],
      "env": {
        "exp_logits": {
          "type": "numpy.ndarray",
          "contents": [
            2.718281828459045,
            0.36787944117144233,
            1.0
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 431,
          "function_name": "introduce_softmax",
          "code": "probs = softmax(logits)  # @inspect softmax_logits"
        },
        {
          "path": "linear_classification.py",
          "line_number": 443,
          "function_name": "softmax",
          "code": "return exp_logits / np.sum(exp_logits)  # @inspect softmax"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 431,
          "function_name": "introduce_softmax",
          "code": "probs = softmax(logits)  # @inspect softmax_logits"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 433,
          "function_name": "introduce_softmax",
          "code": "text(\"Shifting up scores doesn't change the relative probabilities\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Shifting up scores doesn't change the relative probabilities",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 434,
          "function_name": "introduce_softmax",
          "code": "logits1 = np.array([1, -1, 0])  # @inspect logits1"
        }
      ],
      "env": {
        "logits1": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            -1,
            0
          ],
          "dtype": "int64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 435,
          "function_name": "introduce_softmax",
          "code": "probs1 = softmax(logits1)  # @inspect probs1"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 435,
          "function_name": "introduce_softmax",
          "code": "probs1 = softmax(logits1)  # @inspect probs1"
        },
        {
          "path": "linear_classification.py",
          "line_number": 441,
          "function_name": "softmax",
          "code": "def softmax(logits: np.ndarray) -> np.ndarray:  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            -1,
            0
          ],
          "dtype": "int64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 435,
          "function_name": "introduce_softmax",
          "code": "probs1 = softmax(logits1)  # @inspect probs1"
        },
        {
          "path": "linear_classification.py",
          "line_number": 442,
          "function_name": "softmax",
          "code": "exp_logits = np.exp(logits)  # @inspect exp_logits"
        }
      ],
      "env": {
        "exp_logits": {
          "type": "numpy.ndarray",
          "contents": [
            2.718281828459045,
            0.36787944117144233,
            1.0
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 435,
          "function_name": "introduce_softmax",
          "code": "probs1 = softmax(logits1)  # @inspect probs1"
        },
        {
          "path": "linear_classification.py",
          "line_number": 443,
          "function_name": "softmax",
          "code": "return exp_logits / np.sum(exp_logits)  # @inspect softmax"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 435,
          "function_name": "introduce_softmax",
          "code": "probs1 = softmax(logits1)  # @inspect probs1"
        }
      ],
      "env": {
        "probs1": {
          "type": "numpy.ndarray",
          "contents": [
            0.6652409557748219,
            0.09003057317038046,
            0.24472847105479767
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "introduce_softmax",
          "code": "logits2 = np.array(logits1 + 2)  # @inspect logits2"
        }
      ],
      "env": {
        "logits2": {
          "type": "numpy.ndarray",
          "contents": [
            3,
            1,
            2
          ],
          "dtype": "int64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 437,
          "function_name": "introduce_softmax",
          "code": "probs2 = softmax(logits2)  # @inspect probs2"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 437,
          "function_name": "introduce_softmax",
          "code": "probs2 = softmax(logits2)  # @inspect probs2"
        },
        {
          "path": "linear_classification.py",
          "line_number": 441,
          "function_name": "softmax",
          "code": "def softmax(logits: np.ndarray) -> np.ndarray:  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "numpy.ndarray",
          "contents": [
            3,
            1,
            2
          ],
          "dtype": "int64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 437,
          "function_name": "introduce_softmax",
          "code": "probs2 = softmax(logits2)  # @inspect probs2"
        },
        {
          "path": "linear_classification.py",
          "line_number": 442,
          "function_name": "softmax",
          "code": "exp_logits = np.exp(logits)  # @inspect exp_logits"
        }
      ],
      "env": {
        "exp_logits": {
          "type": "numpy.ndarray",
          "contents": [
            20.085536923187668,
            2.718281828459045,
            7.38905609893065
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 437,
          "function_name": "introduce_softmax",
          "code": "probs2 = softmax(logits2)  # @inspect probs2"
        },
        {
          "path": "linear_classification.py",
          "line_number": 443,
          "function_name": "softmax",
          "code": "return exp_logits / np.sum(exp_logits)  # @inspect softmax"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 437,
          "function_name": "introduce_softmax",
          "code": "probs2 = softmax(logits2)  # @inspect probs2"
        }
      ],
      "env": {
        "probs2": {
          "type": "numpy.ndarray",
          "contents": [
            0.6652409557748219,
            0.09003057317038046,
            0.24472847105479767
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 438,
          "function_name": "introduce_softmax",
          "code": "assert np.allclose(probs1, probs2)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 419,
          "function_name": "multiclass_classification",
          "code": "probs = softmax(logits)  # @inspect probs"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 419,
          "function_name": "multiclass_classification",
          "code": "probs = softmax(logits)  # @inspect probs"
        },
        {
          "path": "linear_classification.py",
          "line_number": 441,
          "function_name": "softmax",
          "code": "def softmax(logits: np.ndarray) -> np.ndarray:  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "numpy.ndarray",
          "contents": [
            3,
            3
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 419,
          "function_name": "multiclass_classification",
          "code": "probs = softmax(logits)  # @inspect probs"
        },
        {
          "path": "linear_classification.py",
          "line_number": 442,
          "function_name": "softmax",
          "code": "exp_logits = np.exp(logits)  # @inspect exp_logits"
        }
      ],
      "env": {
        "exp_logits": {
          "type": "numpy.ndarray",
          "contents": [
            20.085536923187668,
            20.085536923187668
          ],
          "dtype": "float64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 419,
          "function_name": "multiclass_classification",
          "code": "probs = softmax(logits)  # @inspect probs"
        },
        {
          "path": "linear_classification.py",
          "line_number": 443,
          "function_name": "softmax",
          "code": "return exp_logits / np.sum(exp_logits)  # @inspect softmax"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 419,
          "function_name": "multiclass_classification",
          "code": "probs = softmax(logits)  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "type": "numpy.ndarray",
          "contents": [
            0.5,
            0.5
          ],
          "dtype": "float64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 421,
          "function_name": "multiclass_classification",
          "code": "text(\"Now let us define the cross entropy loss.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now let us define the cross entropy loss.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 422,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 422,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 452,
          "function_name": "introduce_cross_entropy",
          "code": "def introduce_cross_entropy():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 422,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 453,
          "function_name": "introduce_cross_entropy",
          "code": "text(\"Cross entropy: measures the difference between a target distribution and a predicted distribution\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Cross entropy: measures the difference between a target distribution and a predicted distribution",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 422,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 454,
          "function_name": "introduce_cross_entropy",
          "code": "target = np.array([0.5, 0.2, 0.3])  # @inspect target"
        }
      ],
      "env": {
        "target": {
          "type": "numpy.ndarray",
          "contents": [
            0.5,
            0.2,
            0.3
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 422,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 455,
          "function_name": "introduce_cross_entropy",
          "code": "predicted = np.array([0.1, 0.5, 0.4])  # @inspect predicted"
        }
      ],
      "env": {
        "predicted": {
          "type": "numpy.ndarray",
          "contents": [
            0.1,
            0.5,
            0.4
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 422,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 457,
          "function_name": "introduce_cross_entropy",
          "code": "terms = target * -np.log(predicted)  # @inspect terms"
        }
      ],
      "env": {
        "terms": {
          "type": "numpy.ndarray",
          "contents": [
            1.1512925464970227,
            0.13862943611198905,
            0.2748872195622465
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 422,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 458,
          "function_name": "introduce_cross_entropy",
          "code": "cross_entropy = np.sum(terms)  # @inspect cross_entropy"
        }
      ],
      "env": {
        "cross_entropy": {
          "type": "numpy.float64",
          "contents": 1.5648092021712583,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 422,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 460,
          "function_name": "introduce_cross_entropy",
          "code": "text(\"Special case: target is a single label (represented as a one-hot vector)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Special case: target is a single label (represented as a one-hot vector)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 422,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 461,
          "function_name": "introduce_cross_entropy",
          "code": "target = np.array([0, 1, 0])  # @inspect target"
        }
      ],
      "env": {
        "target": {
          "type": "numpy.ndarray",
          "contents": [
            0,
            1,
            0
          ],
          "dtype": "int64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 422,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 462,
          "function_name": "introduce_cross_entropy",
          "code": "predicted = np.array([0.1, 0.5, 0.4])  # @inspect predicted"
        }
      ],
      "env": {
        "predicted": {
          "type": "numpy.ndarray",
          "contents": [
            0.1,
            0.5,
            0.4
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 422,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 463,
          "function_name": "introduce_cross_entropy",
          "code": "terms = target * -np.log(predicted)  # @inspect terms"
        }
      ],
      "env": {
        "terms": {
          "type": "numpy.ndarray",
          "contents": [
            0.0,
            0.6931471805599453,
            0.0
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 422,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 464,
          "function_name": "introduce_cross_entropy",
          "code": "cross_entropy = np.sum(terms)  # @inspect cross_entropy"
        }
      ],
      "env": {
        "cross_entropy": {
          "type": "numpy.float64",
          "contents": 0.6931471805599453,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 422,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 465,
          "function_name": "introduce_cross_entropy",
          "code": "text(\"This is the same as the negative log probability of the target class.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This is the same as the negative log probability of the target class.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 422,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 31,
          "function_name": "main",
          "code": "multiclass_classification()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 468,
          "function_name": "handling_text",
          "code": "def handling_text():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 472,
          "function_name": "tokenization",
          "code": "def tokenization():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 473,
          "function_name": "tokenization",
          "code": "string = \"the cat in the hat\""
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 475,
          "function_name": "tokenization",
          "code": "text(\"How do we represent a string as a tensor?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "How do we represent a string as a tensor?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 476,
          "function_name": "tokenization",
          "code": "text(\"1. Tokenization: convert a string into a sequence of integers.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "1. Tokenization: convert a string into a sequence of integers.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 477,
          "function_name": "tokenization",
          "code": "text(\"2. Represent each integer as a one-hot vector.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "2. Represent each integer as a one-hot vector.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 479,
          "function_name": "tokenization",
          "code": "text(\"### Tokenization\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### Tokenization",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 480,
          "function_name": "tokenization",
          "code": "text(\"Split a string by space into words and convert them into integers.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Split a string by space into words and convert them into integers.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 481,
          "function_name": "tokenization",
          "code": "vocab = Vocabulary()  # @inspect vocab"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 481,
          "function_name": "tokenization",
          "code": "vocab = Vocabulary()  # @inspect vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 527,
          "function_name": "__init__",
          "code": "def __init__(self):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 481,
          "function_name": "tokenization",
          "code": "vocab = Vocabulary()  # @inspect vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 528,
          "function_name": "__init__",
          "code": "self.index_to_string: list[str] = []"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 481,
          "function_name": "tokenization",
          "code": "vocab = Vocabulary()  # @inspect vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 529,
          "function_name": "__init__",
          "code": "self.string_to_index: dict[str, int] = {}"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 481,
          "function_name": "tokenization",
          "code": "vocab = Vocabulary()  # @inspect vocab"
        }
      ],
      "env": {
        "vocab": {
          "type": "linear_classification.Vocabulary",
          "contents": {
            "index_to_string": {
              "type": "list",
              "contents": [],
              "dtype": null,
              "shape": null
            },
            "string_to_index": {
              "type": "dict",
              "contents": {},
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 482,
          "function_name": "tokenization",
          "code": "words = string.split()  # @inspect words"
        }
      ],
      "env": {
        "words": {
          "type": "list",
          "contents": [
            {
              "type": "str",
              "contents": "the",
              "dtype": null,
              "shape": null
            },
            {
              "type": "str",
              "contents": "cat",
              "dtype": null,
              "shape": null
            },
            {
              "type": "str",
              "contents": "in",
              "dtype": null,
              "shape": null
            },
            {
              "type": "str",
              "contents": "the",
              "dtype": null,
              "shape": null
            },
            {
              "type": "str",
              "contents": "hat",
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 531,
          "function_name": "get_index",
          "code": "def get_index(self, string: str) -> int:  # @inspect string"
        }
      ],
      "env": {
        "string": {
          "type": "str",
          "contents": "the",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 532,
          "function_name": "get_index",
          "code": "index = self.string_to_index.get(string)  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "NoneType",
          "contents": "None",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 533,
          "function_name": "get_index",
          "code": "if index is None:  # New string"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 534,
          "function_name": "get_index",
          "code": "index = len(self.index_to_string)  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 535,
          "function_name": "get_index",
          "code": "self.index_to_string.append(string)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 536,
          "function_name": "get_index",
          "code": "self.string_to_index[string] = index"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 537,
          "function_name": "get_index",
          "code": "return index"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 531,
          "function_name": "get_index",
          "code": "def get_index(self, string: str) -> int:  # @inspect string"
        }
      ],
      "env": {
        "string": {
          "type": "str",
          "contents": "cat",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 532,
          "function_name": "get_index",
          "code": "index = self.string_to_index.get(string)  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "NoneType",
          "contents": "None",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 533,
          "function_name": "get_index",
          "code": "if index is None:  # New string"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 534,
          "function_name": "get_index",
          "code": "index = len(self.index_to_string)  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 535,
          "function_name": "get_index",
          "code": "self.index_to_string.append(string)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 536,
          "function_name": "get_index",
          "code": "self.string_to_index[string] = index"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 537,
          "function_name": "get_index",
          "code": "return index"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 531,
          "function_name": "get_index",
          "code": "def get_index(self, string: str) -> int:  # @inspect string"
        }
      ],
      "env": {
        "string": {
          "type": "str",
          "contents": "in",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 532,
          "function_name": "get_index",
          "code": "index = self.string_to_index.get(string)  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "NoneType",
          "contents": "None",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 533,
          "function_name": "get_index",
          "code": "if index is None:  # New string"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 534,
          "function_name": "get_index",
          "code": "index = len(self.index_to_string)  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "int",
          "contents": 2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 535,
          "function_name": "get_index",
          "code": "self.index_to_string.append(string)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 536,
          "function_name": "get_index",
          "code": "self.string_to_index[string] = index"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 537,
          "function_name": "get_index",
          "code": "return index"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 531,
          "function_name": "get_index",
          "code": "def get_index(self, string: str) -> int:  # @inspect string"
        }
      ],
      "env": {
        "string": {
          "type": "str",
          "contents": "the",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 532,
          "function_name": "get_index",
          "code": "index = self.string_to_index.get(string)  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 533,
          "function_name": "get_index",
          "code": "if index is None:  # New string"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 537,
          "function_name": "get_index",
          "code": "return index"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 531,
          "function_name": "get_index",
          "code": "def get_index(self, string: str) -> int:  # @inspect string"
        }
      ],
      "env": {
        "string": {
          "type": "str",
          "contents": "hat",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 532,
          "function_name": "get_index",
          "code": "index = self.string_to_index.get(string)  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "NoneType",
          "contents": "None",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 533,
          "function_name": "get_index",
          "code": "if index is None:  # New string"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 534,
          "function_name": "get_index",
          "code": "index = len(self.index_to_string)  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 535,
          "function_name": "get_index",
          "code": "self.index_to_string.append(string)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 536,
          "function_name": "get_index",
          "code": "self.string_to_index[string] = index"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 537,
          "function_name": "get_index",
          "code": "return index"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        }
      ],
      "env": {
        "indices": {
          "type": "list",
          "contents": [
            {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 2,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 3,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        },
        "vocab": {
          "type": "linear_classification.Vocabulary",
          "contents": {
            "index_to_string": {
              "type": "list",
              "contents": [
                {
                  "type": "str",
                  "contents": "the",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "str",
                  "contents": "cat",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "str",
                  "contents": "in",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "str",
                  "contents": "hat",
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "string_to_index": {
              "type": "dict",
              "contents": {
                "the": {
                  "type": "int",
                  "contents": 0,
                  "dtype": null,
                  "shape": null
                },
                "cat": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "in": {
                  "type": "int",
                  "contents": 2,
                  "dtype": null,
                  "shape": null
                },
                "hat": {
                  "type": "int",
                  "contents": 3,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 485,
          "function_name": "tokenization",
          "code": "text(\"Language models use more sophisticated tokenizers (Byte-Pair Encoding) \"), link(\"https://arxiv.org/pdf/1508.07909\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Language models use more sophisticated tokenizers (Byte-Pair Encoding) ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "Neural Machine Translation of Rare Words with Subword Units",
            "authors": [
              "Rico Sennrich",
              "Barry Haddow",
              "Alexandra Birch"
            ],
            "organization": null,
            "date": "2015-08-31T16:37:31Z",
            "url": "https://arxiv.org/pdf/1508.07909",
            "description": "Neural machine translation (NMT) models typically operate with a fixed vocabulary, but translation is an open-vocabulary problem. Previous work addresses the translation of out-of-vocabulary words by backing off to a dictionary. In this paper, we introduce a simpler and more effective approach, making the NMT model capable of open-vocabulary translation by encoding rare and unknown words as sequences of subword units. This is based on the intuition that various word classes are translatable via smaller units than words, for instance names (via character copying or transliteration), compounds (via compositional translation), and cognates and loanwords (via phonological and morphological transformations). We discuss the suitability of different word segmentation techniques, including simple character n-gram models and a segmentation based on the byte pair encoding compression algorithm, and empirically show that subword models improve over a back-off dictionary baseline for the WMT 15 translation tasks English-German and English-Russian by 1.1 and 1.3 BLEU, respectively.",
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 486,
          "function_name": "tokenization",
          "code": "text(\"To get a feel for how tokenizers work, play with this \"), link(title=\"interactive site\", url=\"https://tiktokenizer.vercel.app/?encoder=gpt2\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "To get a feel for how tokenizers work, play with this ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "interactive site",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://tiktokenizer.vercel.app/?encoder=gpt2",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 487,
          "function_name": "tokenization",
          "code": "tokenzier = tiktoken.get_encoding(\"gpt2\")"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 488,
          "function_name": "tokenization",
          "code": "gpt2_indices = tokenzier.encode(string)  # @inspect gpt2_indices"
        }
      ],
      "env": {
        "gpt2_indices": {
          "type": "list",
          "contents": [
            {
              "type": "int",
              "contents": 1169,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 3797,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 287,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 262,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 6877,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 490,
          "function_name": "tokenization",
          "code": "text(\"### Interpretation\")  # clear @gpt2_indices"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### Interpretation",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 491,
          "function_name": "tokenization",
          "code": "text(\"Treat each index as a one-hot vector.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Treat each index as a one-hot vector.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 492,
          "function_name": "tokenization",
          "code": "index = indices[4]  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 493,
          "function_name": "tokenization",
          "code": "vector = np.eye(len(vocab))[index]  # @inspect vector @stepover"
        }
      ],
      "env": {
        "vector": {
          "type": "numpy.ndarray",
          "contents": [
            0.0,
            0.0,
            0.0,
            1.0
          ],
          "dtype": "float64",
          "shape": [
            4
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 495,
          "function_name": "tokenization",
          "code": "text(\"So the string is represented as a sequence of vectors, or a matrix:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So the string is represented as a sequence of vectors, or a matrix:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 496,
          "function_name": "tokenization",
          "code": "matrix = np.eye(len(vocab))[indices]  # @inspect matrix @stepover @clear index vector"
        }
      ],
      "env": {
        "matrix": {
          "type": "numpy.ndarray",
          "contents": [
            [
              1.0,
              0.0,
              0.0,
              0.0
            ],
            [
              0.0,
              1.0,
              0.0,
              0.0
            ],
            [
              0.0,
              0.0,
              1.0,
              0.0
            ],
            [
              1.0,
              0.0,
              0.0,
              0.0
            ],
            [
              0.0,
              0.0,
              0.0,
              1.0
            ]
          ],
          "dtype": "float64",
          "shape": [
            5,
            4
          ]
        },
        "index": null,
        "vector": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 498,
          "function_name": "tokenization",
          "code": "text(\"### Operations\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### Operations",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 500,
          "function_name": "tokenization",
          "code": "text(\"In practice, we store the indices and not the one-hot vectors to save memory.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In practice, we store the indices and not the one-hot vectors to save memory.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 501,
          "function_name": "tokenization",
          "code": "text(\"We can operate directly using the indices.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We can operate directly using the indices.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 502,
          "function_name": "tokenization",
          "code": "text(\"Suppose we want to take the dot product of each position with `w`.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Suppose we want to take the dot product of each position with `w`.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 503,
          "function_name": "tokenization",
          "code": "w = np.random.randn(len(vocab))  # @inspect w @stepover"
        }
      ],
      "env": {
        "w": {
          "type": "numpy.ndarray",
          "contents": [
            0.6032222092880914,
            0.33484853726988695,
            0.6948500716103798,
            -1.1456042708421725
          ],
          "dtype": "float64",
          "shape": [
            4
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 506,
          "function_name": "tokenization",
          "code": "y_dot = matrix @ w  # @inspect y_dot"
        }
      ],
      "env": {
        "y_dot": {
          "type": "numpy.ndarray",
          "contents": [
            0.6032222092880914,
            0.33484853726988695,
            0.6948500716103798,
            0.6032222092880914,
            -1.1456042708421725
          ],
          "dtype": "float64",
          "shape": [
            5
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 509,
          "function_name": "tokenization",
          "code": "y_index = w[indices]  # @inspect y_index"
        }
      ],
      "env": {
        "y_index": {
          "type": "numpy.ndarray",
          "contents": [
            0.6032222092880914,
            0.33484853726988695,
            0.6948500716103798,
            0.6032222092880914,
            -1.1456042708421725
          ],
          "dtype": "float64",
          "shape": [
            5
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 511,
          "function_name": "tokenization",
          "code": "text(\"Bag of words representation\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Bag of words representation",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "tokenization",
          "code": "text(\"Each word is represented as a (one-hot) vector.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Each word is represented as a (one-hot) vector.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 513,
          "function_name": "tokenization",
          "code": "text(\"The representation is the average of the one-hot vectors.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The representation is the average of the one-hot vectors.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 514,
          "function_name": "tokenization",
          "code": "bow = reduce(matrix, \"pos vocab -> vocab\", \"mean\")  # @inspect b"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 516,
          "function_name": "tokenization",
          "code": "y_bow = bow @ w  # @inspect y_bow"
        }
      ],
      "env": {
        "y_bow": {
          "type": "numpy.float64",
          "contents": 0.21810775132285543,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 518,
          "function_name": "tokenization",
          "code": "text(\"Summary\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 519,
          "function_name": "tokenization",
          "code": "text(\"- Problem: convert strings to tensors for machine learning\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Problem: convert strings to tensors for machine learning",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 520,
          "function_name": "tokenization",
          "code": "text(\"- Solution: tokenization + one-hot encoding\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Solution: tokenization + one-hot encoding",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 521,
          "function_name": "tokenization",
          "code": "text(\"- Tokenization: split strings into words and build up a vocabulary (string \u2194 index)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Tokenization: split strings into words and build up a vocabulary (string \u2194 index)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 522,
          "function_name": "tokenization",
          "code": "text(\"- Mathematically one-hot vectors; in code, directly work with indices\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Mathematically one-hot vectors; in code, directly work with indices",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "handling_text",
          "code": "tokenization()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "handling_text()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 34,
          "function_name": "main",
          "code": "text(\"Summary\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 35,
          "function_name": "main",
          "code": "text(\"- Linear classification: linear functions \u2192 one of K choices\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Linear classification: linear functions \u2192 one of K choices",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    }
  ]
}
{
  "files": {
    "linear_classification.py": "import numpy as np\nfrom typing import Callable\nfrom dataclasses import dataclass\nfrom edtrace import text, link, plot, image\nfrom altair import Chart, Data\nfrom einops import reduce\nimport functools\nimport tiktoken\n\ndef main():\n    text(\"Last unit: linear regression\")\n    text(\"- Prediction task (regression): input \u2192 output: real number\")\n    text(\"- Hypothesis class: linear functions\")\n\n    text(\"This unit: linear classification\")\n    text(\"- Prediction task: input \u2192 output (class, label): one of K discrete choices\")\n    text(\"- Hypothesis class: (thresholded) linear functions\")\n\n    link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=machine-learning%2Flinear-classification.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")\n\n    text(\"Let's walk through the same steps as for linear regression and see what changes...\")\n\n    prediction_task()\n    machine_learning_problem()\n\n    hypothesis_class()\n    zero_one_loss_function()\n    zero_one_loss_optimization()\n    logistic_loss_function()\n    logistic_loss_optimization()\n\n    multiclass_classification()\n    representing_text()\n\n    text(\"Summary\")\n    text(\"- Linear classification: linear functions \u2192 one of K choices\")\n    text(\"- Zero-one loss: leads to zero-gradients almost everywhere\")\n    text(\"- Logistic loss: classifier outputs probabilities, leads to non-zero gradients\")\n    text(\"- Multiclass classification: one logit per class, convert to probabilities with softmax\")\n    text(\"- Representing text as tensors: tokenize + convert tokens to indices (one-hot vectors)\")\n\n    \ndef prediction_task():\n    text(\"Example task: image classification\")\n    text(\"- **Input**: an image; e.g.\")\n    image(\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/Felis_catus-cat_on_snow.jpg/1920px-Felis_catus-cat_on_snow.jpg\", width=200)\n    text(\"- **Output**: what kind of object it is (e.g., cat)\")\n\n    text(\"Example task: sentiment classification\")\n    text(\"- **Input**: a document\")\n    text(\"- **Output**: the sentiment of the document (e.g., positive)\")\n\n    text(\"What's the type of the **input**?\")\n    text(\"- Image: width x height x 3 (RGB) tensor\")\n    text(\"- Text: a string (hmm, not a tensor...we'll come back to this later)\")\n\n    text(\"What's the type of the **output**?\")\n    text(\"- Binary classification (two choices): usually {-1, 1}\")\n    text(\"- Multiclass classification (K choices): usually {0, 1, ..., K-1}\")\n\n    text(\"A **predictor** is a function that takes an input and produces a predicted output.\")\n    text(\"Here's an example predictor for binary classification:\")\n    def simple_binary_classifier(x: np.ndarray) -> int:  # @inspect x\n        logit = x[0] - x[1] - 1  # @inspect logit\n        if logit > 0:\n            predicted_y = 1  # @inspect predicted_y\n        else:\n            predicted_y = -1  # @inspect predicted_y\n        return predicted_y\n\n    text(\"Given an input, call the predictor on it:\")\n    x_a = np.array([1, 2])  # @inspect x_a\n    predicted_y_a = simple_binary_classifier(x_a)  # @inspect predicted_y_a\n    x_b = np.array([2, 0])  #  @inspect x_b\n    predicted_y_b = simple_binary_classifier(x_b)  # @inspect predicted_y_b\n\n    text(\"The points where logit = x[0] - x[1] - 1 = 0 is the **decision boundary**.\")\n    plot(make_plot(\"decision boundary\", \"x0\", \"x1\", lambda x0: x0 - 1, points=[example_to_point(Example(x=x_a, target_y=predicted_y_a)), example_to_point(Example(x=x_b, target_y=predicted_y_b))]))  # @stepover\n\n    text(\"But how do we get the predictor?\")\n\n\ndef machine_learning_problem():\n    text(\"The **training data** is a set of examples that demonstrate the task.\")\n    text(\"Each **example** consists of an (input x, target output y) pair.\")\n    training_data = get_training_data()  # @inspect training_data\n\n    data = [example_to_point(example) for example in training_data]  # @stepover\n    plot(make_plot(\"training data\", \"x0\", \"x1\", f=None, points=data))  # @stepover\n\n    text(\"A **learning algorithm** takes the training data and produces a predictor.\")\n\n    text(\"Key questions:\")\n    text(\"1. Which predictors are possible? **hypothesis class**\")\n    text(\"2. How good is a predictor? **loss function**\")\n    text(\"3. How do we compute the best predictor? **optimization algorithm**\")\n\n\ndef get_training_data():\n    return [\n        Example(x=np.array([1, 2]), target_y=-1),\n        Example(x=np.array([2, 0]), target_y=1),\n        Example(x=np.array([0, 0]), target_y=-1),\n    ]\n\n\n@dataclass(frozen=True)\nclass Example:\n    x: np.ndarray\n    target_y: float\n\n\ndef hypothesis_class():\n    text(\"Which predictors (classifiers) are possible?\")\n\n    text(\"As before, we will parameterize our predictors.\")\n    text(\"For linear classifiers, each set of parameters has a **weight vector** and a **bias**.\")\n    params = Parameters(weight=np.array([1, -1]), bias=-1)\n    x = np.array([1, 1])  #  @inspect x\n    predicted_y = binary_classifier(params, x)  # @inspect predicted_y\n    plot(make_plot(\"binary classifier\", \"x0\", \"x1\", lambda x0: x0 - 1, points=[example_to_point(Example(x=x, target_y=predicted_y))]))  # @stepover\n\n    text(\"Here's another predictor:\")  # @clear params x predicted_y\n    params = Parameters(weight=np.array([1, -1]), bias=1)\n    x = np.array([1, 1])  #  @inspect x\n    predicted_y = binary_classifier(params, x)  # @inspect predicted_y\n    plot(make_plot(\"binary classifier\", \"x0\", \"x1\", lambda x0: x0 + 1, points=[example_to_point(Example(x=x, target_y=predicted_y))]))  # @stepover\n\n    text(\"The **hypothesis class** is the set of all predictors you can get by choosing parameters (weight, bias).\")\n    text(\"The decision boundaries are any \\\"straight-line cuts\\\" of the input space.\")\n\n\n@dataclass(frozen=True)\nclass Parameters:\n    weight: np.ndarray\n    bias: float\n\n\ndef binary_classifier(params: Parameters, x: np.ndarray) -> float:  # @inspect params x\n    \"\"\"Applies the linear predictor given by `params` to input `x`.\"\"\"\n    logit = params.weight @ x + params.bias  # @inspect logit\n    if logit > 0:\n        predicted_y = 1  # @inspect predicted_y\n    else:\n        predicted_y = -1  # @inspect predicted_y\n    return predicted_y\n\n\ndef zero_one_loss_function():\n    text(\"The next design decision is how to judge each of the infinitely many possible predictors.\")\n\n    text(\"Let's consider a predictor:\")\n    params = Parameters(weight=np.array([1, -1]), bias=-1)  # @inspect params\n\n    text(\"Recall the training data:\")\n    training_data = get_training_data()  # @inspect training_data @stepover\n    \n    text(\"How well does `params` fit `training_data`?\")\n    text(\"We define a loss function that measures how unhappy one point is based on params.\")\n\n    text(\"Recall that for regression, we used the squared loss.\")\n    text(\"Intuition: how far away the prediction is from the target.\")\n    loss = squared_loss(training_data[0], params)  # @inspect loss\n    plot(make_plot(\"squared loss\", \"residual\", \"loss\", lambda residual: residual ** 2))  # @stepover\n    text(\"This loss is okay (is 0 when predicted = target), but we're classifying, not precise values...\")\n\n    text(\"For binary classification, we use the zero-one loss.\")  # @clear loss\n    text(\"Intuition: whether the prediction has the same sign as the target.\")\n    loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss\n    loss = zero_one_loss(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss\n    text(\"We can rewrite the zero-one loss in terms of the margin.\")\n    loss = zero_one_loss_inline(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss\n    plot(make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0)))  # @stepover\n\n    text(\"The training loss is the average of the per-example losses of the training examples.\")  # @clear loss\n    params = Parameters(weight=np.array([0, 0]), bias=-1)  # @inspect params\n    train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss\n\n    text(\"Summary:\")\n    text(\"- Logit: the raw score from the linear model (sign is prediction, magnitude is confidence)\")\n    text(\"- Margin (logit * target): sign is whether the prediction is correct or not\")\n    text(\"- Zero-one loss: 1 if wrong, 0 if right\")\n    text(\"- Train loss: average over training examples (error rate)\")\n\n\ndef squared_loss(example: Example, params: Parameters) -> float:  # @inspect example params\n    predicted_y = example.x @ params.weight + params.bias  # @inspect predicted_y\n    residual = predicted_y - example.target_y  # @inspect residual\n    loss = residual ** 2  # @inspect loss\n    return loss\n\n\ndef zero_one_loss(example: Example, params: Parameters) -> float:  # @inspect example params\n    predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y\n    loss = int(predicted_y != example.target_y)  # Whether the prediction was wrong @inspect loss\n    return loss\n\n\ndef zero_one_loss_inline(example: Example, params: Parameters) -> float:  # @inspect example params\n    # logit: sign is prediction, magnitude is how confident we are \n    logit = example.x @ params.weight + params.bias  # @inspect logit\n    # margin: sign measures correct (+) or not (-)\n    margin = logit * example.target_y  # @inspect margin\n    loss = int(margin <= 0)  # Whether the prediction was wrong @inspect loss\n    return loss\n\n\ndef train_zero_one_loss(params: Parameters, training_data: list[Example]) -> float:  # @inspect params training_data\n    losses = [zero_one_loss_inline(example, params) for example in training_data]  # @inspect losses @stepover\n    train_loss = np.mean(losses)  # @inspect train_loss\n    return train_loss\n\n\ndef zero_one_loss_optimization():\n    text(\"Recall that for every set of parameters `params`, we can compute the training loss `train_loss`.\")\n\n    text(\"Recall in linear regression we optimized the parameters using gradient descent.\")\n    text(\"So let's do the same thing here.\")\n\n    params = Parameters(weight=np.array([1, 1]), bias=0)  # @inspect params\n    training_data = get_training_data()  # @inspect training_data @stepover\n    train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss\n\n    text(\"We want to find the parameters that yield the lowest training loss.\")\n    text(\"This is an optimization problem.\")\n\n    text(\"Let's take the gradient of the training loss.\")\n    grad = gradient_zero_one_loss(training_data[0], params)  # @inspect grad\n    text(\"We have a problem: the gradient is zero everywhere!\")\n    plot(make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0)))  # @stepover\n    text(\"So gradient descent won't update the parameters at all!\")\n    text(\"Intuition: if example is wrong, moving parameters a tiny bit won't make it right, so give up.\")\n    text(\"So what do we do?\")\n\n\ndef gradient_zero_one_loss(example: Example, params: Parameters) -> Parameters:  # @inspect example params\n    logit = example.x @ params.weight + params.bias  # @inspect logit\n    margin = logit * example.target_y  # @inspect margin\n    # Zero everywhere except when margin = 0, where it's undefined\n    return Parameters(weight=np.zeros_like(params.weight), bias=0)\n\n\ndef logistic_function():\n    text(\"A logit is a number between -\u221e and +\u221e.\")\n    text(\"We want to convert a logit into a probability (must be between 0 and 1).\")\n    text(\"There are many functions that do this, but the **logistic function** is a standard choice.\")\n\n    plot(make_plot(\"logistic function\", \"logit\", \"prob\", logistic, xrange=(-10, 10)))  # @stepover\n\n    logit = 0  # @inspect logit\n    prob = logistic(logit)  # @inspect prob\n    logit = 1  # @inspect logit\n    prob = logistic(logit)  # @inspect prob @stepover\n    logit = 8  # @inspect logit\n    prob = logistic(logit)  # @inspect prob @stepover\n    logit = -1  # @inspect logit\n    prob = logistic(logit)  # @inspect prob @stepover\n    logit = -8  # @inspect logit\n    prob = logistic(logit)  # @inspect prob @stepover\n\n    text(\"Another interpretation: log odds\") # @clear logit prob\n    prob = 0.2  # @inspect prob\n    odds = prob / (1 - prob)  # @inspect odds\n    logit = np.log(odds)  # @inspect logit\n    prob2 = logistic(logit)  # @inspect prob2 @stepover\n    assert prob == prob2  # @clear prob odds logit prob2\n\n    text(\"Properties\")\n    text(\"- As logit \u2192 -\u221e, prob \u2192 0\")\n    text(\"- As logit \u2192 +\u221e, prob \u2192 1\")\n    text(\"- As logit \u2192 0, prob \u2192 0.5\")\n\n    prob1 = logistic(logit=3)  # @inspect prob1 @stepover\n    prob2 = logistic(logit=-3)  # @inspect prob2 @stepover\n    assert np.allclose(prob1 + prob2, 1)\n\n    text(\"The derivative of the logistic function is quite simple and elegant\")\n    grad_prob = gradient_logistic(logit=3)  # @inspect grad_prob\n    text(\"As |logit| \u2192 -\u221e, grad_prob \u2192 0\")\n    plot(make_plot(\"derivative of logistic function\", \"logit\", \"grad_prob\", gradient_logistic, xrange=(-10, 10))) # @stepover\n\n\ndef logistic(logit: float) -> float:  # @inspect logit\n    prob = 1 / (1 + np.exp(-logit))  # @inspect prob\n    return prob\n\n\ndef gradient_logistic(logit: float) -> float:\n    prob = logistic(logit)  # @inspect prob @stepover\n    grad = prob * (1 - prob)  # @inspect grad\n    return grad\n\n\ndef logistic_loss_function():\n    text(\"To solve the zero gradient problem, we have to rethink the loss function\")\n    text(\"...and actually, even what our classifer outputs.\")\n\n    text(\"Let's take a set of parameters and an example.\")\n    params = Parameters(weight=np.array([1, -1]), bias=1)  # @inspect params\n    example = Example(x=np.array([2, 0]), target_y=1)  # @inspect example\n\n    text(\"So far, our predictor turns a logit into a single prediction\")    \n    predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y @stepover\n    text(\"Thresholding is a very discrete operation...\")\n    \n    text(\"Instead, let us make things continuous by having a classifier output a probability distribution (continuous) over labels.\")  # @clear predicted_y\n    text(\"The key to doing this will be the **logistic** function.\")\n    logistic_function()\n    text(\"The logistic function was used in statistics in **logistic regression** [Berkson, 1944].\")\n\n    text(\"Now we can compute the probability of y\")\n    logit = example.x @ params.weight + params.bias  # @inspect logit\n    prob_pos = logistic(logit)  # p(y=1|x) @inspect prob_pos @stepover\n    prob_neg = logistic(-logit)  # p(y=-1|x) @inspect prob_neg @stepover\n    margin = logit * example.target_y  # @inspect margin\n    prob_target = logistic(margin)  # p(y=target_y|x) @inspect prob_target @stepover\n\n    text(\"**Maximum likelihood** principle: maximize the log probability of the training targets\")\n\n    text(\"If we have multiple examples, we'd multiply the probabilities: p(y1|x1) * p(y2|x2)\")\n    text(\"Equivalent to summing the log probabilities: log p(y1|x1) + log p(y2|x2)\")\n    log_prob_target = np.log(prob_target)  # @inspect log_prob_target\n\n    text(\"To turn this into a loss, just negate it (maximize likelihood = minimize loss)\")\n    loss = -log_prob_target  # @inspect loss\n\n    text(\"Let's package it up into a function:\")  # @clear logit prob_pos prob_neg prob_target log_prob_target loss\n    loss = logistic_loss(example, params)  # @inspect loss\n\n    text(\"Recall the zero-one loss, which has a sharp cliff at 0.\")\n    data = make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0))  # @stepover\n    plot(data)\n\n    text(\"The logistic loss is smooth, but goes to 0 when the margin grows.\")\n    data = make_plot(\"logistic loss\", \"margin\", \"loss\", lambda margin: -np.log(logistic(margin)))  # @stepover\n    plot(data)\n\n    text(\"As before, the training loss is the average of the per-example losses.\")\n    training_data = get_training_data()  # @inspect training_data @clear example params loss @stepover\n    train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss\n\n\ndef logistic_loss(example: Example, params: Parameters) -> float:  # @inspect example params\n    # logit: sign is prediction, magnitude is how confident we are \n    logit = example.x @ params.weight + params.bias  # @inspect logit\n    # margin: sign measures correct (+) or not (-)\n    margin = logit * example.target_y  # @inspect margin\n    prob_target = logistic(margin)  # @inspect prob_target @stepover\n    loss = -np.log(prob_target)  # @inspect loss\n    return loss\n\n\ndef train_logistic_loss(params: Parameters, training_data: list[Example]) -> float:  # @inspect params training_data\n    losses = [logistic_loss(example, params) for example in training_data]  # @inspect losses @stepover\n    train_loss = np.mean(losses)  # @inspect train_loss\n    return train_loss\n\n\ndef logistic_loss_optimization():\n    text(\"Now we are ready to optimize the logistic loss.\")\n\n    text(\"Let's compute the gradient of the loss for one example.\")\n    params = Parameters(weight=np.array([0, 0]), bias=0)  # @inspect params\n    example = Example(x=np.array([2, 0]), target_y=1)  # @inspect example\n    grad = gradient_logistic_loss(example, params)  # @inspect grad\n\n    text(\"Now the gradient of the training loss is the average of the gradients of the examples.\")\n    training_data = get_training_data()  # @inspect training_data @clear example grad @stepover\n    grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad\n\n    text(\"Now we can do gradient descent, which repeatedly updates the parameters in the direction of the gradient.\")\n    gradient_descent()\n\n\ndef gradient_logistic_loss(example: Example, params: Parameters) -> Parameters:  # @inspect example params\n    logit = example.x @ params.weight + params.bias  # @inspect logit\n    margin = logit * example.target_y  # @inspect margin\n    loss = -np.log(logistic(margin))  # @inspect loss @stepover\n    grad_logit = -logistic(-margin)  # @inspect grad_logit @stepover\n    grad_weight = example.target_y * example.x * grad_logit  # @inspect grad_weight\n    grad_bias = example.target_y * grad_logit  # @inspect grad_bias\n    return Parameters(weight=grad_weight, bias=grad_bias)\n\n\ndef gradient_train_logistic_loss(params: Parameters, training_data: list[Example]) -> Parameters:  # @inspect params training_data\n    grads = [gradient_logistic_loss(example, params) for example in training_data]  # @inspect grads @stepover\n    mean_weight = np.mean([grad.weight for grad in grads], axis=0)  # @inspect mean_weight\n    mean_bias = np.mean([grad.bias for grad in grads])  # @inspect mean_bias\n    return Parameters(weight=mean_weight, bias=mean_bias)\n\n\ndef gradient_descent():\n    # Initialization\n    training_data = get_training_data()  # @stepover\n    params = Parameters(weight=np.array([0, 0]), bias=0)  # @inspect params\n    learning_rate = 1\n\n    losses = []\n    for step in range(20):  # @inspect step\n        train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover\n        grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover\n        params = Parameters(  # @inspect params\n            weight=params.weight - learning_rate * grad.weight,\n            bias=params.bias - learning_rate * grad.bias,\n        )\n        losses.append(train_loss)\n\n    # Learning curve\n    plot(Chart(Data(values=[{\"step\": i, \"loss\": loss} for i, loss in enumerate(losses)])).mark_line().encode(x=\"step:Q\", y=\"loss:Q\").to_dict())\n\n    text(\"Plot the decision boundary:\")\n    points = [example_to_point(example) for example in training_data]  # @stepover\n    plot(make_plot(\"decision boundary\", \"x0\", \"x1\", lambda x0: -(params.weight[0] * x0 + params.bias) / params.weight[1], points=points))  # @stepover\n\n\ndef multiclass_classification():\n    text(\"Binary classification (output y \u2208 {-1, 1})\")\n    text(\"Multiclass classification (output y \u2208 {0, 1, ..., K-1})\")\n\n    text(\"For binary classification, we compute a single logit for each input.\")\n    text(\"Sign of logit is the predicted class\")\n    x = np.array([2, 0])  # @inspect x\n    params = Parameters(weight=np.array([1, -1]), bias=-1)  # @inspect params\n    logit = x @ params.weight + params.bias  # @inspect logit\n    prob_pos = logistic(logit)  # @inspect prob_pos @stepover\n    prob_neg = 1 - prob_pos  # @inspect prob_neg\n\n    text(\"For multiclass classification\")  # @clear prob_pos prob_neg x params logit\n    text(\"- Define a weight vector for each class\")\n    text(\"- Compute a logit for each class\")\n    text(\"- Predict a distribution over classes\")\n    params = Parameters(weight=np.array([[1, -1], [1, -1], [0, 2]]), bias=np.array([1, 1, 0]))  # @inspect params\n    x = np.array([2, 0])  # @inspect x\n    logits = params.weight @ x + params.bias  # @inspect logits\n    text(\"How do I turn logits into probabilities?\")\n    introduce_softmax()\n    probs = softmax(logits)  # @inspect probs\n\n    text(\"Now let us define the cross entropy loss.\")\n    introduce_cross_entropy()\n\n    text(\"Now we can compute the cross entropy loss for an example:\")\n    example = Example(x=x, target_y=0)  # @inspect example\n    cross_entropy = cross_entropy_loss(params, example)  # @inspect cross_entropy\n    text(\"Given this loss, we can perform gradient descent to optimize the parameters.\")\n\n    text(\"Summary\")\n    text(\"- Softmax: turn logits into probabilities\")\n    text(\"- Cross entropy: measures difference between target distribution and predicted distribution\")\n    text(\"- Cross entropy loss: generalizes logistic loss, predicted probability of target class\")\n\n\ndef introduce_softmax():\n    text(\"Recall: the logistic function maps (-\u221e, +\u221e) to (0, 1)\")\n\n    text(\"The softmax function generalizes this to multiple classes.\")\n\n    logits = np.array([1, -1, 0])  # @inspect logits\n    probs = softmax(logits)  # @inspect softmax_logits\n\n    text(\"Shifting up logits doesn't change the relative probabilities\")\n    logits1 = np.array([1, -1, 0])  # @inspect logits1\n    probs1 = softmax(logits1)  # @inspect probs1 @stepover\n    logits2 = np.array(logits1 + 2)  # @inspect logits2\n    probs2 = softmax(logits2)  # @inspect probs2 @stepover\n    assert np.allclose(probs1, probs2)\n\n\ndef softmax(logits: np.ndarray) -> np.ndarray:  # @inspect logits\n    exp_logits = np.exp(logits)  # @inspect exp_logits\n    probs = exp_logits / np.sum(exp_logits)  # @inspect probs\n    return probs\n\n\ndef cross_entropy_loss(params: Parameters, example: Example) -> float:  # @inspect params example\n    num_classes = len(params.weight)  # @inspect num_classes\n    logits = [example.x @ params.weight[y] + params.bias[y] for y in range(num_classes)]  # @inspect logits\n    probs = softmax(logits)  # @inspect probs\n    cross_entropy = -np.log(probs[example.target_y])  # @inspect cross_entropy\n    return cross_entropy\n\n\ndef introduce_cross_entropy():\n    text(\"Cross entropy: measures the difference between a target distribution and a predicted distribution\")\n    target = np.array([0.5, 0.2, 0.3])  # @inspect target\n    predicted = np.array([0.1, 0.5, 0.4])  # @inspect predicted\n\n    text(\"Penalized when target puts high probability on outcome, and predicted puts low probability on it.\")\n    terms = target * -np.log(predicted)  # @inspect terms\n    cross_entropy = np.sum(terms)  # @inspect cross_entropy\n\n    text(\"Cross entropy is minimized when target = predicted\")\n    text(\"... and the cross entropy is entropy of target (or predicted).\")\n\n    text(\"Special case: target is a single label (represented as a one-hot vector)\") # @clear target predicted terms cross_entropy\n    target = np.array([0, 1, 0])  # @inspect target\n    predicted = np.array([0.1, 0.5, 0.4])  # @inspect predicted\n    terms = target * -np.log(predicted)  # @inspect terms\n    cross_entropy = np.sum(terms)  # @inspect cross_entropy\n    text(\"This is the same as the negative log probability of the target class.\")\n\n\ndef representing_text():\n    text(\"Prediction tasks involve text(strings), but machine learning operates on tensors.\")\n\n    string = \"the cat in the hat\"\n\n    text(\"How do we represent a string as a tensor?\")\n    text(\"1. Tokenization: convert a string into a sequence of integers.\")\n    text(\"2. Represent each integer as a one-hot vector.\")\n\n    vocab, indices = tokenization()  # @inspect indices\n\n    text(\"### Interpretation\")\n    text(\"Represent each index as a one-hot vector.\")\n    index = indices[4]  # @inspect index\n    vector = np.eye(len(vocab))[index]  # @inspect vector @stepover\n\n    text(\"So the string is represented as a sequence of vectors, or a matrix:\")\n    matrix = np.eye(len(vocab))[indices]  # @inspect matrix @stepover @clear index vector\n\n    text(\"### Operations\")\n    text(\"In practice, we store the indices and not the one-hot vectors to save memory.\")\n    text(\"We can operate directly using the indices.\")\n    text(\"Suppose we want to take the dot product of each position with `w`.\")\n    np.random.seed(1)\n    w = np.random.randn(len(vocab))  # @inspect w @stepover\n\n    # Use a matrix-vector product\n    y = matrix @ w  # @inspect y\n\n    # Equivalently, index into the weight vectors\n    y_index = w[indices]  # @inspect y_index\n\n    text(\"### Bag of words representation\")\n    text(\"Represent each token as a (one-hot) vector.\")\n    text(\"Represent each text as the average of the token vectors.\")\n    bow = reduce(matrix, \"pos vocab -> vocab\", \"mean\")  # @inspect bow\n    text(\"Then we can operate on this fixed-dimensional vector.\")\n    y_bow = bow @ w  # @inspect y_bow\n\n    text(\"Equivalently, we can operate directly on the indices:\")\n    y_bow_index = np.mean(w[indices])  # @inspect y_bow_index\n    \n    text(\"Bag of words:\")\n    text(\"- Pro: doesn't depend on the length of the text\")\n    text(\"- Con: doesn't pay attention to word order (*dog bites man* = *man bites dog*)\")\n\n    text(\"Summary\")\n    text(\"- Problem: convert strings to tensors for machine learning\")\n    text(\"- Solution: tokenization + one-hot encoding\")\n    text(\"- Tokenization: split strings into words and build up a vocabulary (string \u2194 index)\")\n    text(\"- Mathematically work with one-hot vectors; in code, work with indices\")\n\n\ndef tokenization():\n    string = \"the cat in the hat\"\n\n    # Simple tokenization\n    text(\"Split a string by space into words and convert them into integers.\")\n    vocab = Vocabulary()  # @inspect vocab\n    words = string.split()  # @inspect words\n    indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab\n\n    # Fancier tokenization\n    text(\"Language models use more sophisticated tokenizers (Byte-Pair Encoding) \"), link(\"https://arxiv.org/pdf/1508.07909\")\n    text(\"To get a feel for how tokenizers work, play with this \"), link(title=\"interactive site\", url=\"https://tiktokenizer.vercel.app/?encoder=gpt2\")\n    tokenzier = tiktoken.get_encoding(\"gpt2\")\n    gpt2_indices = tokenzier.encode(string)  # @inspect gpt2_indices\n\n    return vocab, indices\n\n\nclass Vocabulary:\n    \"\"\"Maps strings to integers.\"\"\"\n    def __init__(self):\n        self.index_to_string: list[str] = []\n        self.string_to_index: dict[str, int] = {}\n\n    def get_index(self, string: str) -> int:  # @inspect string\n        index = self.string_to_index.get(string)  # @inspect index\n        if index is None:  # New string\n            index = len(self.index_to_string)  # @inspect index\n            self.index_to_string.append(string)\n            self.string_to_index[string] = index\n        return index\n\n    def get_string(self, index: int) -> str:\n        return self.index_to_string[index]\n\n    def __len__(self):\n        return len(self.index_to_string)\n\n    def asdict(self):\n        return {\n            \"index_to_string\": self.index_to_string,\n            \"string_to_index\": self.string_to_index,\n        }\n\n\ndef example_to_point(example: Example) -> dict:\n    return {\"x0\": example.x[0], \"x1\": example.x[1], \"color\": \"red\" if example.target_y == 1 else \"blue\"}\n\n\ndef make_plot(title: str,\n              xlabel: str,\n              ylabel: str,\n              f: Callable[[float], float] | None,\n              xrange: tuple[float, float] = (-3, 3),\n              points: list[dict] | None = None) -> dict:\n    to_show = []\n\n    if f is not None:\n        values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]\n        line = Chart(Data(values=values)).properties(title=title).mark_line().encode(x=f\"{xlabel}:Q\", y=f\"{ylabel}:Q\")\n        to_show.append(line)\n\n    if points is not None:\n        points = Chart(Data(values=points)).mark_point().encode(x=f\"{xlabel}:Q\", y=f\"{ylabel}:Q\", color=\"color:N\")\n        to_show.append(points)\n\n    chart = functools.reduce(lambda c1, c2: c1 + c2, to_show)\n    return chart.to_dict()\n\n\nif __name__ == \"__main__\":\n    main()\n"
  },
  "hidden_line_numbers": {
    "linear_classification.py": []
  },
  "steps": [
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 10,
          "function_name": "main",
          "code": "def main():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 11,
          "function_name": "main",
          "code": "text(\"Last unit: linear regression\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Last unit: linear regression",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 12,
          "function_name": "main",
          "code": "text(\"- Prediction task (regression): input \u2192 output: real number\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Prediction task (regression): input \u2192 output: real number",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 13,
          "function_name": "main",
          "code": "text(\"- Hypothesis class: linear functions\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Hypothesis class: linear functions",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 15,
          "function_name": "main",
          "code": "text(\"This unit: linear classification\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This unit: linear classification",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 16,
          "function_name": "main",
          "code": "text(\"- Prediction task: input \u2192 output (class, label): one of K discrete choices\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Prediction task: input \u2192 output (class, label): one of K discrete choices",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 17,
          "function_name": "main",
          "code": "text(\"- Hypothesis class: (thresholded) linear functions\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Hypothesis class: (thresholded) linear functions",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 19,
          "function_name": "main",
          "code": "link(\"https://stanford-cs221.github.io/autumn2023/modules/module.html#include=machine-learning%2Flinear-classification.js&mode=print6pp\", title=\"[Autumn 2023 lecture]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "[Autumn 2023 lecture]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://stanford-cs221.github.io/autumn2023/modules/module.html#include=machine-learning%2Flinear-classification.js&mode=print6pp",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 21,
          "function_name": "main",
          "code": "text(\"Let's walk through the same steps as for linear regression and see what changes...\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's walk through the same steps as for linear regression and see what changes...",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 43,
          "function_name": "prediction_task",
          "code": "def prediction_task():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 44,
          "function_name": "prediction_task",
          "code": "text(\"Example task: image classification\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Example task: image classification",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 45,
          "function_name": "prediction_task",
          "code": "text(\"- **Input**: an image; e.g.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- **Input**: an image; e.g.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 46,
          "function_name": "prediction_task",
          "code": "image(\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/Felis_catus-cat_on_snow.jpg/1920px-Felis_catus-cat_on_snow.jpg\", width=200)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "var/files/image-c583139e7f51d1c8e2010c1ed18a9d19-https_upload_wikimedia_org_wikipedia_commons_thumb_b_b6_Felis_catus-cat_on_snow_jpg_1920px-Felis_catus-cat_on_snow_jpg",
          "style": {
            "width": 200
          },
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 47,
          "function_name": "prediction_task",
          "code": "text(\"- **Output**: what kind of object it is (e.g., cat)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- **Output**: what kind of object it is (e.g., cat)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 49,
          "function_name": "prediction_task",
          "code": "text(\"Example task: sentiment classification\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Example task: sentiment classification",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 50,
          "function_name": "prediction_task",
          "code": "text(\"- **Input**: a document\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- **Input**: a document",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 51,
          "function_name": "prediction_task",
          "code": "text(\"- **Output**: the sentiment of the document (e.g., positive)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- **Output**: the sentiment of the document (e.g., positive)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 53,
          "function_name": "prediction_task",
          "code": "text(\"What's the type of the **input**?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "What's the type of the **input**?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 54,
          "function_name": "prediction_task",
          "code": "text(\"- Image: width x height x 3 (RGB) tensor\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Image: width x height x 3 (RGB) tensor",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 55,
          "function_name": "prediction_task",
          "code": "text(\"- Text: a string (hmm, not a tensor...we'll come back to this later)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Text: a string (hmm, not a tensor...we'll come back to this later)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 57,
          "function_name": "prediction_task",
          "code": "text(\"What's the type of the **output**?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "What's the type of the **output**?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 58,
          "function_name": "prediction_task",
          "code": "text(\"- Binary classification (two choices): usually {-1, 1}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Binary classification (two choices): usually {-1, 1}",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 59,
          "function_name": "prediction_task",
          "code": "text(\"- Multiclass classification (K choices): usually {0, 1, ..., K-1}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Multiclass classification (K choices): usually {0, 1, ..., K-1}",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 61,
          "function_name": "prediction_task",
          "code": "text(\"A **predictor** is a function that takes an input and produces a predicted output.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "A **predictor** is a function that takes an input and produces a predicted output.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 62,
          "function_name": "prediction_task",
          "code": "text(\"Here's an example predictor for binary classification:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Here's an example predictor for binary classification:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 63,
          "function_name": "prediction_task",
          "code": "def simple_binary_classifier(x: np.ndarray) -> int:  # @inspect x"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 71,
          "function_name": "prediction_task",
          "code": "text(\"Given an input, call the predictor on it:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Given an input, call the predictor on it:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 72,
          "function_name": "prediction_task",
          "code": "x_a = np.array([1, 2])  # @inspect x_a"
        }
      ],
      "env": {
        "x_a": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            2
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 73,
          "function_name": "prediction_task",
          "code": "predicted_y_a = simple_binary_classifier(x_a)  # @inspect predicted_y_a"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 73,
          "function_name": "prediction_task",
          "code": "predicted_y_a = simple_binary_classifier(x_a)  # @inspect predicted_y_a"
        },
        {
          "path": "linear_classification.py",
          "line_number": 63,
          "function_name": "simple_binary_classifier",
          "code": "def simple_binary_classifier(x: np.ndarray) -> int:  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            2
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 73,
          "function_name": "prediction_task",
          "code": "predicted_y_a = simple_binary_classifier(x_a)  # @inspect predicted_y_a"
        },
        {
          "path": "linear_classification.py",
          "line_number": 64,
          "function_name": "simple_binary_classifier",
          "code": "logit = x[0] - x[1] - 1  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.int64",
          "contents": -2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 73,
          "function_name": "prediction_task",
          "code": "predicted_y_a = simple_binary_classifier(x_a)  # @inspect predicted_y_a"
        },
        {
          "path": "linear_classification.py",
          "line_number": 65,
          "function_name": "simple_binary_classifier",
          "code": "if logit > 0:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 73,
          "function_name": "prediction_task",
          "code": "predicted_y_a = simple_binary_classifier(x_a)  # @inspect predicted_y_a"
        },
        {
          "path": "linear_classification.py",
          "line_number": 68,
          "function_name": "simple_binary_classifier",
          "code": "predicted_y = -1  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": -1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 73,
          "function_name": "prediction_task",
          "code": "predicted_y_a = simple_binary_classifier(x_a)  # @inspect predicted_y_a"
        },
        {
          "path": "linear_classification.py",
          "line_number": 69,
          "function_name": "simple_binary_classifier",
          "code": "return predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 73,
          "function_name": "prediction_task",
          "code": "predicted_y_a = simple_binary_classifier(x_a)  # @inspect predicted_y_a"
        }
      ],
      "env": {
        "predicted_y_a": {
          "type": "int",
          "contents": -1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 74,
          "function_name": "prediction_task",
          "code": "x_b = np.array([2, 0])  #  @inspect x_b"
        }
      ],
      "env": {
        "x_b": {
          "type": "numpy.ndarray",
          "contents": [
            2,
            0
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 75,
          "function_name": "prediction_task",
          "code": "predicted_y_b = simple_binary_classifier(x_b)  # @inspect predicted_y_b"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 75,
          "function_name": "prediction_task",
          "code": "predicted_y_b = simple_binary_classifier(x_b)  # @inspect predicted_y_b"
        },
        {
          "path": "linear_classification.py",
          "line_number": 63,
          "function_name": "simple_binary_classifier",
          "code": "def simple_binary_classifier(x: np.ndarray) -> int:  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            2,
            0
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 75,
          "function_name": "prediction_task",
          "code": "predicted_y_b = simple_binary_classifier(x_b)  # @inspect predicted_y_b"
        },
        {
          "path": "linear_classification.py",
          "line_number": 64,
          "function_name": "simple_binary_classifier",
          "code": "logit = x[0] - x[1] - 1  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.int64",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 75,
          "function_name": "prediction_task",
          "code": "predicted_y_b = simple_binary_classifier(x_b)  # @inspect predicted_y_b"
        },
        {
          "path": "linear_classification.py",
          "line_number": 65,
          "function_name": "simple_binary_classifier",
          "code": "if logit > 0:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 75,
          "function_name": "prediction_task",
          "code": "predicted_y_b = simple_binary_classifier(x_b)  # @inspect predicted_y_b"
        },
        {
          "path": "linear_classification.py",
          "line_number": 66,
          "function_name": "simple_binary_classifier",
          "code": "predicted_y = 1  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 75,
          "function_name": "prediction_task",
          "code": "predicted_y_b = simple_binary_classifier(x_b)  # @inspect predicted_y_b"
        },
        {
          "path": "linear_classification.py",
          "line_number": 69,
          "function_name": "simple_binary_classifier",
          "code": "return predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 75,
          "function_name": "prediction_task",
          "code": "predicted_y_b = simple_binary_classifier(x_b)  # @inspect predicted_y_b"
        }
      ],
      "env": {
        "predicted_y_b": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 77,
          "function_name": "prediction_task",
          "code": "text(\"The points where logit = x[0] - x[1] - 1 = 0 is the **decision boundary**.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The points where logit = x[0] - x[1] - 1 = 0 is the **decision boundary**.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 78,
          "function_name": "prediction_task",
          "code": "plot(make_plot(\"decision boundary\", \"x0\", \"x1\", lambda x0: x0 - 1, points=[example_to_point(Example(x=x_a, target_y=predicted_y_a)), example_to_point(Example(x=x_b, target_y=predicted_y_b))]))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 78,
          "function_name": "prediction_task",
          "code": "plot(make_plot(\"decision boundary\", \"x0\", \"x1\", lambda x0: x0 - 1, points=[example_to_point(Example(x=x_a, target_y=predicted_y_a)), example_to_point(Example(x=x_b, target_y=predicted_y_b))]))  # @stepover"
        },
        {
          "path": "linear_classification.py",
          "line_number": 614,
          "function_name": "make_plot",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 614,
          "function_name": "<listcomp>",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 78,
          "function_name": "<lambda>",
          "code": "plot(make_plot(\"decision boundary\", \"x0\", \"x1\", lambda x0: x0 - 1, points=[example_to_point(Example(x=x_a, target_y=predicted_y_a)), example_to_point(Example(x=x_b, target_y=predicted_y_b))]))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 78,
          "function_name": "prediction_task",
          "code": "plot(make_plot(\"decision boundary\", \"x0\", \"x1\", lambda x0: x0 - 1, points=[example_to_point(Example(x=x_a, target_y=predicted_y_a)), example_to_point(Example(x=x_b, target_y=predicted_y_b))]))  # @stepover"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "layer": [
              {
                "data": {
                  "values": [
                    {
                      "x0": -3.0,
                      "x1": -4.0
                    },
                    {
                      "x0": -2.793103448275862,
                      "x1": -3.793103448275862
                    },
                    {
                      "x0": -2.586206896551724,
                      "x1": -3.586206896551724
                    },
                    {
                      "x0": -2.3793103448275863,
                      "x1": -3.3793103448275863
                    },
                    {
                      "x0": -2.1724137931034484,
                      "x1": -3.1724137931034484
                    },
                    {
                      "x0": -1.9655172413793103,
                      "x1": -2.9655172413793105
                    },
                    {
                      "x0": -1.7586206896551724,
                      "x1": -2.7586206896551726
                    },
                    {
                      "x0": -1.5517241379310345,
                      "x1": -2.5517241379310347
                    },
                    {
                      "x0": -1.3448275862068966,
                      "x1": -2.344827586206897
                    },
                    {
                      "x0": -1.1379310344827587,
                      "x1": -2.137931034482759
                    },
                    {
                      "x0": -0.9310344827586206,
                      "x1": -1.9310344827586206
                    },
                    {
                      "x0": -0.7241379310344827,
                      "x1": -1.7241379310344827
                    },
                    {
                      "x0": -0.5172413793103448,
                      "x1": -1.5172413793103448
                    },
                    {
                      "x0": -0.31034482758620685,
                      "x1": -1.3103448275862069
                    },
                    {
                      "x0": -0.10344827586206895,
                      "x1": -1.103448275862069
                    },
                    {
                      "x0": 0.10344827586206895,
                      "x1": -0.896551724137931
                    },
                    {
                      "x0": 0.31034482758620685,
                      "x1": -0.6896551724137931
                    },
                    {
                      "x0": 0.5172413793103448,
                      "x1": -0.48275862068965525
                    },
                    {
                      "x0": 0.7241379310344827,
                      "x1": -0.27586206896551735
                    },
                    {
                      "x0": 0.9310344827586206,
                      "x1": -0.06896551724137945
                    },
                    {
                      "x0": 1.137931034482759,
                      "x1": 0.1379310344827589
                    },
                    {
                      "x0": 1.3448275862068968,
                      "x1": 0.3448275862068968
                    },
                    {
                      "x0": 1.5517241379310347,
                      "x1": 0.5517241379310347
                    },
                    {
                      "x0": 1.7586206896551726,
                      "x1": 0.7586206896551726
                    },
                    {
                      "x0": 1.9655172413793105,
                      "x1": 0.9655172413793105
                    },
                    {
                      "x0": 2.1724137931034484,
                      "x1": 1.1724137931034484
                    },
                    {
                      "x0": 2.3793103448275863,
                      "x1": 1.3793103448275863
                    },
                    {
                      "x0": 2.586206896551724,
                      "x1": 1.5862068965517242
                    },
                    {
                      "x0": 2.793103448275862,
                      "x1": 1.793103448275862
                    },
                    {
                      "x0": 3.0,
                      "x1": 2.0
                    }
                  ]
                },
                "mark": {
                  "type": "line"
                },
                "encoding": {
                  "x": {
                    "field": "x0",
                    "type": "quantitative"
                  },
                  "y": {
                    "field": "x1",
                    "type": "quantitative"
                  }
                },
                "title": "decision boundary"
              },
              {
                "data": {
                  "values": [
                    {
                      "x0": 1.0,
                      "x1": 2.0,
                      "color": "blue"
                    },
                    {
                      "x0": 2.0,
                      "x1": 0.0,
                      "color": "red"
                    }
                  ]
                },
                "mark": {
                  "type": "point"
                },
                "encoding": {
                  "color": {
                    "field": "color",
                    "type": "nominal"
                  },
                  "x": {
                    "field": "x0",
                    "type": "quantitative"
                  },
                  "y": {
                    "field": "x1",
                    "type": "quantitative"
                  }
                }
              }
            ],
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 80,
          "function_name": "prediction_task",
          "code": "text(\"But how do we get the predictor?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "But how do we get the predictor?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 23,
          "function_name": "main",
          "code": "prediction_task()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 83,
          "function_name": "machine_learning_problem",
          "code": "def machine_learning_problem():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 84,
          "function_name": "machine_learning_problem",
          "code": "text(\"The **training data** is a set of examples that demonstrate the task.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The **training data** is a set of examples that demonstrate the task.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 85,
          "function_name": "machine_learning_problem",
          "code": "text(\"Each **example** consists of an (input x, target output y) pair.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Each **example** consists of an (input x, target output y) pair.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 86,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 86,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 99,
          "function_name": "get_training_data",
          "code": "def get_training_data():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 86,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 101,
          "function_name": "get_training_data",
          "code": "Example(x=np.array([1, 2]), target_y=-1),"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 86,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 102,
          "function_name": "get_training_data",
          "code": "Example(x=np.array([2, 0]), target_y=1),"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 86,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 103,
          "function_name": "get_training_data",
          "code": "Example(x=np.array([0, 0]), target_y=-1),"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 86,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        },
        {
          "path": "linear_classification.py",
          "line_number": 100,
          "function_name": "get_training_data",
          "code": "return ["
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 86,
          "function_name": "machine_learning_problem",
          "code": "training_data = get_training_data()  # @inspect training_data"
        }
      ],
      "env": {
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 88,
          "function_name": "machine_learning_problem",
          "code": "data = [example_to_point(example) for example in training_data]  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 89,
          "function_name": "machine_learning_problem",
          "code": "plot(make_plot(\"training data\", \"x0\", \"x1\", f=None, points=data))  # @stepover"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "x0": 1.0,
                  "x1": 2.0,
                  "color": "blue"
                },
                {
                  "x0": 2.0,
                  "x1": 0.0,
                  "color": "red"
                },
                {
                  "x0": 0.0,
                  "x1": 0.0,
                  "color": "blue"
                }
              ]
            },
            "mark": {
              "type": "point"
            },
            "encoding": {
              "color": {
                "field": "color",
                "type": "nominal"
              },
              "x": {
                "field": "x0",
                "type": "quantitative"
              },
              "y": {
                "field": "x1",
                "type": "quantitative"
              }
            },
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 91,
          "function_name": "machine_learning_problem",
          "code": "text(\"A **learning algorithm** takes the training data and produces a predictor.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "A **learning algorithm** takes the training data and produces a predictor.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 93,
          "function_name": "machine_learning_problem",
          "code": "text(\"Key questions:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Key questions:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 94,
          "function_name": "machine_learning_problem",
          "code": "text(\"1. Which predictors are possible? **hypothesis class**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "1. Which predictors are possible? **hypothesis class**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 95,
          "function_name": "machine_learning_problem",
          "code": "text(\"2. How good is a predictor? **loss function**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "2. How good is a predictor? **loss function**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 96,
          "function_name": "machine_learning_problem",
          "code": "text(\"3. How do we compute the best predictor? **optimization algorithm**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "3. How do we compute the best predictor? **optimization algorithm**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 24,
          "function_name": "main",
          "code": "machine_learning_problem()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 113,
          "function_name": "hypothesis_class",
          "code": "def hypothesis_class():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 114,
          "function_name": "hypothesis_class",
          "code": "text(\"Which predictors (classifiers) are possible?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Which predictors (classifiers) are possible?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 116,
          "function_name": "hypothesis_class",
          "code": "text(\"As before, we will parameterize our predictors.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "As before, we will parameterize our predictors.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 117,
          "function_name": "hypothesis_class",
          "code": "text(\"For linear classifiers, each set of parameters has a **weight vector** and a **bias**.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "For linear classifiers, each set of parameters has a **weight vector** and a **bias**.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 118,
          "function_name": "hypothesis_class",
          "code": "params = Parameters(weight=np.array([1, -1]), bias=-1)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 119,
          "function_name": "hypothesis_class",
          "code": "x = np.array([1, 1])  #  @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            1
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 120,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 120,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 139,
          "function_name": "binary_classifier",
          "code": "def binary_classifier(params: Parameters, x: np.ndarray) -> float:  # @inspect params x"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": -1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            1
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 120,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 141,
          "function_name": "binary_classifier",
          "code": "logit = params.weight @ x + params.bias  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.int64",
          "contents": -1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 120,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 142,
          "function_name": "binary_classifier",
          "code": "if logit > 0:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 120,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 145,
          "function_name": "binary_classifier",
          "code": "predicted_y = -1  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": -1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 120,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 146,
          "function_name": "binary_classifier",
          "code": "return predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 120,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": -1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 121,
          "function_name": "hypothesis_class",
          "code": "plot(make_plot(\"binary classifier\", \"x0\", \"x1\", lambda x0: x0 - 1, points=[example_to_point(Example(x=x, target_y=predicted_y))]))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 121,
          "function_name": "hypothesis_class",
          "code": "plot(make_plot(\"binary classifier\", \"x0\", \"x1\", lambda x0: x0 - 1, points=[example_to_point(Example(x=x, target_y=predicted_y))]))  # @stepover"
        },
        {
          "path": "linear_classification.py",
          "line_number": 614,
          "function_name": "make_plot",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 614,
          "function_name": "<listcomp>",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 121,
          "function_name": "<lambda>",
          "code": "plot(make_plot(\"binary classifier\", \"x0\", \"x1\", lambda x0: x0 - 1, points=[example_to_point(Example(x=x, target_y=predicted_y))]))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 121,
          "function_name": "hypothesis_class",
          "code": "plot(make_plot(\"binary classifier\", \"x0\", \"x1\", lambda x0: x0 - 1, points=[example_to_point(Example(x=x, target_y=predicted_y))]))  # @stepover"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "layer": [
              {
                "data": {
                  "values": [
                    {
                      "x0": -3.0,
                      "x1": -4.0
                    },
                    {
                      "x0": -2.793103448275862,
                      "x1": -3.793103448275862
                    },
                    {
                      "x0": -2.586206896551724,
                      "x1": -3.586206896551724
                    },
                    {
                      "x0": -2.3793103448275863,
                      "x1": -3.3793103448275863
                    },
                    {
                      "x0": -2.1724137931034484,
                      "x1": -3.1724137931034484
                    },
                    {
                      "x0": -1.9655172413793103,
                      "x1": -2.9655172413793105
                    },
                    {
                      "x0": -1.7586206896551724,
                      "x1": -2.7586206896551726
                    },
                    {
                      "x0": -1.5517241379310345,
                      "x1": -2.5517241379310347
                    },
                    {
                      "x0": -1.3448275862068966,
                      "x1": -2.344827586206897
                    },
                    {
                      "x0": -1.1379310344827587,
                      "x1": -2.137931034482759
                    },
                    {
                      "x0": -0.9310344827586206,
                      "x1": -1.9310344827586206
                    },
                    {
                      "x0": -0.7241379310344827,
                      "x1": -1.7241379310344827
                    },
                    {
                      "x0": -0.5172413793103448,
                      "x1": -1.5172413793103448
                    },
                    {
                      "x0": -0.31034482758620685,
                      "x1": -1.3103448275862069
                    },
                    {
                      "x0": -0.10344827586206895,
                      "x1": -1.103448275862069
                    },
                    {
                      "x0": 0.10344827586206895,
                      "x1": -0.896551724137931
                    },
                    {
                      "x0": 0.31034482758620685,
                      "x1": -0.6896551724137931
                    },
                    {
                      "x0": 0.5172413793103448,
                      "x1": -0.48275862068965525
                    },
                    {
                      "x0": 0.7241379310344827,
                      "x1": -0.27586206896551735
                    },
                    {
                      "x0": 0.9310344827586206,
                      "x1": -0.06896551724137945
                    },
                    {
                      "x0": 1.137931034482759,
                      "x1": 0.1379310344827589
                    },
                    {
                      "x0": 1.3448275862068968,
                      "x1": 0.3448275862068968
                    },
                    {
                      "x0": 1.5517241379310347,
                      "x1": 0.5517241379310347
                    },
                    {
                      "x0": 1.7586206896551726,
                      "x1": 0.7586206896551726
                    },
                    {
                      "x0": 1.9655172413793105,
                      "x1": 0.9655172413793105
                    },
                    {
                      "x0": 2.1724137931034484,
                      "x1": 1.1724137931034484
                    },
                    {
                      "x0": 2.3793103448275863,
                      "x1": 1.3793103448275863
                    },
                    {
                      "x0": 2.586206896551724,
                      "x1": 1.5862068965517242
                    },
                    {
                      "x0": 2.793103448275862,
                      "x1": 1.793103448275862
                    },
                    {
                      "x0": 3.0,
                      "x1": 2.0
                    }
                  ]
                },
                "mark": {
                  "type": "line"
                },
                "encoding": {
                  "x": {
                    "field": "x0",
                    "type": "quantitative"
                  },
                  "y": {
                    "field": "x1",
                    "type": "quantitative"
                  }
                },
                "title": "binary classifier"
              },
              {
                "data": {
                  "values": [
                    {
                      "x0": 1.0,
                      "x1": 1.0,
                      "color": "blue"
                    }
                  ]
                },
                "mark": {
                  "type": "point"
                },
                "encoding": {
                  "color": {
                    "field": "color",
                    "type": "nominal"
                  },
                  "x": {
                    "field": "x0",
                    "type": "quantitative"
                  },
                  "y": {
                    "field": "x1",
                    "type": "quantitative"
                  }
                }
              }
            ],
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 123,
          "function_name": "hypothesis_class",
          "code": "text(\"Here's another predictor:\")  # @clear params x predicted_y"
        }
      ],
      "env": {
        "params": null,
        "x": null,
        "predicted_y": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "Here's another predictor:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 124,
          "function_name": "hypothesis_class",
          "code": "params = Parameters(weight=np.array([1, -1]), bias=1)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 125,
          "function_name": "hypothesis_class",
          "code": "x = np.array([1, 1])  #  @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            1
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 126,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 126,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 139,
          "function_name": "binary_classifier",
          "code": "def binary_classifier(params: Parameters, x: np.ndarray) -> float:  # @inspect params x"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            1
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 126,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 141,
          "function_name": "binary_classifier",
          "code": "logit = params.weight @ x + params.bias  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.int64",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 126,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 142,
          "function_name": "binary_classifier",
          "code": "if logit > 0:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 126,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 143,
          "function_name": "binary_classifier",
          "code": "predicted_y = 1  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 126,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 146,
          "function_name": "binary_classifier",
          "code": "return predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 126,
          "function_name": "hypothesis_class",
          "code": "predicted_y = binary_classifier(params, x)  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 127,
          "function_name": "hypothesis_class",
          "code": "plot(make_plot(\"binary classifier\", \"x0\", \"x1\", lambda x0: x0 + 1, points=[example_to_point(Example(x=x, target_y=predicted_y))]))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 127,
          "function_name": "hypothesis_class",
          "code": "plot(make_plot(\"binary classifier\", \"x0\", \"x1\", lambda x0: x0 + 1, points=[example_to_point(Example(x=x, target_y=predicted_y))]))  # @stepover"
        },
        {
          "path": "linear_classification.py",
          "line_number": 614,
          "function_name": "make_plot",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 614,
          "function_name": "<listcomp>",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 127,
          "function_name": "<lambda>",
          "code": "plot(make_plot(\"binary classifier\", \"x0\", \"x1\", lambda x0: x0 + 1, points=[example_to_point(Example(x=x, target_y=predicted_y))]))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 127,
          "function_name": "hypothesis_class",
          "code": "plot(make_plot(\"binary classifier\", \"x0\", \"x1\", lambda x0: x0 + 1, points=[example_to_point(Example(x=x, target_y=predicted_y))]))  # @stepover"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "layer": [
              {
                "data": {
                  "values": [
                    {
                      "x0": -3.0,
                      "x1": -2.0
                    },
                    {
                      "x0": -2.793103448275862,
                      "x1": -1.793103448275862
                    },
                    {
                      "x0": -2.586206896551724,
                      "x1": -1.5862068965517242
                    },
                    {
                      "x0": -2.3793103448275863,
                      "x1": -1.3793103448275863
                    },
                    {
                      "x0": -2.1724137931034484,
                      "x1": -1.1724137931034484
                    },
                    {
                      "x0": -1.9655172413793103,
                      "x1": -0.9655172413793103
                    },
                    {
                      "x0": -1.7586206896551724,
                      "x1": -0.7586206896551724
                    },
                    {
                      "x0": -1.5517241379310345,
                      "x1": -0.5517241379310345
                    },
                    {
                      "x0": -1.3448275862068966,
                      "x1": -0.3448275862068966
                    },
                    {
                      "x0": -1.1379310344827587,
                      "x1": -0.13793103448275867
                    },
                    {
                      "x0": -0.9310344827586206,
                      "x1": 0.06896551724137945
                    },
                    {
                      "x0": -0.7241379310344827,
                      "x1": 0.27586206896551735
                    },
                    {
                      "x0": -0.5172413793103448,
                      "x1": 0.48275862068965525
                    },
                    {
                      "x0": -0.31034482758620685,
                      "x1": 0.6896551724137931
                    },
                    {
                      "x0": -0.10344827586206895,
                      "x1": 0.896551724137931
                    },
                    {
                      "x0": 0.10344827586206895,
                      "x1": 1.103448275862069
                    },
                    {
                      "x0": 0.31034482758620685,
                      "x1": 1.3103448275862069
                    },
                    {
                      "x0": 0.5172413793103448,
                      "x1": 1.5172413793103448
                    },
                    {
                      "x0": 0.7241379310344827,
                      "x1": 1.7241379310344827
                    },
                    {
                      "x0": 0.9310344827586206,
                      "x1": 1.9310344827586206
                    },
                    {
                      "x0": 1.137931034482759,
                      "x1": 2.137931034482759
                    },
                    {
                      "x0": 1.3448275862068968,
                      "x1": 2.344827586206897
                    },
                    {
                      "x0": 1.5517241379310347,
                      "x1": 2.5517241379310347
                    },
                    {
                      "x0": 1.7586206896551726,
                      "x1": 2.7586206896551726
                    },
                    {
                      "x0": 1.9655172413793105,
                      "x1": 2.9655172413793105
                    },
                    {
                      "x0": 2.1724137931034484,
                      "x1": 3.1724137931034484
                    },
                    {
                      "x0": 2.3793103448275863,
                      "x1": 3.3793103448275863
                    },
                    {
                      "x0": 2.586206896551724,
                      "x1": 3.586206896551724
                    },
                    {
                      "x0": 2.793103448275862,
                      "x1": 3.793103448275862
                    },
                    {
                      "x0": 3.0,
                      "x1": 4.0
                    }
                  ]
                },
                "mark": {
                  "type": "line"
                },
                "encoding": {
                  "x": {
                    "field": "x0",
                    "type": "quantitative"
                  },
                  "y": {
                    "field": "x1",
                    "type": "quantitative"
                  }
                },
                "title": "binary classifier"
              },
              {
                "data": {
                  "values": [
                    {
                      "x0": 1.0,
                      "x1": 1.0,
                      "color": "red"
                    }
                  ]
                },
                "mark": {
                  "type": "point"
                },
                "encoding": {
                  "color": {
                    "field": "color",
                    "type": "nominal"
                  },
                  "x": {
                    "field": "x0",
                    "type": "quantitative"
                  },
                  "y": {
                    "field": "x1",
                    "type": "quantitative"
                  }
                }
              }
            ],
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 129,
          "function_name": "hypothesis_class",
          "code": "text(\"The **hypothesis class** is the set of all predictors you can get by choosing parameters (weight, bias).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The **hypothesis class** is the set of all predictors you can get by choosing parameters (weight, bias).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 130,
          "function_name": "hypothesis_class",
          "code": "text(\"The decision boundaries are any \\\"straight-line cuts\\\" of the input space.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The decision boundaries are any \"straight-line cuts\" of the input space.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 26,
          "function_name": "main",
          "code": "hypothesis_class()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 149,
          "function_name": "zero_one_loss_function",
          "code": "def zero_one_loss_function():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 150,
          "function_name": "zero_one_loss_function",
          "code": "text(\"The next design decision is how to judge each of the infinitely many possible predictors.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The next design decision is how to judge each of the infinitely many possible predictors.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 152,
          "function_name": "zero_one_loss_function",
          "code": "text(\"Let's consider a predictor:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's consider a predictor:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 153,
          "function_name": "zero_one_loss_function",
          "code": "params = Parameters(weight=np.array([1, -1]), bias=-1)  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": -1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 155,
          "function_name": "zero_one_loss_function",
          "code": "text(\"Recall the training data:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall the training data:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 156,
          "function_name": "zero_one_loss_function",
          "code": "training_data = get_training_data()  # @inspect training_data @stepover"
        }
      ],
      "env": {
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 158,
          "function_name": "zero_one_loss_function",
          "code": "text(\"How well does `params` fit `training_data`?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "How well does `params` fit `training_data`?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 159,
          "function_name": "zero_one_loss_function",
          "code": "text(\"We define a loss function that measures how unhappy one point is based on params.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We define a loss function that measures how unhappy one point is based on params.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 161,
          "function_name": "zero_one_loss_function",
          "code": "text(\"Recall that for regression, we used the squared loss.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall that for regression, we used the squared loss.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 162,
          "function_name": "zero_one_loss_function",
          "code": "text(\"Intuition: how far away the prediction is from the target.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Intuition: how far away the prediction is from the target.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 163,
          "function_name": "zero_one_loss_function",
          "code": "loss = squared_loss(training_data[0], params)  # @inspect loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 163,
          "function_name": "zero_one_loss_function",
          "code": "loss = squared_loss(training_data[0], params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 186,
          "function_name": "squared_loss",
          "code": "def squared_loss(example: Example, params: Parameters) -> float:  # @inspect example params"
        }
      ],
      "env": {
        "example": {
          "type": "linear_classification.Example",
          "contents": {
            "x": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                2
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "target_y": {
              "type": "int",
              "contents": -1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": -1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 163,
          "function_name": "zero_one_loss_function",
          "code": "loss = squared_loss(training_data[0], params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 187,
          "function_name": "squared_loss",
          "code": "predicted_y = example.x @ params.weight + params.bias  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "numpy.int64",
          "contents": -2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 163,
          "function_name": "zero_one_loss_function",
          "code": "loss = squared_loss(training_data[0], params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 188,
          "function_name": "squared_loss",
          "code": "residual = predicted_y - example.target_y  # @inspect residual"
        }
      ],
      "env": {
        "residual": {
          "type": "numpy.int64",
          "contents": -1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 163,
          "function_name": "zero_one_loss_function",
          "code": "loss = squared_loss(training_data[0], params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 189,
          "function_name": "squared_loss",
          "code": "loss = residual ** 2  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "numpy.int64",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 163,
          "function_name": "zero_one_loss_function",
          "code": "loss = squared_loss(training_data[0], params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 190,
          "function_name": "squared_loss",
          "code": "return loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 163,
          "function_name": "zero_one_loss_function",
          "code": "loss = squared_loss(training_data[0], params)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "numpy.int64",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 164,
          "function_name": "zero_one_loss_function",
          "code": "plot(make_plot(\"squared loss\", \"residual\", \"loss\", lambda residual: residual ** 2))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 164,
          "function_name": "zero_one_loss_function",
          "code": "plot(make_plot(\"squared loss\", \"residual\", \"loss\", lambda residual: residual ** 2))  # @stepover"
        },
        {
          "path": "linear_classification.py",
          "line_number": 614,
          "function_name": "make_plot",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 614,
          "function_name": "<listcomp>",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 164,
          "function_name": "<lambda>",
          "code": "plot(make_plot(\"squared loss\", \"residual\", \"loss\", lambda residual: residual ** 2))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 164,
          "function_name": "zero_one_loss_function",
          "code": "plot(make_plot(\"squared loss\", \"residual\", \"loss\", lambda residual: residual ** 2))  # @stepover"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "residual": -3.0,
                  "loss": 9.0
                },
                {
                  "residual": -2.793103448275862,
                  "loss": 7.801426872770511
                },
                {
                  "residual": -2.586206896551724,
                  "loss": 6.6884661117717
                },
                {
                  "residual": -2.3793103448275863,
                  "loss": 5.661117717003568
                },
                {
                  "residual": -2.1724137931034484,
                  "loss": 4.719381688466112
                },
                {
                  "residual": -1.9655172413793103,
                  "loss": 3.863258026159334
                },
                {
                  "residual": -1.7586206896551724,
                  "loss": 3.0927467300832343
                },
                {
                  "residual": -1.5517241379310345,
                  "loss": 2.4078478002378123
                },
                {
                  "residual": -1.3448275862068966,
                  "loss": 1.808561236623068
                },
                {
                  "residual": -1.1379310344827587,
                  "loss": 1.2948870392390013
                },
                {
                  "residual": -0.9310344827586206,
                  "loss": 0.8668252080856121
                },
                {
                  "residual": -0.7241379310344827,
                  "loss": 0.5243757431629011
                },
                {
                  "residual": -0.5172413793103448,
                  "loss": 0.26753864447086795
                },
                {
                  "residual": -0.31034482758620685,
                  "loss": 0.09631391200951246
                },
                {
                  "residual": -0.10344827586206895,
                  "loss": 0.010701545778834717
                },
                {
                  "residual": 0.10344827586206895,
                  "loss": 0.010701545778834717
                },
                {
                  "residual": 0.31034482758620685,
                  "loss": 0.09631391200951246
                },
                {
                  "residual": 0.5172413793103448,
                  "loss": 0.26753864447086795
                },
                {
                  "residual": 0.7241379310344827,
                  "loss": 0.5243757431629011
                },
                {
                  "residual": 0.9310344827586206,
                  "loss": 0.8668252080856121
                },
                {
                  "residual": 1.137931034482759,
                  "loss": 1.2948870392390017
                },
                {
                  "residual": 1.3448275862068968,
                  "loss": 1.8085612366230683
                },
                {
                  "residual": 1.5517241379310347,
                  "loss": 2.4078478002378128
                },
                {
                  "residual": 1.7586206896551726,
                  "loss": 3.0927467300832348
                },
                {
                  "residual": 1.9655172413793105,
                  "loss": 3.863258026159335
                },
                {
                  "residual": 2.1724137931034484,
                  "loss": 4.719381688466112
                },
                {
                  "residual": 2.3793103448275863,
                  "loss": 5.661117717003568
                },
                {
                  "residual": 2.586206896551724,
                  "loss": 6.6884661117717
                },
                {
                  "residual": 2.793103448275862,
                  "loss": 7.801426872770511
                },
                {
                  "residual": 3.0,
                  "loss": 9.0
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "residual",
                "type": "quantitative"
              },
              "y": {
                "field": "loss",
                "type": "quantitative"
              }
            },
            "title": "squared loss",
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 165,
          "function_name": "zero_one_loss_function",
          "code": "text(\"This loss is okay (is 0 when predicted = target), but we're classifying, not precise values...\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This loss is okay (is 0 when predicted = target), but we're classifying, not precise values...",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 167,
          "function_name": "zero_one_loss_function",
          "code": "text(\"For binary classification, we use the zero-one loss.\")  # @clear loss"
        }
      ],
      "env": {
        "loss": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "For binary classification, we use the zero-one loss.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 168,
          "function_name": "zero_one_loss_function",
          "code": "text(\"Intuition: whether the prediction has the same sign as the target.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Intuition: whether the prediction has the same sign as the target.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 169,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 169,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 193,
          "function_name": "zero_one_loss",
          "code": "def zero_one_loss(example: Example, params: Parameters) -> float:  # @inspect example params"
        }
      ],
      "env": {
        "example": {
          "type": "linear_classification.Example",
          "contents": {
            "x": {
              "type": "numpy.ndarray",
              "contents": [
                2,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "target_y": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": -1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 169,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 194,
          "function_name": "zero_one_loss",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 169,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 194,
          "function_name": "zero_one_loss",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 139,
          "function_name": "binary_classifier",
          "code": "def binary_classifier(params: Parameters, x: np.ndarray) -> float:  # @inspect params x"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": -1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            2,
            0
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 169,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 194,
          "function_name": "zero_one_loss",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 141,
          "function_name": "binary_classifier",
          "code": "logit = params.weight @ x + params.bias  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.int64",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 169,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 194,
          "function_name": "zero_one_loss",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 142,
          "function_name": "binary_classifier",
          "code": "if logit > 0:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 169,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 194,
          "function_name": "zero_one_loss",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 143,
          "function_name": "binary_classifier",
          "code": "predicted_y = 1  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 169,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 194,
          "function_name": "zero_one_loss",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 146,
          "function_name": "binary_classifier",
          "code": "return predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 169,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 194,
          "function_name": "zero_one_loss",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 169,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 195,
          "function_name": "zero_one_loss",
          "code": "loss = int(predicted_y != example.target_y)  # Whether the prediction was wrong @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 169,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 196,
          "function_name": "zero_one_loss",
          "code": "return loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 169,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 170,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 170,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 193,
          "function_name": "zero_one_loss",
          "code": "def zero_one_loss(example: Example, params: Parameters) -> float:  # @inspect example params"
        }
      ],
      "env": {
        "example": {
          "type": "linear_classification.Example",
          "contents": {
            "x": {
              "type": "numpy.ndarray",
              "contents": [
                0,
                -2
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "target_y": {
              "type": "int",
              "contents": -1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": -1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 170,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 194,
          "function_name": "zero_one_loss",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 170,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 194,
          "function_name": "zero_one_loss",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 139,
          "function_name": "binary_classifier",
          "code": "def binary_classifier(params: Parameters, x: np.ndarray) -> float:  # @inspect params x"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": -1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            0,
            -2
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 170,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 194,
          "function_name": "zero_one_loss",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 141,
          "function_name": "binary_classifier",
          "code": "logit = params.weight @ x + params.bias  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.int64",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 170,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 194,
          "function_name": "zero_one_loss",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 142,
          "function_name": "binary_classifier",
          "code": "if logit > 0:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 170,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 194,
          "function_name": "zero_one_loss",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 143,
          "function_name": "binary_classifier",
          "code": "predicted_y = 1  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 170,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 194,
          "function_name": "zero_one_loss",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        },
        {
          "path": "linear_classification.py",
          "line_number": 146,
          "function_name": "binary_classifier",
          "code": "return predicted_y"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 170,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 194,
          "function_name": "zero_one_loss",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 170,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 195,
          "function_name": "zero_one_loss",
          "code": "loss = int(predicted_y != example.target_y)  # Whether the prediction was wrong @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 170,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 196,
          "function_name": "zero_one_loss",
          "code": "return loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 170,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss(Example(x=np.array([0, -2]), target_y=-1), params)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 171,
          "function_name": "zero_one_loss_function",
          "code": "text(\"We can rewrite the zero-one loss in terms of the margin.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We can rewrite the zero-one loss in terms of the margin.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 172,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_inline(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 172,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_inline(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 199,
          "function_name": "zero_one_loss_inline",
          "code": "def zero_one_loss_inline(example: Example, params: Parameters) -> float:  # @inspect example params"
        }
      ],
      "env": {
        "example": {
          "type": "linear_classification.Example",
          "contents": {
            "x": {
              "type": "numpy.ndarray",
              "contents": [
                2,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "target_y": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": -1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 172,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_inline(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 201,
          "function_name": "zero_one_loss_inline",
          "code": "logit = example.x @ params.weight + params.bias  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.int64",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 172,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_inline(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 203,
          "function_name": "zero_one_loss_inline",
          "code": "margin = logit * example.target_y  # @inspect margin"
        }
      ],
      "env": {
        "margin": {
          "type": "numpy.int64",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 172,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_inline(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 204,
          "function_name": "zero_one_loss_inline",
          "code": "loss = int(margin <= 0)  # Whether the prediction was wrong @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 172,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_inline(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 205,
          "function_name": "zero_one_loss_inline",
          "code": "return loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 172,
          "function_name": "zero_one_loss_function",
          "code": "loss = zero_one_loss_inline(Example(x=np.array([2, 0]), target_y=1), params)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 173,
          "function_name": "zero_one_loss_function",
          "code": "plot(make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0)))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 173,
          "function_name": "zero_one_loss_function",
          "code": "plot(make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0)))  # @stepover"
        },
        {
          "path": "linear_classification.py",
          "line_number": 614,
          "function_name": "make_plot",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 614,
          "function_name": "<listcomp>",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 173,
          "function_name": "<lambda>",
          "code": "plot(make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0)))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 173,
          "function_name": "zero_one_loss_function",
          "code": "plot(make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0)))  # @stepover"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "margin": -3.0,
                  "loss": 1
                },
                {
                  "margin": -2.793103448275862,
                  "loss": 1
                },
                {
                  "margin": -2.586206896551724,
                  "loss": 1
                },
                {
                  "margin": -2.3793103448275863,
                  "loss": 1
                },
                {
                  "margin": -2.1724137931034484,
                  "loss": 1
                },
                {
                  "margin": -1.9655172413793103,
                  "loss": 1
                },
                {
                  "margin": -1.7586206896551724,
                  "loss": 1
                },
                {
                  "margin": -1.5517241379310345,
                  "loss": 1
                },
                {
                  "margin": -1.3448275862068966,
                  "loss": 1
                },
                {
                  "margin": -1.1379310344827587,
                  "loss": 1
                },
                {
                  "margin": -0.9310344827586206,
                  "loss": 1
                },
                {
                  "margin": -0.7241379310344827,
                  "loss": 1
                },
                {
                  "margin": -0.5172413793103448,
                  "loss": 1
                },
                {
                  "margin": -0.31034482758620685,
                  "loss": 1
                },
                {
                  "margin": -0.10344827586206895,
                  "loss": 1
                },
                {
                  "margin": 0.10344827586206895,
                  "loss": 0
                },
                {
                  "margin": 0.31034482758620685,
                  "loss": 0
                },
                {
                  "margin": 0.5172413793103448,
                  "loss": 0
                },
                {
                  "margin": 0.7241379310344827,
                  "loss": 0
                },
                {
                  "margin": 0.9310344827586206,
                  "loss": 0
                },
                {
                  "margin": 1.137931034482759,
                  "loss": 0
                },
                {
                  "margin": 1.3448275862068968,
                  "loss": 0
                },
                {
                  "margin": 1.5517241379310347,
                  "loss": 0
                },
                {
                  "margin": 1.7586206896551726,
                  "loss": 0
                },
                {
                  "margin": 1.9655172413793105,
                  "loss": 0
                },
                {
                  "margin": 2.1724137931034484,
                  "loss": 0
                },
                {
                  "margin": 2.3793103448275863,
                  "loss": 0
                },
                {
                  "margin": 2.586206896551724,
                  "loss": 0
                },
                {
                  "margin": 2.793103448275862,
                  "loss": 0
                },
                {
                  "margin": 3.0,
                  "loss": 0
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "margin",
                "type": "quantitative"
              },
              "y": {
                "field": "loss",
                "type": "quantitative"
              }
            },
            "title": "zero-one loss",
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 175,
          "function_name": "zero_one_loss_function",
          "code": "text(\"The training loss is the average of the per-example losses of the training examples.\")  # @clear loss"
        }
      ],
      "env": {
        "loss": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "The training loss is the average of the per-example losses of the training examples.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 176,
          "function_name": "zero_one_loss_function",
          "code": "params = Parameters(weight=np.array([0, 0]), bias=-1)  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": -1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 177,
          "function_name": "zero_one_loss_function",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 177,
          "function_name": "zero_one_loss_function",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 208,
          "function_name": "train_zero_one_loss",
          "code": "def train_zero_one_loss(params: Parameters, training_data: list[Example]) -> float:  # @inspect params training_data"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": -1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 177,
          "function_name": "zero_one_loss_function",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 209,
          "function_name": "train_zero_one_loss",
          "code": "losses = [zero_one_loss_inline(example, params) for example in training_data]  # @inspect losses @stepover"
        }
      ],
      "env": {
        "losses": {
          "type": "list",
          "contents": [
            {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 177,
          "function_name": "zero_one_loss_function",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 210,
          "function_name": "train_zero_one_loss",
          "code": "train_loss = np.mean(losses)  # @inspect train_loss"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.3333333333333333,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 177,
          "function_name": "zero_one_loss_function",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 211,
          "function_name": "train_zero_one_loss",
          "code": "return train_loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 177,
          "function_name": "zero_one_loss_function",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.3333333333333333,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 179,
          "function_name": "zero_one_loss_function",
          "code": "text(\"Summary:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 180,
          "function_name": "zero_one_loss_function",
          "code": "text(\"- Logit: the raw score from the linear model (sign is prediction, magnitude is confidence)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Logit: the raw score from the linear model (sign is prediction, magnitude is confidence)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 181,
          "function_name": "zero_one_loss_function",
          "code": "text(\"- Margin (logit * target): sign is whether the prediction is correct or not\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Margin (logit * target): sign is whether the prediction is correct or not",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 182,
          "function_name": "zero_one_loss_function",
          "code": "text(\"- Zero-one loss: 1 if wrong, 0 if right\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Zero-one loss: 1 if wrong, 0 if right",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 183,
          "function_name": "zero_one_loss_function",
          "code": "text(\"- Train loss: average over training examples (error rate)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Train loss: average over training examples (error rate)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 27,
          "function_name": "main",
          "code": "zero_one_loss_function()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 214,
          "function_name": "zero_one_loss_optimization",
          "code": "def zero_one_loss_optimization():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 215,
          "function_name": "zero_one_loss_optimization",
          "code": "text(\"Recall that for every set of parameters `params`, we can compute the training loss `train_loss`.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall that for every set of parameters `params`, we can compute the training loss `train_loss`.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 217,
          "function_name": "zero_one_loss_optimization",
          "code": "text(\"Recall in linear regression we optimized the parameters using gradient descent.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall in linear regression we optimized the parameters using gradient descent.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 218,
          "function_name": "zero_one_loss_optimization",
          "code": "text(\"So let's do the same thing here.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So let's do the same thing here.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 220,
          "function_name": "zero_one_loss_optimization",
          "code": "params = Parameters(weight=np.array([1, 1]), bias=0)  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 221,
          "function_name": "zero_one_loss_optimization",
          "code": "training_data = get_training_data()  # @inspect training_data @stepover"
        }
      ],
      "env": {
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 222,
          "function_name": "zero_one_loss_optimization",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 222,
          "function_name": "zero_one_loss_optimization",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 208,
          "function_name": "train_zero_one_loss",
          "code": "def train_zero_one_loss(params: Parameters, training_data: list[Example]) -> float:  # @inspect params training_data"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 222,
          "function_name": "zero_one_loss_optimization",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 209,
          "function_name": "train_zero_one_loss",
          "code": "losses = [zero_one_loss_inline(example, params) for example in training_data]  # @inspect losses @stepover"
        }
      ],
      "env": {
        "losses": {
          "type": "list",
          "contents": [
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 222,
          "function_name": "zero_one_loss_optimization",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 210,
          "function_name": "train_zero_one_loss",
          "code": "train_loss = np.mean(losses)  # @inspect train_loss"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.6666666666666666,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 222,
          "function_name": "zero_one_loss_optimization",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 211,
          "function_name": "train_zero_one_loss",
          "code": "return train_loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 222,
          "function_name": "zero_one_loss_optimization",
          "code": "train_loss = train_zero_one_loss(params, training_data)  # @inspect train_loss"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.6666666666666666,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 224,
          "function_name": "zero_one_loss_optimization",
          "code": "text(\"We want to find the parameters that yield the lowest training loss.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We want to find the parameters that yield the lowest training loss.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 225,
          "function_name": "zero_one_loss_optimization",
          "code": "text(\"This is an optimization problem.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This is an optimization problem.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 227,
          "function_name": "zero_one_loss_optimization",
          "code": "text(\"Let's take the gradient of the training loss.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's take the gradient of the training loss.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 228,
          "function_name": "zero_one_loss_optimization",
          "code": "grad = gradient_zero_one_loss(training_data[0], params)  # @inspect grad"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 228,
          "function_name": "zero_one_loss_optimization",
          "code": "grad = gradient_zero_one_loss(training_data[0], params)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 236,
          "function_name": "gradient_zero_one_loss",
          "code": "def gradient_zero_one_loss(example: Example, params: Parameters) -> Parameters:  # @inspect example params"
        }
      ],
      "env": {
        "example": {
          "type": "linear_classification.Example",
          "contents": {
            "x": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                2
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "target_y": {
              "type": "int",
              "contents": -1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 228,
          "function_name": "zero_one_loss_optimization",
          "code": "grad = gradient_zero_one_loss(training_data[0], params)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 237,
          "function_name": "gradient_zero_one_loss",
          "code": "logit = example.x @ params.weight + params.bias  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.int64",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 228,
          "function_name": "zero_one_loss_optimization",
          "code": "grad = gradient_zero_one_loss(training_data[0], params)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 238,
          "function_name": "gradient_zero_one_loss",
          "code": "margin = logit * example.target_y  # @inspect margin"
        }
      ],
      "env": {
        "margin": {
          "type": "numpy.int64",
          "contents": -3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 228,
          "function_name": "zero_one_loss_optimization",
          "code": "grad = gradient_zero_one_loss(training_data[0], params)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 240,
          "function_name": "gradient_zero_one_loss",
          "code": "return Parameters(weight=np.zeros_like(params.weight), bias=0)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 228,
          "function_name": "zero_one_loss_optimization",
          "code": "grad = gradient_zero_one_loss(training_data[0], params)  # @inspect grad"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 229,
          "function_name": "zero_one_loss_optimization",
          "code": "text(\"We have a problem: the gradient is zero everywhere!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We have a problem: the gradient is zero everywhere!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 230,
          "function_name": "zero_one_loss_optimization",
          "code": "plot(make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0)))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 230,
          "function_name": "zero_one_loss_optimization",
          "code": "plot(make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0)))  # @stepover"
        },
        {
          "path": "linear_classification.py",
          "line_number": 614,
          "function_name": "make_plot",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 614,
          "function_name": "<listcomp>",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 230,
          "function_name": "<lambda>",
          "code": "plot(make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0)))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 230,
          "function_name": "zero_one_loss_optimization",
          "code": "plot(make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0)))  # @stepover"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "margin": -3.0,
                  "loss": 1
                },
                {
                  "margin": -2.793103448275862,
                  "loss": 1
                },
                {
                  "margin": -2.586206896551724,
                  "loss": 1
                },
                {
                  "margin": -2.3793103448275863,
                  "loss": 1
                },
                {
                  "margin": -2.1724137931034484,
                  "loss": 1
                },
                {
                  "margin": -1.9655172413793103,
                  "loss": 1
                },
                {
                  "margin": -1.7586206896551724,
                  "loss": 1
                },
                {
                  "margin": -1.5517241379310345,
                  "loss": 1
                },
                {
                  "margin": -1.3448275862068966,
                  "loss": 1
                },
                {
                  "margin": -1.1379310344827587,
                  "loss": 1
                },
                {
                  "margin": -0.9310344827586206,
                  "loss": 1
                },
                {
                  "margin": -0.7241379310344827,
                  "loss": 1
                },
                {
                  "margin": -0.5172413793103448,
                  "loss": 1
                },
                {
                  "margin": -0.31034482758620685,
                  "loss": 1
                },
                {
                  "margin": -0.10344827586206895,
                  "loss": 1
                },
                {
                  "margin": 0.10344827586206895,
                  "loss": 0
                },
                {
                  "margin": 0.31034482758620685,
                  "loss": 0
                },
                {
                  "margin": 0.5172413793103448,
                  "loss": 0
                },
                {
                  "margin": 0.7241379310344827,
                  "loss": 0
                },
                {
                  "margin": 0.9310344827586206,
                  "loss": 0
                },
                {
                  "margin": 1.137931034482759,
                  "loss": 0
                },
                {
                  "margin": 1.3448275862068968,
                  "loss": 0
                },
                {
                  "margin": 1.5517241379310347,
                  "loss": 0
                },
                {
                  "margin": 1.7586206896551726,
                  "loss": 0
                },
                {
                  "margin": 1.9655172413793105,
                  "loss": 0
                },
                {
                  "margin": 2.1724137931034484,
                  "loss": 0
                },
                {
                  "margin": 2.3793103448275863,
                  "loss": 0
                },
                {
                  "margin": 2.586206896551724,
                  "loss": 0
                },
                {
                  "margin": 2.793103448275862,
                  "loss": 0
                },
                {
                  "margin": 3.0,
                  "loss": 0
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "margin",
                "type": "quantitative"
              },
              "y": {
                "field": "loss",
                "type": "quantitative"
              }
            },
            "title": "zero-one loss",
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 231,
          "function_name": "zero_one_loss_optimization",
          "code": "text(\"So gradient descent won't update the parameters at all!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So gradient descent won't update the parameters at all!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 232,
          "function_name": "zero_one_loss_optimization",
          "code": "text(\"Intuition: if example is wrong, moving parameters a tiny bit won't make it right, so give up.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Intuition: if example is wrong, moving parameters a tiny bit won't make it right, so give up.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 233,
          "function_name": "zero_one_loss_optimization",
          "code": "text(\"So what do we do?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So what do we do?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 28,
          "function_name": "main",
          "code": "zero_one_loss_optimization()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 294,
          "function_name": "logistic_loss_function",
          "code": "def logistic_loss_function():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 295,
          "function_name": "logistic_loss_function",
          "code": "text(\"To solve the zero gradient problem, we have to rethink the loss function\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "To solve the zero gradient problem, we have to rethink the loss function",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 296,
          "function_name": "logistic_loss_function",
          "code": "text(\"...and actually, even what our classifer outputs.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...and actually, even what our classifer outputs.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 298,
          "function_name": "logistic_loss_function",
          "code": "text(\"Let's take a set of parameters and an example.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's take a set of parameters and an example.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 299,
          "function_name": "logistic_loss_function",
          "code": "params = Parameters(weight=np.array([1, -1]), bias=1)  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 300,
          "function_name": "logistic_loss_function",
          "code": "example = Example(x=np.array([2, 0]), target_y=1)  # @inspect example"
        }
      ],
      "env": {
        "example": {
          "type": "linear_classification.Example",
          "contents": {
            "x": {
              "type": "numpy.ndarray",
              "contents": [
                2,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "target_y": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 302,
          "function_name": "logistic_loss_function",
          "code": "text(\"So far, our predictor turns a logit into a single prediction\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So far, our predictor turns a logit into a single prediction",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 303,
          "function_name": "logistic_loss_function",
          "code": "predicted_y = binary_classifier(params, example.x)  # @inspect predicted_y @stepover"
        }
      ],
      "env": {
        "predicted_y": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 304,
          "function_name": "logistic_loss_function",
          "code": "text(\"Thresholding is a very discrete operation...\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Thresholding is a very discrete operation...",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 306,
          "function_name": "logistic_loss_function",
          "code": "text(\"Instead, let us make things continuous by having a classifier output a probability distribution (continuous) over labels.\")  # @clear predicted_y"
        }
      ],
      "env": {
        "predicted_y": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "Instead, let us make things continuous by having a classifier output a probability distribution (continuous) over labels.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 307,
          "function_name": "logistic_loss_function",
          "code": "text(\"The key to doing this will be the **logistic** function.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The key to doing this will be the **logistic** function.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 243,
          "function_name": "logistic_function",
          "code": "def logistic_function():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 244,
          "function_name": "logistic_function",
          "code": "text(\"A logit is a number between -\u221e and +\u221e.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "A logit is a number between -\u221e and +\u221e.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 245,
          "function_name": "logistic_function",
          "code": "text(\"We want to convert a logit into a probability (must be between 0 and 1).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We want to convert a logit into a probability (must be between 0 and 1).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 246,
          "function_name": "logistic_function",
          "code": "text(\"There are many functions that do this, but the **logistic function** is a standard choice.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "There are many functions that do this, but the **logistic function** is a standard choice.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 248,
          "function_name": "logistic_function",
          "code": "plot(make_plot(\"logistic function\", \"logit\", \"prob\", logistic, xrange=(-10, 10)))  # @stepover"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "logit": -10.0,
                  "prob": 4.5397868702434395e-05
                },
                {
                  "logit": -9.310344827586206,
                  "prob": 9.047515215039624e-05
                },
                {
                  "logit": -8.620689655172413,
                  "prob": 0.0001803033271063963
                },
                {
                  "logit": -7.931034482758621,
                  "prob": 0.00035928528022876536
                },
                {
                  "logit": -7.241379310344827,
                  "prob": 0.0007158102951948158
                },
                {
                  "logit": -6.551724137931034,
                  "prob": 0.0014256167215831127
                },
                {
                  "logit": -5.862068965517241,
                  "prob": 0.0028372776064561774
                },
                {
                  "logit": -5.172413793103448,
                  "prob": 0.005638886633994849
                },
                {
                  "logit": -4.482758620689655,
                  "prob": 0.01117587971618136
                },
                {
                  "logit": -3.793103448275861,
                  "prob": 0.02202936197688093
                },
                {
                  "logit": -3.1034482758620685,
                  "prob": 0.0429652408256212
                },
                {
                  "logit": -2.413793103448276,
                  "prob": 0.08212693243851966
                },
                {
                  "logit": -1.7241379310344822,
                  "prob": 0.15133893946138655
                },
                {
                  "logit": -1.0344827586206886,
                  "prob": 0.262215951369228
                },
                {
                  "logit": -0.3448275862068968,
                  "prob": 0.41463727735895756
                },
                {
                  "logit": 0.3448275862068968,
                  "prob": 0.5853627226410424
                },
                {
                  "logit": 1.0344827586206904,
                  "prob": 0.7377840486307723
                },
                {
                  "logit": 1.724137931034484,
                  "prob": 0.8486610605386137
                },
                {
                  "logit": 2.4137931034482776,
                  "prob": 0.9178730675614805
                },
                {
                  "logit": 3.1034482758620694,
                  "prob": 0.9570347591743789
                },
                {
                  "logit": 3.793103448275863,
                  "prob": 0.9779706380231191
                },
                {
                  "logit": 4.482758620689657,
                  "prob": 0.9888241202838185
                },
                {
                  "logit": 5.172413793103448,
                  "prob": 0.9943611133660052
                },
                {
                  "logit": 5.862068965517242,
                  "prob": 0.9971627223935438
                },
                {
                  "logit": 6.551724137931036,
                  "prob": 0.998574383278417
                },
                {
                  "logit": 7.241379310344829,
                  "prob": 0.9992841897048051
                },
                {
                  "logit": 7.931034482758623,
                  "prob": 0.9996407147197712
                },
                {
                  "logit": 8.620689655172416,
                  "prob": 0.9998196966728936
                },
                {
                  "logit": 9.310344827586206,
                  "prob": 0.9999095248478497
                },
                {
                  "logit": 10.0,
                  "prob": 0.9999546021312976
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "logit",
                "type": "quantitative"
              },
              "y": {
                "field": "prob",
                "type": "quantitative"
              }
            },
            "title": "logistic function",
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 250,
          "function_name": "logistic_function",
          "code": "logit = 0  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 251,
          "function_name": "logistic_function",
          "code": "prob = logistic(logit)  # @inspect prob"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 251,
          "function_name": "logistic_function",
          "code": "prob = logistic(logit)  # @inspect prob"
        },
        {
          "path": "linear_classification.py",
          "line_number": 283,
          "function_name": "logistic",
          "code": "def logistic(logit: float) -> float:  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 251,
          "function_name": "logistic_function",
          "code": "prob = logistic(logit)  # @inspect prob"
        },
        {
          "path": "linear_classification.py",
          "line_number": 284,
          "function_name": "logistic",
          "code": "prob = 1 / (1 + np.exp(-logit))  # @inspect prob"
        }
      ],
      "env": {
        "prob": {
          "type": "numpy.float64",
          "contents": 0.5,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 251,
          "function_name": "logistic_function",
          "code": "prob = logistic(logit)  # @inspect prob"
        },
        {
          "path": "linear_classification.py",
          "line_number": 285,
          "function_name": "logistic",
          "code": "return prob"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 251,
          "function_name": "logistic_function",
          "code": "prob = logistic(logit)  # @inspect prob"
        }
      ],
      "env": {
        "prob": {
          "type": "numpy.float64",
          "contents": 0.5,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 252,
          "function_name": "logistic_function",
          "code": "logit = 1  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 253,
          "function_name": "logistic_function",
          "code": "prob = logistic(logit)  # @inspect prob @stepover"
        }
      ],
      "env": {
        "prob": {
          "type": "numpy.float64",
          "contents": 0.7310585786300049,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 254,
          "function_name": "logistic_function",
          "code": "logit = 8  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "int",
          "contents": 8,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 255,
          "function_name": "logistic_function",
          "code": "prob = logistic(logit)  # @inspect prob @stepover"
        }
      ],
      "env": {
        "prob": {
          "type": "numpy.float64",
          "contents": 0.9996646498695336,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 256,
          "function_name": "logistic_function",
          "code": "logit = -1  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "int",
          "contents": -1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 257,
          "function_name": "logistic_function",
          "code": "prob = logistic(logit)  # @inspect prob @stepover"
        }
      ],
      "env": {
        "prob": {
          "type": "numpy.float64",
          "contents": 0.2689414213699951,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 258,
          "function_name": "logistic_function",
          "code": "logit = -8  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "int",
          "contents": -8,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 259,
          "function_name": "logistic_function",
          "code": "prob = logistic(logit)  # @inspect prob @stepover"
        }
      ],
      "env": {
        "prob": {
          "type": "numpy.float64",
          "contents": 0.0003353501304664781,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 261,
          "function_name": "logistic_function",
          "code": "text(\"Another interpretation: log odds\") # @clear logit prob"
        }
      ],
      "env": {
        "logit": null,
        "prob": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "Another interpretation: log odds",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 262,
          "function_name": "logistic_function",
          "code": "prob = 0.2  # @inspect prob"
        }
      ],
      "env": {
        "prob": {
          "type": "float",
          "contents": 0.2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 263,
          "function_name": "logistic_function",
          "code": "odds = prob / (1 - prob)  # @inspect odds"
        }
      ],
      "env": {
        "odds": {
          "type": "float",
          "contents": 0.25,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 264,
          "function_name": "logistic_function",
          "code": "logit = np.log(odds)  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.float64",
          "contents": -1.3862943611198906,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 265,
          "function_name": "logistic_function",
          "code": "prob2 = logistic(logit)  # @inspect prob2 @stepover"
        }
      ],
      "env": {
        "prob2": {
          "type": "numpy.float64",
          "contents": 0.2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 266,
          "function_name": "logistic_function",
          "code": "assert prob == prob2  # @clear prob odds logit prob2"
        }
      ],
      "env": {
        "prob": null,
        "odds": null,
        "logit": null,
        "prob2": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 268,
          "function_name": "logistic_function",
          "code": "text(\"Properties\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Properties",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 269,
          "function_name": "logistic_function",
          "code": "text(\"- As logit \u2192 -\u221e, prob \u2192 0\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- As logit \u2192 -\u221e, prob \u2192 0",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 270,
          "function_name": "logistic_function",
          "code": "text(\"- As logit \u2192 +\u221e, prob \u2192 1\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- As logit \u2192 +\u221e, prob \u2192 1",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 271,
          "function_name": "logistic_function",
          "code": "text(\"- As logit \u2192 0, prob \u2192 0.5\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- As logit \u2192 0, prob \u2192 0.5",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 273,
          "function_name": "logistic_function",
          "code": "prob1 = logistic(logit=3)  # @inspect prob1 @stepover"
        }
      ],
      "env": {
        "prob1": {
          "type": "numpy.float64",
          "contents": 0.9525741268224334,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 274,
          "function_name": "logistic_function",
          "code": "prob2 = logistic(logit=-3)  # @inspect prob2 @stepover"
        }
      ],
      "env": {
        "prob2": {
          "type": "numpy.float64",
          "contents": 0.04742587317756678,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 275,
          "function_name": "logistic_function",
          "code": "assert np.allclose(prob1 + prob2, 1)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 277,
          "function_name": "logistic_function",
          "code": "text(\"The derivative of the logistic function is quite simple and elegant\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The derivative of the logistic function is quite simple and elegant",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 278,
          "function_name": "logistic_function",
          "code": "grad_prob = gradient_logistic(logit=3)  # @inspect grad_prob"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 278,
          "function_name": "logistic_function",
          "code": "grad_prob = gradient_logistic(logit=3)  # @inspect grad_prob"
        },
        {
          "path": "linear_classification.py",
          "line_number": 288,
          "function_name": "gradient_logistic",
          "code": "def gradient_logistic(logit: float) -> float:"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 278,
          "function_name": "logistic_function",
          "code": "grad_prob = gradient_logistic(logit=3)  # @inspect grad_prob"
        },
        {
          "path": "linear_classification.py",
          "line_number": 289,
          "function_name": "gradient_logistic",
          "code": "prob = logistic(logit)  # @inspect prob @stepover"
        }
      ],
      "env": {
        "prob": {
          "type": "numpy.float64",
          "contents": 0.9525741268224334,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 278,
          "function_name": "logistic_function",
          "code": "grad_prob = gradient_logistic(logit=3)  # @inspect grad_prob"
        },
        {
          "path": "linear_classification.py",
          "line_number": 290,
          "function_name": "gradient_logistic",
          "code": "grad = prob * (1 - prob)  # @inspect grad"
        }
      ],
      "env": {
        "grad": {
          "type": "numpy.float64",
          "contents": 0.045176659730912,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 278,
          "function_name": "logistic_function",
          "code": "grad_prob = gradient_logistic(logit=3)  # @inspect grad_prob"
        },
        {
          "path": "linear_classification.py",
          "line_number": 291,
          "function_name": "gradient_logistic",
          "code": "return grad"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 278,
          "function_name": "logistic_function",
          "code": "grad_prob = gradient_logistic(logit=3)  # @inspect grad_prob"
        }
      ],
      "env": {
        "grad_prob": {
          "type": "numpy.float64",
          "contents": 0.045176659730912,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 279,
          "function_name": "logistic_function",
          "code": "text(\"As |logit| \u2192 -\u221e, grad_prob \u2192 0\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "As |logit| \u2192 -\u221e, grad_prob \u2192 0",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 280,
          "function_name": "logistic_function",
          "code": "plot(make_plot(\"derivative of logistic function\", \"logit\", \"grad_prob\", gradient_logistic, xrange=(-10, 10))) # @stepover"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "logit": -10.0,
                  "grad_prob": 4.5395807735951673e-05
                },
                {
                  "logit": -9.310344827586206,
                  "grad_prob": 9.04669663972396e-05
                },
                {
                  "logit": -8.620689655172413,
                  "grad_prob": 0.00018027081781663067
                },
                {
                  "logit": -7.931034482758621,
                  "grad_prob": 0.0003591561943161763
                },
                {
                  "logit": -7.241379310344827,
                  "grad_prob": 0.0007152979108161089
                },
                {
                  "logit": -6.551724137931034,
                  "grad_prob": 0.0014235843385462554
                },
                {
                  "logit": -5.862068965517241,
                  "grad_prob": 0.0028292274622400797
                },
                {
                  "logit": -5.172413793103448,
                  "grad_prob": 0.005607089591523803
                },
                {
                  "logit": -4.482758620689655,
                  "grad_prob": 0.011050979428750806
                },
                {
                  "logit": -3.793103448275861,
                  "grad_prob": 0.021544069187772484
                },
                {
                  "logit": -3.1034482758620685,
                  "grad_prob": 0.041119228906417574
                },
                {
                  "logit": -2.413793103448276,
                  "grad_prob": 0.0753820994067585
                },
                {
                  "logit": -1.7241379310344822,
                  "grad_prob": 0.12843546486408933
                },
                {
                  "logit": -1.0344827586206886,
                  "grad_prob": 0.19345874621675865
                },
                {
                  "logit": -0.3448275862068968,
                  "grad_prob": 0.24271320558330847
                },
                {
                  "logit": 0.3448275862068968,
                  "grad_prob": 0.24271320558330847
                },
                {
                  "logit": 1.0344827586206904,
                  "grad_prob": 0.19345874621675851
                },
                {
                  "logit": 1.724137931034484,
                  "grad_prob": 0.12843546486408916
                },
                {
                  "logit": 2.4137931034482776,
                  "grad_prob": 0.07538209940675838
                },
                {
                  "logit": 3.1034482758620694,
                  "grad_prob": 0.04111922890641752
                },
                {
                  "logit": 3.793103448275863,
                  "grad_prob": 0.021544069187772436
                },
                {
                  "logit": 4.482758620689657,
                  "grad_prob": 0.011050979428750945
                },
                {
                  "logit": 5.172413793103448,
                  "grad_prob": 0.005607089591523766
                },
                {
                  "logit": 5.862068965517242,
                  "grad_prob": 0.0028292274622401473
                },
                {
                  "logit": 6.551724137931036,
                  "grad_prob": 0.0014235843385461769
                },
                {
                  "logit": 7.241379310344829,
                  "grad_prob": 0.000715297910816145
                },
                {
                  "logit": 7.931034482758623,
                  "grad_prob": 0.0003591561943161825
                },
                {
                  "logit": 8.620689655172416,
                  "grad_prob": 0.00018027081781662468
                },
                {
                  "logit": 9.310344827586206,
                  "grad_prob": 9.046696639717002e-05
                },
                {
                  "logit": 10.0,
                  "grad_prob": 4.5395807735907655e-05
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "logit",
                "type": "quantitative"
              },
              "y": {
                "field": "grad_prob",
                "type": "quantitative"
              }
            },
            "title": "derivative of logistic function",
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 308,
          "function_name": "logistic_loss_function",
          "code": "logistic_function()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 309,
          "function_name": "logistic_loss_function",
          "code": "text(\"The logistic function was used in statistics in **logistic regression** [Berkson, 1944].\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The logistic function was used in statistics in **logistic regression** [Berkson, 1944].",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 311,
          "function_name": "logistic_loss_function",
          "code": "text(\"Now we can compute the probability of y\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now we can compute the probability of y",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 312,
          "function_name": "logistic_loss_function",
          "code": "logit = example.x @ params.weight + params.bias  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.int64",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 313,
          "function_name": "logistic_loss_function",
          "code": "prob_pos = logistic(logit)  # p(y=1|x) @inspect prob_pos @stepover"
        }
      ],
      "env": {
        "prob_pos": {
          "type": "numpy.float64",
          "contents": 0.9525741268224334,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 314,
          "function_name": "logistic_loss_function",
          "code": "prob_neg = logistic(-logit)  # p(y=-1|x) @inspect prob_neg @stepover"
        }
      ],
      "env": {
        "prob_neg": {
          "type": "numpy.float64",
          "contents": 0.04742587317756678,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 315,
          "function_name": "logistic_loss_function",
          "code": "margin = logit * example.target_y  # @inspect margin"
        }
      ],
      "env": {
        "margin": {
          "type": "numpy.int64",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 316,
          "function_name": "logistic_loss_function",
          "code": "prob_target = logistic(margin)  # p(y=target_y|x) @inspect prob_target @stepover"
        }
      ],
      "env": {
        "prob_target": {
          "type": "numpy.float64",
          "contents": 0.9525741268224334,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 318,
          "function_name": "logistic_loss_function",
          "code": "text(\"**Maximum likelihood** principle: maximize the log probability of the training targets\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Maximum likelihood** principle: maximize the log probability of the training targets",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 320,
          "function_name": "logistic_loss_function",
          "code": "text(\"If we have multiple examples, we'd multiply the probabilities: p(y1|x1) * p(y2|x2)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "If we have multiple examples, we'd multiply the probabilities: p(y1|x1) * p(y2|x2)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 321,
          "function_name": "logistic_loss_function",
          "code": "text(\"Equivalent to summing the log probabilities: log p(y1|x1) + log p(y2|x2)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Equivalent to summing the log probabilities: log p(y1|x1) + log p(y2|x2)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 322,
          "function_name": "logistic_loss_function",
          "code": "log_prob_target = np.log(prob_target)  # @inspect log_prob_target"
        }
      ],
      "env": {
        "log_prob_target": {
          "type": "numpy.float64",
          "contents": -0.04858735157374191,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 324,
          "function_name": "logistic_loss_function",
          "code": "text(\"To turn this into a loss, just negate it (maximize likelihood = minimize loss)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "To turn this into a loss, just negate it (maximize likelihood = minimize loss)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 325,
          "function_name": "logistic_loss_function",
          "code": "loss = -log_prob_target  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "numpy.float64",
          "contents": 0.04858735157374191,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 327,
          "function_name": "logistic_loss_function",
          "code": "text(\"Let's package it up into a function:\")  # @clear logit prob_pos prob_neg prob_target log_prob_target loss"
        }
      ],
      "env": {
        "logit": null,
        "prob_pos": null,
        "prob_neg": null,
        "prob_target": null,
        "log_prob_target": null,
        "loss": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's package it up into a function:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 328,
          "function_name": "logistic_loss_function",
          "code": "loss = logistic_loss(example, params)  # @inspect loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 328,
          "function_name": "logistic_loss_function",
          "code": "loss = logistic_loss(example, params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 343,
          "function_name": "logistic_loss",
          "code": "def logistic_loss(example: Example, params: Parameters) -> float:  # @inspect example params"
        }
      ],
      "env": {
        "example": {
          "type": "linear_classification.Example",
          "contents": {
            "x": {
              "type": "numpy.ndarray",
              "contents": [
                2,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "target_y": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 328,
          "function_name": "logistic_loss_function",
          "code": "loss = logistic_loss(example, params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 345,
          "function_name": "logistic_loss",
          "code": "logit = example.x @ params.weight + params.bias  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.int64",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 328,
          "function_name": "logistic_loss_function",
          "code": "loss = logistic_loss(example, params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 347,
          "function_name": "logistic_loss",
          "code": "margin = logit * example.target_y  # @inspect margin"
        }
      ],
      "env": {
        "margin": {
          "type": "numpy.int64",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 328,
          "function_name": "logistic_loss_function",
          "code": "loss = logistic_loss(example, params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 348,
          "function_name": "logistic_loss",
          "code": "prob_target = logistic(margin)  # @inspect prob_target @stepover"
        }
      ],
      "env": {
        "prob_target": {
          "type": "numpy.float64",
          "contents": 0.9525741268224334,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 328,
          "function_name": "logistic_loss_function",
          "code": "loss = logistic_loss(example, params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 349,
          "function_name": "logistic_loss",
          "code": "loss = -np.log(prob_target)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "numpy.float64",
          "contents": 0.04858735157374191,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 328,
          "function_name": "logistic_loss_function",
          "code": "loss = logistic_loss(example, params)  # @inspect loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 350,
          "function_name": "logistic_loss",
          "code": "return loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 328,
          "function_name": "logistic_loss_function",
          "code": "loss = logistic_loss(example, params)  # @inspect loss"
        }
      ],
      "env": {
        "loss": {
          "type": "numpy.float64",
          "contents": 0.04858735157374191,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 330,
          "function_name": "logistic_loss_function",
          "code": "text(\"Recall the zero-one loss, which has a sharp cliff at 0.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall the zero-one loss, which has a sharp cliff at 0.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 331,
          "function_name": "logistic_loss_function",
          "code": "data = make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 331,
          "function_name": "logistic_loss_function",
          "code": "data = make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0))  # @stepover"
        },
        {
          "path": "linear_classification.py",
          "line_number": 614,
          "function_name": "make_plot",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 614,
          "function_name": "<listcomp>",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 331,
          "function_name": "<lambda>",
          "code": "data = make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 331,
          "function_name": "logistic_loss_function",
          "code": "data = make_plot(\"zero-one loss\", \"margin\", \"loss\", lambda margin: int(margin <= 0))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 332,
          "function_name": "logistic_loss_function",
          "code": "plot(data)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "margin": -3.0,
                  "loss": 1
                },
                {
                  "margin": -2.793103448275862,
                  "loss": 1
                },
                {
                  "margin": -2.586206896551724,
                  "loss": 1
                },
                {
                  "margin": -2.3793103448275863,
                  "loss": 1
                },
                {
                  "margin": -2.1724137931034484,
                  "loss": 1
                },
                {
                  "margin": -1.9655172413793103,
                  "loss": 1
                },
                {
                  "margin": -1.7586206896551724,
                  "loss": 1
                },
                {
                  "margin": -1.5517241379310345,
                  "loss": 1
                },
                {
                  "margin": -1.3448275862068966,
                  "loss": 1
                },
                {
                  "margin": -1.1379310344827587,
                  "loss": 1
                },
                {
                  "margin": -0.9310344827586206,
                  "loss": 1
                },
                {
                  "margin": -0.7241379310344827,
                  "loss": 1
                },
                {
                  "margin": -0.5172413793103448,
                  "loss": 1
                },
                {
                  "margin": -0.31034482758620685,
                  "loss": 1
                },
                {
                  "margin": -0.10344827586206895,
                  "loss": 1
                },
                {
                  "margin": 0.10344827586206895,
                  "loss": 0
                },
                {
                  "margin": 0.31034482758620685,
                  "loss": 0
                },
                {
                  "margin": 0.5172413793103448,
                  "loss": 0
                },
                {
                  "margin": 0.7241379310344827,
                  "loss": 0
                },
                {
                  "margin": 0.9310344827586206,
                  "loss": 0
                },
                {
                  "margin": 1.137931034482759,
                  "loss": 0
                },
                {
                  "margin": 1.3448275862068968,
                  "loss": 0
                },
                {
                  "margin": 1.5517241379310347,
                  "loss": 0
                },
                {
                  "margin": 1.7586206896551726,
                  "loss": 0
                },
                {
                  "margin": 1.9655172413793105,
                  "loss": 0
                },
                {
                  "margin": 2.1724137931034484,
                  "loss": 0
                },
                {
                  "margin": 2.3793103448275863,
                  "loss": 0
                },
                {
                  "margin": 2.586206896551724,
                  "loss": 0
                },
                {
                  "margin": 2.793103448275862,
                  "loss": 0
                },
                {
                  "margin": 3.0,
                  "loss": 0
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "margin",
                "type": "quantitative"
              },
              "y": {
                "field": "loss",
                "type": "quantitative"
              }
            },
            "title": "zero-one loss",
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 334,
          "function_name": "logistic_loss_function",
          "code": "text(\"The logistic loss is smooth, but goes to 0 when the margin grows.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The logistic loss is smooth, but goes to 0 when the margin grows.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 335,
          "function_name": "logistic_loss_function",
          "code": "data = make_plot(\"logistic loss\", \"margin\", \"loss\", lambda margin: -np.log(logistic(margin)))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 335,
          "function_name": "logistic_loss_function",
          "code": "data = make_plot(\"logistic loss\", \"margin\", \"loss\", lambda margin: -np.log(logistic(margin)))  # @stepover"
        },
        {
          "path": "linear_classification.py",
          "line_number": 614,
          "function_name": "make_plot",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 614,
          "function_name": "<listcomp>",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 335,
          "function_name": "<lambda>",
          "code": "data = make_plot(\"logistic loss\", \"margin\", \"loss\", lambda margin: -np.log(logistic(margin)))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 335,
          "function_name": "logistic_loss_function",
          "code": "data = make_plot(\"logistic loss\", \"margin\", \"loss\", lambda margin: -np.log(logistic(margin)))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 336,
          "function_name": "logistic_loss_function",
          "code": "plot(data)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "margin": -3.0,
                  "loss": 3.048587351573742
                },
                {
                  "margin": -2.793103448275862,
                  "loss": 2.8525329014188525
                },
                {
                  "margin": -2.586206896551724,
                  "loss": 2.6588113682920387
                },
                {
                  "margin": -2.3793103448275863,
                  "loss": 2.467883726469604
                },
                {
                  "margin": -2.1724137931034484,
                  "loss": 2.280283271988165
                },
                {
                  "margin": -1.9655172413793103,
                  "loss": 2.096618668597727
                },
                {
                  "margin": -1.7586206896551724,
                  "loss": 1.9175732483999088
                },
                {
                  "margin": -1.5517241379310345,
                  "loss": 1.7438989452329245
                },
                {
                  "margin": -1.3448275862068966,
                  "loss": 1.576403193504373
                },
                {
                  "margin": -1.1379310344827587,
                  "loss": 1.4159274025707302
                },
                {
                  "margin": -0.9310344827586206,
                  "loss": 1.2633163537659575
                },
                {
                  "margin": -0.7241379310344827,
                  "loss": 1.1193791327742968
                },
                {
                  "margin": -0.5172413793103448,
                  "loss": 0.984843921303689
                },
                {
                  "margin": -0.31034482758620685,
                  "loss": 0.8603108269023831
                },
                {
                  "margin": -0.10344827586206895,
                  "loss": 0.7462084156641495
                },
                {
                  "margin": 0.10344827586206895,
                  "loss": 0.6427601398020806
                },
                {
                  "margin": 0.31034482758620685,
                  "loss": 0.5499659993161763
                },
                {
                  "margin": 0.5172413793103448,
                  "loss": 0.4676025419933442
                },
                {
                  "margin": 0.7241379310344827,
                  "loss": 0.3952412017398144
                },
                {
                  "margin": 0.9310344827586206,
                  "loss": 0.3322818710073369
                },
                {
                  "margin": 1.137931034482759,
                  "loss": 0.27799636808797157
                },
                {
                  "margin": 1.3448275862068968,
                  "loss": 0.23157560729747648
                },
                {
                  "margin": 1.5517241379310347,
                  "loss": 0.19217480730189015
                },
                {
                  "margin": 1.7586206896551726,
                  "loss": 0.15895255874473663
                },
                {
                  "margin": 1.9655172413793105,
                  "loss": 0.13110142721841633
                },
                {
                  "margin": 2.1724137931034484,
                  "loss": 0.10786947888471682
                },
                {
                  "margin": 2.3793103448275863,
                  "loss": 0.08857338164201778
                },
                {
                  "margin": 2.586206896551724,
                  "loss": 0.0726044717403146
                },
                {
                  "margin": 2.793103448275862,
                  "loss": 0.059429453142990495
                },
                {
                  "margin": 3.0,
                  "loss": 0.04858735157374191
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "margin",
                "type": "quantitative"
              },
              "y": {
                "field": "loss",
                "type": "quantitative"
              }
            },
            "title": "logistic loss",
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 338,
          "function_name": "logistic_loss_function",
          "code": "text(\"As before, the training loss is the average of the per-example losses.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "As before, the training loss is the average of the per-example losses.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 339,
          "function_name": "logistic_loss_function",
          "code": "training_data = get_training_data()  # @inspect training_data @clear example params loss @stepover"
        }
      ],
      "env": {
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        },
        "example": null,
        "params": null,
        "loss": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 340,
          "function_name": "logistic_loss_function",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 340,
          "function_name": "logistic_loss_function",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 353,
          "function_name": "train_logistic_loss",
          "code": "def train_logistic_loss(params: Parameters, training_data: list[Example]) -> float:  # @inspect params training_data"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 340,
          "function_name": "logistic_loss_function",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 354,
          "function_name": "train_logistic_loss",
          "code": "losses = [logistic_loss(example, params) for example in training_data]  # @inspect losses @stepover"
        }
      ],
      "env": {
        "losses": {
          "type": "list",
          "contents": [
            {
              "type": "numpy.float64",
              "contents": 0.6931471805599453,
              "dtype": null,
              "shape": null
            },
            {
              "type": "numpy.float64",
              "contents": 0.04858735157374191,
              "dtype": null,
              "shape": null
            },
            {
              "type": "numpy.float64",
              "contents": 1.3132616875182228,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 340,
          "function_name": "logistic_loss_function",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 355,
          "function_name": "train_logistic_loss",
          "code": "train_loss = np.mean(losses)  # @inspect train_loss"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.68499873988397,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 340,
          "function_name": "logistic_loss_function",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss"
        },
        {
          "path": "linear_classification.py",
          "line_number": 356,
          "function_name": "train_logistic_loss",
          "code": "return train_loss"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 340,
          "function_name": "logistic_loss_function",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.68499873988397,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 29,
          "function_name": "main",
          "code": "logistic_loss_function()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 359,
          "function_name": "logistic_loss_optimization",
          "code": "def logistic_loss_optimization():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 360,
          "function_name": "logistic_loss_optimization",
          "code": "text(\"Now we are ready to optimize the logistic loss.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now we are ready to optimize the logistic loss.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 362,
          "function_name": "logistic_loss_optimization",
          "code": "text(\"Let's compute the gradient of the loss for one example.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's compute the gradient of the loss for one example.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 363,
          "function_name": "logistic_loss_optimization",
          "code": "params = Parameters(weight=np.array([0, 0]), bias=0)  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 364,
          "function_name": "logistic_loss_optimization",
          "code": "example = Example(x=np.array([2, 0]), target_y=1)  # @inspect example"
        }
      ],
      "env": {
        "example": {
          "type": "linear_classification.Example",
          "contents": {
            "x": {
              "type": "numpy.ndarray",
              "contents": [
                2,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "target_y": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 365,
          "function_name": "logistic_loss_optimization",
          "code": "grad = gradient_logistic_loss(example, params)  # @inspect grad"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 365,
          "function_name": "logistic_loss_optimization",
          "code": "grad = gradient_logistic_loss(example, params)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 375,
          "function_name": "gradient_logistic_loss",
          "code": "def gradient_logistic_loss(example: Example, params: Parameters) -> Parameters:  # @inspect example params"
        }
      ],
      "env": {
        "example": {
          "type": "linear_classification.Example",
          "contents": {
            "x": {
              "type": "numpy.ndarray",
              "contents": [
                2,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "target_y": {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 365,
          "function_name": "logistic_loss_optimization",
          "code": "grad = gradient_logistic_loss(example, params)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 376,
          "function_name": "gradient_logistic_loss",
          "code": "logit = example.x @ params.weight + params.bias  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.int64",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 365,
          "function_name": "logistic_loss_optimization",
          "code": "grad = gradient_logistic_loss(example, params)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 377,
          "function_name": "gradient_logistic_loss",
          "code": "margin = logit * example.target_y  # @inspect margin"
        }
      ],
      "env": {
        "margin": {
          "type": "numpy.int64",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 365,
          "function_name": "logistic_loss_optimization",
          "code": "grad = gradient_logistic_loss(example, params)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 378,
          "function_name": "gradient_logistic_loss",
          "code": "loss = -np.log(logistic(margin))  # @inspect loss @stepover"
        }
      ],
      "env": {
        "loss": {
          "type": "numpy.float64",
          "contents": 0.6931471805599453,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 365,
          "function_name": "logistic_loss_optimization",
          "code": "grad = gradient_logistic_loss(example, params)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 379,
          "function_name": "gradient_logistic_loss",
          "code": "grad_logit = -logistic(-margin)  # @inspect grad_logit @stepover"
        }
      ],
      "env": {
        "grad_logit": {
          "type": "numpy.float64",
          "contents": -0.5,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 365,
          "function_name": "logistic_loss_optimization",
          "code": "grad = gradient_logistic_loss(example, params)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 380,
          "function_name": "gradient_logistic_loss",
          "code": "grad_weight = example.target_y * example.x * grad_logit  # @inspect grad_weight"
        }
      ],
      "env": {
        "grad_weight": {
          "type": "numpy.ndarray",
          "contents": [
            -1.0,
            -0.0
          ],
          "dtype": "float64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 365,
          "function_name": "logistic_loss_optimization",
          "code": "grad = gradient_logistic_loss(example, params)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 381,
          "function_name": "gradient_logistic_loss",
          "code": "grad_bias = example.target_y * grad_logit  # @inspect grad_bias"
        }
      ],
      "env": {
        "grad_bias": {
          "type": "numpy.float64",
          "contents": -0.5,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 365,
          "function_name": "logistic_loss_optimization",
          "code": "grad = gradient_logistic_loss(example, params)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 382,
          "function_name": "gradient_logistic_loss",
          "code": "return Parameters(weight=grad_weight, bias=grad_bias)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 365,
          "function_name": "logistic_loss_optimization",
          "code": "grad = gradient_logistic_loss(example, params)  # @inspect grad"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -1.0,
                -0.0
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.5,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 367,
          "function_name": "logistic_loss_optimization",
          "code": "text(\"Now the gradient of the training loss is the average of the gradients of the examples.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now the gradient of the training loss is the average of the gradients of the examples.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 368,
          "function_name": "logistic_loss_optimization",
          "code": "training_data = get_training_data()  # @inspect training_data @clear example grad @stepover"
        }
      ],
      "env": {
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        },
        "example": null,
        "grad": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 369,
          "function_name": "logistic_loss_optimization",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 369,
          "function_name": "logistic_loss_optimization",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 385,
          "function_name": "gradient_train_logistic_loss",
          "code": "def gradient_train_logistic_loss(params: Parameters, training_data: list[Example]) -> Parameters:  # @inspect params training_data"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        },
        "training_data": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    1,
                    2
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    2,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Example",
              "contents": {
                "x": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0,
                    0
                  ],
                  "dtype": "int64",
                  "shape": [
                    2
                  ]
                },
                "target_y": {
                  "type": "int",
                  "contents": -1,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 369,
          "function_name": "logistic_loss_optimization",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 386,
          "function_name": "gradient_train_logistic_loss",
          "code": "grads = [gradient_logistic_loss(example, params) for example in training_data]  # @inspect grads @stepover"
        }
      ],
      "env": {
        "grads": {
          "type": "list",
          "contents": [
            {
              "type": "linear_classification.Parameters",
              "contents": {
                "weight": {
                  "type": "numpy.ndarray",
                  "contents": [
                    0.5,
                    1.0
                  ],
                  "dtype": "float64",
                  "shape": [
                    2
                  ]
                },
                "bias": {
                  "type": "numpy.float64",
                  "contents": 0.5,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Parameters",
              "contents": {
                "weight": {
                  "type": "numpy.ndarray",
                  "contents": [
                    -1.0,
                    -0.0
                  ],
                  "dtype": "float64",
                  "shape": [
                    2
                  ]
                },
                "bias": {
                  "type": "numpy.float64",
                  "contents": -0.5,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            },
            {
              "type": "linear_classification.Parameters",
              "contents": {
                "weight": {
                  "type": "numpy.ndarray",
                  "contents": [
                    -0.0,
                    -0.0
                  ],
                  "dtype": "float64",
                  "shape": [
                    2
                  ]
                },
                "bias": {
                  "type": "numpy.float64",
                  "contents": 0.5,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 369,
          "function_name": "logistic_loss_optimization",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 387,
          "function_name": "gradient_train_logistic_loss",
          "code": "mean_weight = np.mean([grad.weight for grad in grads], axis=0)  # @inspect mean_weight"
        }
      ],
      "env": {
        "mean_weight": {
          "type": "numpy.ndarray",
          "contents": [
            -0.16666666666666666,
            0.3333333333333333
          ],
          "dtype": "float64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 369,
          "function_name": "logistic_loss_optimization",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 388,
          "function_name": "gradient_train_logistic_loss",
          "code": "mean_bias = np.mean([grad.bias for grad in grads])  # @inspect mean_bias"
        }
      ],
      "env": {
        "mean_bias": {
          "type": "numpy.float64",
          "contents": 0.16666666666666666,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 369,
          "function_name": "logistic_loss_optimization",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad"
        },
        {
          "path": "linear_classification.py",
          "line_number": 389,
          "function_name": "gradient_train_logistic_loss",
          "code": "return Parameters(weight=mean_weight, bias=mean_bias)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 369,
          "function_name": "logistic_loss_optimization",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.16666666666666666,
                0.3333333333333333
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.16666666666666666,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 371,
          "function_name": "logistic_loss_optimization",
          "code": "text(\"Now we can do gradient descent, which repeatedly updates the parameters in the direction of the gradient.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now we can do gradient descent, which repeatedly updates the parameters in the direction of the gradient.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 392,
          "function_name": "gradient_descent",
          "code": "def gradient_descent():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 394,
          "function_name": "gradient_descent",
          "code": "training_data = get_training_data()  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 395,
          "function_name": "gradient_descent",
          "code": "params = Parameters(weight=np.array([0, 0]), bias=0)  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 396,
          "function_name": "gradient_descent",
          "code": "learning_rate = 1"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 398,
          "function_name": "gradient_descent",
          "code": "losses = []"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.6931471805599453,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.16666666666666666,
                0.3333333333333333
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.16666666666666666,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0.16666666666666666,
                -0.3333333333333333
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.16666666666666666,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.5469780676837823,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.19253846744407252,
                0.22616242082278856
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.11308121041139428,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0.16666666666666666,
                -0.3333333333333333
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.16666666666666666,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0.3592051341107392,
                -0.5594957541561218
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.2797478770780609,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.45449484230875065,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.17429320370682758,
                0.1741599136281048
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.09989857269946388,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0.3592051341107392,
                -0.5594957541561218
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.2797478770780609,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0.5334983378175667,
                -0.7336556677842266
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.3796464497775248,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.38892516463591403,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.15244568207758968,
                0.14127235277351882
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.09449930445786046,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0.5334983378175667,
                -0.7336556677842266
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.3796464497775248,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0.6859440198951564,
                -0.8749280205577454
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.4741457542353853,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 4,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.3401004745397549,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.13407052135116837,
                0.11787852964856915
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.09031286165041236,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0.6859440198951564,
                -0.8749280205577454
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.4741457542353853,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0.8200145412463248,
                -0.9928065502063146
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.5644586158857976,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 5,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.30230704335173036,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.11937003087780433,
                0.10038684438407393
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.08625051265631982,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0.8200145412463248,
                -0.9928065502063146
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.5644586158857976,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0.9393845721241291,
                -1.0931933945903884
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.6507091285421174,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 6,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.27211798260226366,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.10755819106799451,
                0.08691181614486419
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.08222544337794115,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                0.9393845721241291,
                -1.0931933945903884
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.6507091285421174,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.0469427631921235,
                -1.1801052107352525
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.7329345719200585,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 7,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.24739098453055205,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.09791163128499776,
                0.07629112507819377
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.07830066110885368,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.0469427631921235,
                -1.1801052107352525
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.7329345719200585,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.1448543944771212,
                -1.2563963358134462
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.8112352330289122,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 8,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.22672875315349472,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.08989327128683995,
                0.06775757791922271
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.07453520467244995,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.1448543944771212,
                -1.2563963358134462
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.8112352330289122,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.234747665763961,
                -1.324153913732669
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.8857704377013622,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 9,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.20918250022208618,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.08311959006828583,
                0.06078561043898023
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.07096441796084184,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.234747665763961,
                -1.324153913732669
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.8857704377013622,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.3178672558322468,
                -1.3849395241716493
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.9567348556622041,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 10,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.19408436202087465,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.07731593493349835,
                0.05500543194760984
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.06760419291960006,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.3178672558322468,
                -1.3849395241716493
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -0.9567348556622041,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.3951831907657453,
                -1.4399449561192592
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.024339048581804,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 11,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.18094927094623184,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.07228255460245199,
                0.05015097727982063
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.06445748989856522,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.3951831907657453,
                -1.4399449561192592
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.024339048581804,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.4674657453681972,
                -1.4900959333990798
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.0887965384803693,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 12,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.16941533127164135,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.06787139498295747,
                0.04602699253916858
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.061519372569194465,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.4674657453681972,
                -1.4900959333990798
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.0887965384803693,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.5353371403511547,
                -1.5361229259382483
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.1503159110495638,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 13,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.15920627383817895,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.06397059786065726,
                0.04248761598300319
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.05878040017815057,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.5353371403511547,
                -1.5361229259382483
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.1503159110495638,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.599307738211812,
                -1.5786105419212515
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.2090963112277144,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 14,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.15010701628578063,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.06049410572258551,
                0.03942211088414822
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.05622880396828963,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.599307738211812,
                -1.5786105419212515
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.2090963112277144,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.6598018439343973,
                -1.6180326528053997
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.265325115196004,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 15,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.14194726617286865,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.0573745969493941,
                0.03674516436959752
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.05385184778153912,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.6598018439343973,
                -1.6180326528053997
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.265325115196004,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.7171764408837915,
                -1.6547778171749972
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.3191769629775432,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 16,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.13459021676799957,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.054558603067859535,
                0.03439016572814996
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.05163665922519337,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.7171764408837915,
                -1.6547778171749972
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.3191769629775432,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.771735043951651,
                -1.6891679829031472
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.3708136222027365,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 17,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.12792456185601045,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.05200307388623318,
                0.03230446768313923
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.04957072175406382,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.771735043951651,
                -1.6891679829031472
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.3708136222027365,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.8237381178378842,
                -1.7214724505862864
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.4203843439568002,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 18,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.12185873143116732,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.04967291864450527,
                0.030445991672750503
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.04764215114778241,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.8237381178378842,
                -1.7214724505862864
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.4203843439568002,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.8734110364823895,
                -1.7519184422590368
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.4680264951045827,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 19,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 400,
          "function_name": "gradient_descent",
          "code": "train_loss = train_logistic_loss(params, training_data)  # @inspect train_loss @stepover"
        }
      ],
      "env": {
        "train_loss": {
          "type": "numpy.float64",
          "contents": 0.11631664951779834,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 401,
          "function_name": "gradient_descent",
          "code": "grad = gradient_train_logistic_loss(params, training_data)  # @inspect grad @stepover"
        }
      ],
      "env": {
        "grad": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                -0.0475392162087672,
                0.028780759619936758
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": 0.045839835910307575,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.8734110364823895,
                -1.7519184422590368
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.4680264951045827,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 403,
          "function_name": "gradient_descent",
          "code": "weight=params.weight - learning_rate * grad.weight,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 404,
          "function_name": "gradient_descent",
          "code": "bias=params.bias - learning_rate * grad.bias,"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 402,
          "function_name": "gradient_descent",
          "code": "params = Parameters(  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1.9209502526911566,
                -1.7806992018789736
              ],
              "dtype": "float64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "numpy.float64",
              "contents": -1.5138663310148903,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 406,
          "function_name": "gradient_descent",
          "code": "losses.append(train_loss)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 399,
          "function_name": "gradient_descent",
          "code": "for step in range(20):  # @inspect step"
        }
      ],
      "env": {
        "step": {
          "type": "int",
          "contents": 19,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 409,
          "function_name": "gradient_descent",
          "code": "plot(Chart(Data(values=[{\"step\": i, \"loss\": loss} for i, loss in enumerate(losses)])).mark_line().encode(x=\"step:Q\", y=\"loss:Q\").to_dict())"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "data": {
              "values": [
                {
                  "step": 0,
                  "loss": 0.6931471805599453
                },
                {
                  "step": 1,
                  "loss": 0.5469780676837823
                },
                {
                  "step": 2,
                  "loss": 0.45449484230875065
                },
                {
                  "step": 3,
                  "loss": 0.38892516463591403
                },
                {
                  "step": 4,
                  "loss": 0.3401004745397549
                },
                {
                  "step": 5,
                  "loss": 0.30230704335173036
                },
                {
                  "step": 6,
                  "loss": 0.27211798260226366
                },
                {
                  "step": 7,
                  "loss": 0.24739098453055205
                },
                {
                  "step": 8,
                  "loss": 0.22672875315349472
                },
                {
                  "step": 9,
                  "loss": 0.20918250022208618
                },
                {
                  "step": 10,
                  "loss": 0.19408436202087465
                },
                {
                  "step": 11,
                  "loss": 0.18094927094623184
                },
                {
                  "step": 12,
                  "loss": 0.16941533127164135
                },
                {
                  "step": 13,
                  "loss": 0.15920627383817895
                },
                {
                  "step": 14,
                  "loss": 0.15010701628578063
                },
                {
                  "step": 15,
                  "loss": 0.14194726617286865
                },
                {
                  "step": 16,
                  "loss": 0.13459021676799957
                },
                {
                  "step": 17,
                  "loss": 0.12792456185601045
                },
                {
                  "step": 18,
                  "loss": 0.12185873143116732
                },
                {
                  "step": 19,
                  "loss": 0.11631664951779834
                }
              ]
            },
            "mark": {
              "type": "line"
            },
            "encoding": {
              "x": {
                "field": "step",
                "type": "quantitative"
              },
              "y": {
                "field": "loss",
                "type": "quantitative"
              }
            },
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 411,
          "function_name": "gradient_descent",
          "code": "text(\"Plot the decision boundary:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Plot the decision boundary:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 412,
          "function_name": "gradient_descent",
          "code": "points = [example_to_point(example) for example in training_data]  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 413,
          "function_name": "gradient_descent",
          "code": "plot(make_plot(\"decision boundary\", \"x0\", \"x1\", lambda x0: -(params.weight[0] * x0 + params.bias) / params.weight[1], points=points))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 413,
          "function_name": "gradient_descent",
          "code": "plot(make_plot(\"decision boundary\", \"x0\", \"x1\", lambda x0: -(params.weight[0] * x0 + params.bias) / params.weight[1], points=points))  # @stepover"
        },
        {
          "path": "linear_classification.py",
          "line_number": 614,
          "function_name": "make_plot",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 614,
          "function_name": "<listcomp>",
          "code": "values = [{xlabel: x, ylabel: f(x)} for x in np.linspace(xrange[0], xrange[1], 30)]"
        },
        {
          "path": "linear_classification.py",
          "line_number": 413,
          "function_name": "<lambda>",
          "code": "plot(make_plot(\"decision boundary\", \"x0\", \"x1\", lambda x0: -(params.weight[0] * x0 + params.bias) / params.weight[1], points=points))  # @stepover"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 413,
          "function_name": "gradient_descent",
          "code": "plot(make_plot(\"decision boundary\", \"x0\", \"x1\", lambda x0: -(params.weight[0] * x0 + params.bias) / params.weight[1], points=points))  # @stepover"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "plot",
          "data": {
            "config": {
              "view": {
                "continuousWidth": 300,
                "continuousHeight": 300
              }
            },
            "layer": [
              {
                "data": {
                  "values": [
                    {
                      "x0": -3.0,
                      "x1": -4.086438114539531
                    },
                    {
                      "x0": -2.793103448275862,
                      "x1": -3.863246020728268
                    },
                    {
                      "x0": -2.586206896551724,
                      "x1": -3.6400539269170062
                    },
                    {
                      "x0": -2.3793103448275863,
                      "x1": -3.4168618331057443
                    },
                    {
                      "x0": -2.1724137931034484,
                      "x1": -3.1936697392944815
                    },
                    {
                      "x0": -1.9655172413793103,
                      "x1": -2.970477645483219
                    },
                    {
                      "x0": -1.7586206896551724,
                      "x1": -2.747285551671957
                    },
                    {
                      "x0": -1.5517241379310345,
                      "x1": -2.524093457860695
                    },
                    {
                      "x0": -1.3448275862068966,
                      "x1": -2.300901364049433
                    },
                    {
                      "x0": -1.1379310344827587,
                      "x1": -2.0777092702381705
                    },
                    {
                      "x0": -0.9310344827586206,
                      "x1": -1.854517176426908
                    },
                    {
                      "x0": -0.7241379310344827,
                      "x1": -1.6313250826156458
                    },
                    {
                      "x0": -0.5172413793103448,
                      "x1": -1.4081329888043836
                    },
                    {
                      "x0": -0.31034482758620685,
                      "x1": -1.1849408949931213
                    },
                    {
                      "x0": -0.10344827586206895,
                      "x1": -0.9617488011818591
                    },
                    {
                      "x0": 0.10344827586206895,
                      "x1": -0.7385567073705969
                    },
                    {
                      "x0": 0.31034482758620685,
                      "x1": -0.5153646135593346
                    },
                    {
                      "x0": 0.5172413793103448,
                      "x1": -0.2921725197480724
                    },
                    {
                      "x0": 0.7241379310344827,
                      "x1": -0.06898042593681014
                    },
                    {
                      "x0": 0.9310344827586206,
                      "x1": 0.15421166787445206
                    },
                    {
                      "x0": 1.137931034482759,
                      "x1": 0.3774037616857149
                    },
                    {
                      "x0": 1.3448275862068968,
                      "x1": 0.6005958554969769
                    },
                    {
                      "x0": 1.5517241379310347,
                      "x1": 0.8237879493082393
                    },
                    {
                      "x0": 1.7586206896551726,
                      "x1": 1.0469800431195015
                    },
                    {
                      "x0": 1.9655172413793105,
                      "x1": 1.2701721369307637
                    },
                    {
                      "x0": 2.1724137931034484,
                      "x1": 1.4933642307420256
                    },
                    {
                      "x0": 2.3793103448275863,
                      "x1": 1.7165563245532882
                    },
                    {
                      "x0": 2.586206896551724,
                      "x1": 1.9397484183645504
                    },
                    {
                      "x0": 2.793103448275862,
                      "x1": 2.1629405121758123
                    },
                    {
                      "x0": 3.0,
                      "x1": 2.386132605987075
                    }
                  ]
                },
                "mark": {
                  "type": "line"
                },
                "encoding": {
                  "x": {
                    "field": "x0",
                    "type": "quantitative"
                  },
                  "y": {
                    "field": "x1",
                    "type": "quantitative"
                  }
                },
                "title": "decision boundary"
              },
              {
                "data": {
                  "values": [
                    {
                      "x0": 1.0,
                      "x1": 2.0,
                      "color": "blue"
                    },
                    {
                      "x0": 2.0,
                      "x1": 0.0,
                      "color": "red"
                    },
                    {
                      "x0": 0.0,
                      "x1": 0.0,
                      "color": "blue"
                    }
                  ]
                },
                "mark": {
                  "type": "point"
                },
                "encoding": {
                  "color": {
                    "field": "color",
                    "type": "nominal"
                  },
                  "x": {
                    "field": "x0",
                    "type": "quantitative"
                  },
                  "y": {
                    "field": "x1",
                    "type": "quantitative"
                  }
                }
              }
            ],
            "$schema": "https://vega.github.io/schema/vega-lite/v5.20.1.json"
          },
          "style": null,
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 372,
          "function_name": "logistic_loss_optimization",
          "code": "gradient_descent()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 30,
          "function_name": "main",
          "code": "logistic_loss_optimization()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 416,
          "function_name": "multiclass_classification",
          "code": "def multiclass_classification():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 417,
          "function_name": "multiclass_classification",
          "code": "text(\"Binary classification (output y \u2208 {-1, 1})\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Binary classification (output y \u2208 {-1, 1})",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 418,
          "function_name": "multiclass_classification",
          "code": "text(\"Multiclass classification (output y \u2208 {0, 1, ..., K-1})\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Multiclass classification (output y \u2208 {0, 1, ..., K-1})",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 420,
          "function_name": "multiclass_classification",
          "code": "text(\"For binary classification, we compute a single logit for each input.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "For binary classification, we compute a single logit for each input.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 421,
          "function_name": "multiclass_classification",
          "code": "text(\"Sign of logit is the predicted class\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Sign of logit is the predicted class",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 422,
          "function_name": "multiclass_classification",
          "code": "x = np.array([2, 0])  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            2,
            0
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 423,
          "function_name": "multiclass_classification",
          "code": "params = Parameters(weight=np.array([1, -1]), bias=-1)  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                -1
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "bias": {
              "type": "int",
              "contents": -1,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 424,
          "function_name": "multiclass_classification",
          "code": "logit = x @ params.weight + params.bias  # @inspect logit"
        }
      ],
      "env": {
        "logit": {
          "type": "numpy.int64",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 425,
          "function_name": "multiclass_classification",
          "code": "prob_pos = logistic(logit)  # @inspect prob_pos @stepover"
        }
      ],
      "env": {
        "prob_pos": {
          "type": "numpy.float64",
          "contents": 0.7310585786300049,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 426,
          "function_name": "multiclass_classification",
          "code": "prob_neg = 1 - prob_pos  # @inspect prob_neg"
        }
      ],
      "env": {
        "prob_neg": {
          "type": "numpy.float64",
          "contents": 0.2689414213699951,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 428,
          "function_name": "multiclass_classification",
          "code": "text(\"For multiclass classification\")  # @clear prob_pos prob_neg x params logit"
        }
      ],
      "env": {
        "prob_pos": null,
        "prob_neg": null,
        "x": null,
        "params": null,
        "logit": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "For multiclass classification",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 429,
          "function_name": "multiclass_classification",
          "code": "text(\"- Define a weight vector for each class\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Define a weight vector for each class",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 430,
          "function_name": "multiclass_classification",
          "code": "text(\"- Compute a logit for each class\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Compute a logit for each class",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 431,
          "function_name": "multiclass_classification",
          "code": "text(\"- Predict a distribution over classes\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Predict a distribution over classes",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 432,
          "function_name": "multiclass_classification",
          "code": "params = Parameters(weight=np.array([[1, -1], [1, -1], [0, 2]]), bias=np.array([1, 1, 0]))  # @inspect params"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                [
                  1,
                  -1
                ],
                [
                  1,
                  -1
                ],
                [
                  0,
                  2
                ]
              ],
              "dtype": "int64",
              "shape": [
                3,
                2
              ]
            },
            "bias": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                1,
                0
              ],
              "dtype": "int64",
              "shape": [
                3
              ]
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 433,
          "function_name": "multiclass_classification",
          "code": "x = np.array([2, 0])  # @inspect x"
        }
      ],
      "env": {
        "x": {
          "type": "numpy.ndarray",
          "contents": [
            2,
            0
          ],
          "dtype": "int64",
          "shape": [
            2
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 434,
          "function_name": "multiclass_classification",
          "code": "logits = params.weight @ x + params.bias  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "numpy.ndarray",
          "contents": [
            3,
            3,
            0
          ],
          "dtype": "int64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 435,
          "function_name": "multiclass_classification",
          "code": "text(\"How do I turn logits into probabilities?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "How do I turn logits into probabilities?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 453,
          "function_name": "introduce_softmax",
          "code": "def introduce_softmax():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 454,
          "function_name": "introduce_softmax",
          "code": "text(\"Recall: the logistic function maps (-\u221e, +\u221e) to (0, 1)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Recall: the logistic function maps (-\u221e, +\u221e) to (0, 1)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 456,
          "function_name": "introduce_softmax",
          "code": "text(\"The softmax function generalizes this to multiple classes.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The softmax function generalizes this to multiple classes.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 458,
          "function_name": "introduce_softmax",
          "code": "logits = np.array([1, -1, 0])  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            -1,
            0
          ],
          "dtype": "int64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 459,
          "function_name": "introduce_softmax",
          "code": "probs = softmax(logits)  # @inspect softmax_logits"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 459,
          "function_name": "introduce_softmax",
          "code": "probs = softmax(logits)  # @inspect softmax_logits"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "softmax",
          "code": "def softmax(logits: np.ndarray) -> np.ndarray:  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            -1,
            0
          ],
          "dtype": "int64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 459,
          "function_name": "introduce_softmax",
          "code": "probs = softmax(logits)  # @inspect softmax_logits"
        },
        {
          "path": "linear_classification.py",
          "line_number": 470,
          "function_name": "softmax",
          "code": "exp_logits = np.exp(logits)  # @inspect exp_logits"
        }
      ],
      "env": {
        "exp_logits": {
          "type": "numpy.ndarray",
          "contents": [
            2.718281828459045,
            0.36787944117144233,
            1.0
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 459,
          "function_name": "introduce_softmax",
          "code": "probs = softmax(logits)  # @inspect softmax_logits"
        },
        {
          "path": "linear_classification.py",
          "line_number": 471,
          "function_name": "softmax",
          "code": "probs = exp_logits / np.sum(exp_logits)  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "type": "numpy.ndarray",
          "contents": [
            0.6652409557748219,
            0.09003057317038046,
            0.24472847105479767
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 459,
          "function_name": "introduce_softmax",
          "code": "probs = softmax(logits)  # @inspect softmax_logits"
        },
        {
          "path": "linear_classification.py",
          "line_number": 472,
          "function_name": "softmax",
          "code": "return probs"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 459,
          "function_name": "introduce_softmax",
          "code": "probs = softmax(logits)  # @inspect softmax_logits"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 461,
          "function_name": "introduce_softmax",
          "code": "text(\"Shifting up logits doesn't change the relative probabilities\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Shifting up logits doesn't change the relative probabilities",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 462,
          "function_name": "introduce_softmax",
          "code": "logits1 = np.array([1, -1, 0])  # @inspect logits1"
        }
      ],
      "env": {
        "logits1": {
          "type": "numpy.ndarray",
          "contents": [
            1,
            -1,
            0
          ],
          "dtype": "int64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 463,
          "function_name": "introduce_softmax",
          "code": "probs1 = softmax(logits1)  # @inspect probs1 @stepover"
        }
      ],
      "env": {
        "probs1": {
          "type": "numpy.ndarray",
          "contents": [
            0.6652409557748219,
            0.09003057317038046,
            0.24472847105479767
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 464,
          "function_name": "introduce_softmax",
          "code": "logits2 = np.array(logits1 + 2)  # @inspect logits2"
        }
      ],
      "env": {
        "logits2": {
          "type": "numpy.ndarray",
          "contents": [
            3,
            1,
            2
          ],
          "dtype": "int64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 465,
          "function_name": "introduce_softmax",
          "code": "probs2 = softmax(logits2)  # @inspect probs2 @stepover"
        }
      ],
      "env": {
        "probs2": {
          "type": "numpy.ndarray",
          "contents": [
            0.6652409557748219,
            0.09003057317038046,
            0.24472847105479767
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 466,
          "function_name": "introduce_softmax",
          "code": "assert np.allclose(probs1, probs2)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 436,
          "function_name": "multiclass_classification",
          "code": "introduce_softmax()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 437,
          "function_name": "multiclass_classification",
          "code": "probs = softmax(logits)  # @inspect probs"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 437,
          "function_name": "multiclass_classification",
          "code": "probs = softmax(logits)  # @inspect probs"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "softmax",
          "code": "def softmax(logits: np.ndarray) -> np.ndarray:  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "numpy.ndarray",
          "contents": [
            3,
            3,
            0
          ],
          "dtype": "int64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 437,
          "function_name": "multiclass_classification",
          "code": "probs = softmax(logits)  # @inspect probs"
        },
        {
          "path": "linear_classification.py",
          "line_number": 470,
          "function_name": "softmax",
          "code": "exp_logits = np.exp(logits)  # @inspect exp_logits"
        }
      ],
      "env": {
        "exp_logits": {
          "type": "numpy.ndarray",
          "contents": [
            20.085536923187668,
            20.085536923187668,
            1.0
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 437,
          "function_name": "multiclass_classification",
          "code": "probs = softmax(logits)  # @inspect probs"
        },
        {
          "path": "linear_classification.py",
          "line_number": 471,
          "function_name": "softmax",
          "code": "probs = exp_logits / np.sum(exp_logits)  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "type": "numpy.ndarray",
          "contents": [
            0.4878555511603684,
            0.4878555511603684,
            0.024288897679263205
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 437,
          "function_name": "multiclass_classification",
          "code": "probs = softmax(logits)  # @inspect probs"
        },
        {
          "path": "linear_classification.py",
          "line_number": 472,
          "function_name": "softmax",
          "code": "return probs"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 437,
          "function_name": "multiclass_classification",
          "code": "probs = softmax(logits)  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "type": "numpy.ndarray",
          "contents": [
            0.4878555511603684,
            0.4878555511603684,
            0.024288897679263205
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 439,
          "function_name": "multiclass_classification",
          "code": "text(\"Now let us define the cross entropy loss.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now let us define the cross entropy loss.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 440,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 440,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 483,
          "function_name": "introduce_cross_entropy",
          "code": "def introduce_cross_entropy():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 440,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 484,
          "function_name": "introduce_cross_entropy",
          "code": "text(\"Cross entropy: measures the difference between a target distribution and a predicted distribution\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Cross entropy: measures the difference between a target distribution and a predicted distribution",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 440,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 485,
          "function_name": "introduce_cross_entropy",
          "code": "target = np.array([0.5, 0.2, 0.3])  # @inspect target"
        }
      ],
      "env": {
        "target": {
          "type": "numpy.ndarray",
          "contents": [
            0.5,
            0.2,
            0.3
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 440,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 486,
          "function_name": "introduce_cross_entropy",
          "code": "predicted = np.array([0.1, 0.5, 0.4])  # @inspect predicted"
        }
      ],
      "env": {
        "predicted": {
          "type": "numpy.ndarray",
          "contents": [
            0.1,
            0.5,
            0.4
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 440,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 488,
          "function_name": "introduce_cross_entropy",
          "code": "text(\"Penalized when target puts high probability on outcome, and predicted puts low probability on it.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Penalized when target puts high probability on outcome, and predicted puts low probability on it.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 440,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 489,
          "function_name": "introduce_cross_entropy",
          "code": "terms = target * -np.log(predicted)  # @inspect terms"
        }
      ],
      "env": {
        "terms": {
          "type": "numpy.ndarray",
          "contents": [
            1.1512925464970227,
            0.13862943611198905,
            0.2748872195622465
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 440,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 490,
          "function_name": "introduce_cross_entropy",
          "code": "cross_entropy = np.sum(terms)  # @inspect cross_entropy"
        }
      ],
      "env": {
        "cross_entropy": {
          "type": "numpy.float64",
          "contents": 1.5648092021712583,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 440,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 492,
          "function_name": "introduce_cross_entropy",
          "code": "text(\"Cross entropy is minimized when target = predicted\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Cross entropy is minimized when target = predicted",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 440,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 493,
          "function_name": "introduce_cross_entropy",
          "code": "text(\"... and the cross entropy is entropy of target (or predicted).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "... and the cross entropy is entropy of target (or predicted).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 440,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 495,
          "function_name": "introduce_cross_entropy",
          "code": "text(\"Special case: target is a single label (represented as a one-hot vector)\") # @clear target predicted terms cross_entropy"
        }
      ],
      "env": {
        "target": null,
        "predicted": null,
        "terms": null,
        "cross_entropy": null
      },
      "renderings": [
        {
          "type": "markdown",
          "data": "Special case: target is a single label (represented as a one-hot vector)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 440,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 496,
          "function_name": "introduce_cross_entropy",
          "code": "target = np.array([0, 1, 0])  # @inspect target"
        }
      ],
      "env": {
        "target": {
          "type": "numpy.ndarray",
          "contents": [
            0,
            1,
            0
          ],
          "dtype": "int64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 440,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 497,
          "function_name": "introduce_cross_entropy",
          "code": "predicted = np.array([0.1, 0.5, 0.4])  # @inspect predicted"
        }
      ],
      "env": {
        "predicted": {
          "type": "numpy.ndarray",
          "contents": [
            0.1,
            0.5,
            0.4
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 440,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 498,
          "function_name": "introduce_cross_entropy",
          "code": "terms = target * -np.log(predicted)  # @inspect terms"
        }
      ],
      "env": {
        "terms": {
          "type": "numpy.ndarray",
          "contents": [
            0.0,
            0.6931471805599453,
            0.0
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 440,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 499,
          "function_name": "introduce_cross_entropy",
          "code": "cross_entropy = np.sum(terms)  # @inspect cross_entropy"
        }
      ],
      "env": {
        "cross_entropy": {
          "type": "numpy.float64",
          "contents": 0.6931471805599453,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 440,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 500,
          "function_name": "introduce_cross_entropy",
          "code": "text(\"This is the same as the negative log probability of the target class.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This is the same as the negative log probability of the target class.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 440,
          "function_name": "multiclass_classification",
          "code": "introduce_cross_entropy()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 442,
          "function_name": "multiclass_classification",
          "code": "text(\"Now we can compute the cross entropy loss for an example:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now we can compute the cross entropy loss for an example:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 443,
          "function_name": "multiclass_classification",
          "code": "example = Example(x=x, target_y=0)  # @inspect example"
        }
      ],
      "env": {
        "example": {
          "type": "linear_classification.Example",
          "contents": {
            "x": {
              "type": "numpy.ndarray",
              "contents": [
                2,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "target_y": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 444,
          "function_name": "multiclass_classification",
          "code": "cross_entropy = cross_entropy_loss(params, example)  # @inspect cross_entropy"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 444,
          "function_name": "multiclass_classification",
          "code": "cross_entropy = cross_entropy_loss(params, example)  # @inspect cross_entropy"
        },
        {
          "path": "linear_classification.py",
          "line_number": 475,
          "function_name": "cross_entropy_loss",
          "code": "def cross_entropy_loss(params: Parameters, example: Example) -> float:  # @inspect params example"
        }
      ],
      "env": {
        "params": {
          "type": "linear_classification.Parameters",
          "contents": {
            "weight": {
              "type": "numpy.ndarray",
              "contents": [
                [
                  1,
                  -1
                ],
                [
                  1,
                  -1
                ],
                [
                  0,
                  2
                ]
              ],
              "dtype": "int64",
              "shape": [
                3,
                2
              ]
            },
            "bias": {
              "type": "numpy.ndarray",
              "contents": [
                1,
                1,
                0
              ],
              "dtype": "int64",
              "shape": [
                3
              ]
            }
          },
          "dtype": null,
          "shape": null
        },
        "example": {
          "type": "linear_classification.Example",
          "contents": {
            "x": {
              "type": "numpy.ndarray",
              "contents": [
                2,
                0
              ],
              "dtype": "int64",
              "shape": [
                2
              ]
            },
            "target_y": {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 444,
          "function_name": "multiclass_classification",
          "code": "cross_entropy = cross_entropy_loss(params, example)  # @inspect cross_entropy"
        },
        {
          "path": "linear_classification.py",
          "line_number": 476,
          "function_name": "cross_entropy_loss",
          "code": "num_classes = len(params.weight)  # @inspect num_classes"
        }
      ],
      "env": {
        "num_classes": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 444,
          "function_name": "multiclass_classification",
          "code": "cross_entropy = cross_entropy_loss(params, example)  # @inspect cross_entropy"
        },
        {
          "path": "linear_classification.py",
          "line_number": 477,
          "function_name": "cross_entropy_loss",
          "code": "logits = [example.x @ params.weight[y] + params.bias[y] for y in range(num_classes)]  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "list",
          "contents": [
            {
              "type": "numpy.int64",
              "contents": 3,
              "dtype": null,
              "shape": null
            },
            {
              "type": "numpy.int64",
              "contents": 3,
              "dtype": null,
              "shape": null
            },
            {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 444,
          "function_name": "multiclass_classification",
          "code": "cross_entropy = cross_entropy_loss(params, example)  # @inspect cross_entropy"
        },
        {
          "path": "linear_classification.py",
          "line_number": 478,
          "function_name": "cross_entropy_loss",
          "code": "probs = softmax(logits)  # @inspect probs"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 444,
          "function_name": "multiclass_classification",
          "code": "cross_entropy = cross_entropy_loss(params, example)  # @inspect cross_entropy"
        },
        {
          "path": "linear_classification.py",
          "line_number": 478,
          "function_name": "cross_entropy_loss",
          "code": "probs = softmax(logits)  # @inspect probs"
        },
        {
          "path": "linear_classification.py",
          "line_number": 469,
          "function_name": "softmax",
          "code": "def softmax(logits: np.ndarray) -> np.ndarray:  # @inspect logits"
        }
      ],
      "env": {
        "logits": {
          "type": "list",
          "contents": [
            {
              "type": "numpy.int64",
              "contents": 3,
              "dtype": null,
              "shape": null
            },
            {
              "type": "numpy.int64",
              "contents": 3,
              "dtype": null,
              "shape": null
            },
            {
              "type": "numpy.int64",
              "contents": 0,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 444,
          "function_name": "multiclass_classification",
          "code": "cross_entropy = cross_entropy_loss(params, example)  # @inspect cross_entropy"
        },
        {
          "path": "linear_classification.py",
          "line_number": 478,
          "function_name": "cross_entropy_loss",
          "code": "probs = softmax(logits)  # @inspect probs"
        },
        {
          "path": "linear_classification.py",
          "line_number": 470,
          "function_name": "softmax",
          "code": "exp_logits = np.exp(logits)  # @inspect exp_logits"
        }
      ],
      "env": {
        "exp_logits": {
          "type": "numpy.ndarray",
          "contents": [
            20.085536923187668,
            20.085536923187668,
            1.0
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 444,
          "function_name": "multiclass_classification",
          "code": "cross_entropy = cross_entropy_loss(params, example)  # @inspect cross_entropy"
        },
        {
          "path": "linear_classification.py",
          "line_number": 478,
          "function_name": "cross_entropy_loss",
          "code": "probs = softmax(logits)  # @inspect probs"
        },
        {
          "path": "linear_classification.py",
          "line_number": 471,
          "function_name": "softmax",
          "code": "probs = exp_logits / np.sum(exp_logits)  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "type": "numpy.ndarray",
          "contents": [
            0.4878555511603684,
            0.4878555511603684,
            0.024288897679263205
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 444,
          "function_name": "multiclass_classification",
          "code": "cross_entropy = cross_entropy_loss(params, example)  # @inspect cross_entropy"
        },
        {
          "path": "linear_classification.py",
          "line_number": 478,
          "function_name": "cross_entropy_loss",
          "code": "probs = softmax(logits)  # @inspect probs"
        },
        {
          "path": "linear_classification.py",
          "line_number": 472,
          "function_name": "softmax",
          "code": "return probs"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 444,
          "function_name": "multiclass_classification",
          "code": "cross_entropy = cross_entropy_loss(params, example)  # @inspect cross_entropy"
        },
        {
          "path": "linear_classification.py",
          "line_number": 478,
          "function_name": "cross_entropy_loss",
          "code": "probs = softmax(logits)  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "type": "numpy.ndarray",
          "contents": [
            0.4878555511603684,
            0.4878555511603684,
            0.024288897679263205
          ],
          "dtype": "float64",
          "shape": [
            3
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 444,
          "function_name": "multiclass_classification",
          "code": "cross_entropy = cross_entropy_loss(params, example)  # @inspect cross_entropy"
        },
        {
          "path": "linear_classification.py",
          "line_number": 479,
          "function_name": "cross_entropy_loss",
          "code": "cross_entropy = -np.log(probs[example.target_y])  # @inspect cross_entropy"
        }
      ],
      "env": {
        "cross_entropy": {
          "type": "numpy.float64",
          "contents": 0.7177359186667026,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 444,
          "function_name": "multiclass_classification",
          "code": "cross_entropy = cross_entropy_loss(params, example)  # @inspect cross_entropy"
        },
        {
          "path": "linear_classification.py",
          "line_number": 480,
          "function_name": "cross_entropy_loss",
          "code": "return cross_entropy"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 444,
          "function_name": "multiclass_classification",
          "code": "cross_entropy = cross_entropy_loss(params, example)  # @inspect cross_entropy"
        }
      ],
      "env": {
        "cross_entropy": {
          "type": "numpy.float64",
          "contents": 0.7177359186667026,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 445,
          "function_name": "multiclass_classification",
          "code": "text(\"Given this loss, we can perform gradient descent to optimize the parameters.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Given this loss, we can perform gradient descent to optimize the parameters.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 447,
          "function_name": "multiclass_classification",
          "code": "text(\"Summary\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 448,
          "function_name": "multiclass_classification",
          "code": "text(\"- Softmax: turn logits into probabilities\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Softmax: turn logits into probabilities",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 449,
          "function_name": "multiclass_classification",
          "code": "text(\"- Cross entropy: measures difference between target distribution and predicted distribution\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Cross entropy: measures difference between target distribution and predicted distribution",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 450,
          "function_name": "multiclass_classification",
          "code": "text(\"- Cross entropy loss: generalizes logistic loss, predicted probability of target class\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Cross entropy loss: generalizes logistic loss, predicted probability of target class",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 32,
          "function_name": "main",
          "code": "multiclass_classification()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 503,
          "function_name": "representing_text",
          "code": "def representing_text():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 504,
          "function_name": "representing_text",
          "code": "text(\"Prediction tasks involve text(strings), but machine learning operates on tensors.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Prediction tasks involve text(strings), but machine learning operates on tensors.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 506,
          "function_name": "representing_text",
          "code": "string = \"the cat in the hat\""
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 508,
          "function_name": "representing_text",
          "code": "text(\"How do we represent a string as a tensor?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "How do we represent a string as a tensor?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 509,
          "function_name": "representing_text",
          "code": "text(\"1. Tokenization: convert a string into a sequence of integers.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "1. Tokenization: convert a string into a sequence of integers.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 510,
          "function_name": "representing_text",
          "code": "text(\"2. Represent each integer as a one-hot vector.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "2. Represent each integer as a one-hot vector.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 556,
          "function_name": "tokenization",
          "code": "def tokenization():"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 557,
          "function_name": "tokenization",
          "code": "string = \"the cat in the hat\""
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 560,
          "function_name": "tokenization",
          "code": "text(\"Split a string by space into words and convert them into integers.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Split a string by space into words and convert them into integers.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 561,
          "function_name": "tokenization",
          "code": "vocab = Vocabulary()  # @inspect vocab"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 561,
          "function_name": "tokenization",
          "code": "vocab = Vocabulary()  # @inspect vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 576,
          "function_name": "__init__",
          "code": "def __init__(self):"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 561,
          "function_name": "tokenization",
          "code": "vocab = Vocabulary()  # @inspect vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 577,
          "function_name": "__init__",
          "code": "self.index_to_string: list[str] = []"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 561,
          "function_name": "tokenization",
          "code": "vocab = Vocabulary()  # @inspect vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 578,
          "function_name": "__init__",
          "code": "self.string_to_index: dict[str, int] = {}"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 561,
          "function_name": "tokenization",
          "code": "vocab = Vocabulary()  # @inspect vocab"
        }
      ],
      "env": {
        "vocab": {
          "type": "linear_classification.Vocabulary",
          "contents": {
            "index_to_string": {
              "type": "list",
              "contents": [],
              "dtype": null,
              "shape": null
            },
            "string_to_index": {
              "type": "dict",
              "contents": {},
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 562,
          "function_name": "tokenization",
          "code": "words = string.split()  # @inspect words"
        }
      ],
      "env": {
        "words": {
          "type": "list",
          "contents": [
            {
              "type": "str",
              "contents": "the",
              "dtype": null,
              "shape": null
            },
            {
              "type": "str",
              "contents": "cat",
              "dtype": null,
              "shape": null
            },
            {
              "type": "str",
              "contents": "in",
              "dtype": null,
              "shape": null
            },
            {
              "type": "str",
              "contents": "the",
              "dtype": null,
              "shape": null
            },
            {
              "type": "str",
              "contents": "hat",
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 580,
          "function_name": "get_index",
          "code": "def get_index(self, string: str) -> int:  # @inspect string"
        }
      ],
      "env": {
        "string": {
          "type": "str",
          "contents": "the",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 581,
          "function_name": "get_index",
          "code": "index = self.string_to_index.get(string)  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "NoneType",
          "contents": "None",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 582,
          "function_name": "get_index",
          "code": "if index is None:  # New string"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 583,
          "function_name": "get_index",
          "code": "index = len(self.index_to_string)  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 584,
          "function_name": "get_index",
          "code": "self.index_to_string.append(string)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 585,
          "function_name": "get_index",
          "code": "self.string_to_index[string] = index"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 586,
          "function_name": "get_index",
          "code": "return index"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 580,
          "function_name": "get_index",
          "code": "def get_index(self, string: str) -> int:  # @inspect string"
        }
      ],
      "env": {
        "string": {
          "type": "str",
          "contents": "cat",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 581,
          "function_name": "get_index",
          "code": "index = self.string_to_index.get(string)  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "NoneType",
          "contents": "None",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 582,
          "function_name": "get_index",
          "code": "if index is None:  # New string"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 583,
          "function_name": "get_index",
          "code": "index = len(self.index_to_string)  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "int",
          "contents": 1,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 584,
          "function_name": "get_index",
          "code": "self.index_to_string.append(string)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 585,
          "function_name": "get_index",
          "code": "self.string_to_index[string] = index"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 586,
          "function_name": "get_index",
          "code": "return index"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 580,
          "function_name": "get_index",
          "code": "def get_index(self, string: str) -> int:  # @inspect string"
        }
      ],
      "env": {
        "string": {
          "type": "str",
          "contents": "in",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 581,
          "function_name": "get_index",
          "code": "index = self.string_to_index.get(string)  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "NoneType",
          "contents": "None",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 582,
          "function_name": "get_index",
          "code": "if index is None:  # New string"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 583,
          "function_name": "get_index",
          "code": "index = len(self.index_to_string)  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "int",
          "contents": 2,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 584,
          "function_name": "get_index",
          "code": "self.index_to_string.append(string)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 585,
          "function_name": "get_index",
          "code": "self.string_to_index[string] = index"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 586,
          "function_name": "get_index",
          "code": "return index"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 580,
          "function_name": "get_index",
          "code": "def get_index(self, string: str) -> int:  # @inspect string"
        }
      ],
      "env": {
        "string": {
          "type": "str",
          "contents": "the",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 581,
          "function_name": "get_index",
          "code": "index = self.string_to_index.get(string)  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "int",
          "contents": 0,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 582,
          "function_name": "get_index",
          "code": "if index is None:  # New string"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 586,
          "function_name": "get_index",
          "code": "return index"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 580,
          "function_name": "get_index",
          "code": "def get_index(self, string: str) -> int:  # @inspect string"
        }
      ],
      "env": {
        "string": {
          "type": "str",
          "contents": "hat",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 581,
          "function_name": "get_index",
          "code": "index = self.string_to_index.get(string)  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "NoneType",
          "contents": "None",
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 582,
          "function_name": "get_index",
          "code": "if index is None:  # New string"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 583,
          "function_name": "get_index",
          "code": "index = len(self.index_to_string)  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 584,
          "function_name": "get_index",
          "code": "self.index_to_string.append(string)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 585,
          "function_name": "get_index",
          "code": "self.string_to_index[string] = index"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "<listcomp>",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        },
        {
          "path": "linear_classification.py",
          "line_number": 586,
          "function_name": "get_index",
          "code": "return index"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 563,
          "function_name": "tokenization",
          "code": "indices = [vocab.get_index(word) for word in words]  # @inspect indices vocab"
        }
      ],
      "env": {
        "indices": {
          "type": "list",
          "contents": [
            {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 2,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 3,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        },
        "vocab": {
          "type": "linear_classification.Vocabulary",
          "contents": {
            "index_to_string": {
              "type": "list",
              "contents": [
                {
                  "type": "str",
                  "contents": "the",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "str",
                  "contents": "cat",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "str",
                  "contents": "in",
                  "dtype": null,
                  "shape": null
                },
                {
                  "type": "str",
                  "contents": "hat",
                  "dtype": null,
                  "shape": null
                }
              ],
              "dtype": null,
              "shape": null
            },
            "string_to_index": {
              "type": "dict",
              "contents": {
                "the": {
                  "type": "int",
                  "contents": 0,
                  "dtype": null,
                  "shape": null
                },
                "cat": {
                  "type": "int",
                  "contents": 1,
                  "dtype": null,
                  "shape": null
                },
                "in": {
                  "type": "int",
                  "contents": 2,
                  "dtype": null,
                  "shape": null
                },
                "hat": {
                  "type": "int",
                  "contents": 3,
                  "dtype": null,
                  "shape": null
                }
              },
              "dtype": null,
              "shape": null
            }
          },
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 566,
          "function_name": "tokenization",
          "code": "text(\"Language models use more sophisticated tokenizers (Byte-Pair Encoding) \"), link(\"https://arxiv.org/pdf/1508.07909\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Language models use more sophisticated tokenizers (Byte-Pair Encoding) ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "Neural Machine Translation of Rare Words with Subword Units",
            "authors": [
              "Rico Sennrich",
              "Barry Haddow",
              "Alexandra Birch"
            ],
            "organization": null,
            "date": "2015-08-31T16:37:31Z",
            "url": "https://arxiv.org/pdf/1508.07909",
            "description": "Neural machine translation (NMT) models typically operate with a fixed vocabulary, but translation is an open-vocabulary problem. Previous work addresses the translation of out-of-vocabulary words by backing off to a dictionary. In this paper, we introduce a simpler and more effective approach, making the NMT model capable of open-vocabulary translation by encoding rare and unknown words as sequences of subword units. This is based on the intuition that various word classes are translatable via smaller units than words, for instance names (via character copying or transliteration), compounds (via compositional translation), and cognates and loanwords (via phonological and morphological transformations). We discuss the suitability of different word segmentation techniques, including simple character n-gram models and a segmentation based on the byte pair encoding compression algorithm, and empirically show that subword models improve over a back-off dictionary baseline for the WMT 15 translation tasks English-German and English-Russian by 1.1 and 1.3 BLEU, respectively.",
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 567,
          "function_name": "tokenization",
          "code": "text(\"To get a feel for how tokenizers work, play with this \"), link(title=\"interactive site\", url=\"https://tiktokenizer.vercel.app/?encoder=gpt2\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "To get a feel for how tokenizers work, play with this ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "interactive site",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://tiktokenizer.vercel.app/?encoder=gpt2",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 568,
          "function_name": "tokenization",
          "code": "tokenzier = tiktoken.get_encoding(\"gpt2\")"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 569,
          "function_name": "tokenization",
          "code": "gpt2_indices = tokenzier.encode(string)  # @inspect gpt2_indices"
        }
      ],
      "env": {
        "gpt2_indices": {
          "type": "list",
          "contents": [
            {
              "type": "int",
              "contents": 1169,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 3797,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 287,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 262,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 6877,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        },
        {
          "path": "linear_classification.py",
          "line_number": 571,
          "function_name": "tokenization",
          "code": "return vocab, indices"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 512,
          "function_name": "representing_text",
          "code": "vocab, indices = tokenization()  # @inspect indices"
        }
      ],
      "env": {
        "indices": {
          "type": "list",
          "contents": [
            {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 1,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 2,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 0,
              "dtype": null,
              "shape": null
            },
            {
              "type": "int",
              "contents": 3,
              "dtype": null,
              "shape": null
            }
          ],
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 514,
          "function_name": "representing_text",
          "code": "text(\"### Interpretation\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### Interpretation",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 515,
          "function_name": "representing_text",
          "code": "text(\"Represent each index as a one-hot vector.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Represent each index as a one-hot vector.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 516,
          "function_name": "representing_text",
          "code": "index = indices[4]  # @inspect index"
        }
      ],
      "env": {
        "index": {
          "type": "int",
          "contents": 3,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 517,
          "function_name": "representing_text",
          "code": "vector = np.eye(len(vocab))[index]  # @inspect vector @stepover"
        }
      ],
      "env": {
        "vector": {
          "type": "numpy.ndarray",
          "contents": [
            0.0,
            0.0,
            0.0,
            1.0
          ],
          "dtype": "float64",
          "shape": [
            4
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 519,
          "function_name": "representing_text",
          "code": "text(\"So the string is represented as a sequence of vectors, or a matrix:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "So the string is represented as a sequence of vectors, or a matrix:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 520,
          "function_name": "representing_text",
          "code": "matrix = np.eye(len(vocab))[indices]  # @inspect matrix @stepover @clear index vector"
        }
      ],
      "env": {
        "matrix": {
          "type": "numpy.ndarray",
          "contents": [
            [
              1.0,
              0.0,
              0.0,
              0.0
            ],
            [
              0.0,
              1.0,
              0.0,
              0.0
            ],
            [
              0.0,
              0.0,
              1.0,
              0.0
            ],
            [
              1.0,
              0.0,
              0.0,
              0.0
            ],
            [
              0.0,
              0.0,
              0.0,
              1.0
            ]
          ],
          "dtype": "float64",
          "shape": [
            5,
            4
          ]
        },
        "index": null,
        "vector": null
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 522,
          "function_name": "representing_text",
          "code": "text(\"### Operations\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### Operations",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 523,
          "function_name": "representing_text",
          "code": "text(\"In practice, we store the indices and not the one-hot vectors to save memory.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In practice, we store the indices and not the one-hot vectors to save memory.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 524,
          "function_name": "representing_text",
          "code": "text(\"We can operate directly using the indices.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We can operate directly using the indices.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 525,
          "function_name": "representing_text",
          "code": "text(\"Suppose we want to take the dot product of each position with `w`.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Suppose we want to take the dot product of each position with `w`.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 526,
          "function_name": "representing_text",
          "code": "np.random.seed(1)"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 527,
          "function_name": "representing_text",
          "code": "w = np.random.randn(len(vocab))  # @inspect w @stepover"
        }
      ],
      "env": {
        "w": {
          "type": "numpy.ndarray",
          "contents": [
            1.6243453636632417,
            -0.6117564136500754,
            -0.5281717522634557,
            -1.0729686221561705
          ],
          "dtype": "float64",
          "shape": [
            4
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 530,
          "function_name": "representing_text",
          "code": "y = matrix @ w  # @inspect y"
        }
      ],
      "env": {
        "y": {
          "type": "numpy.ndarray",
          "contents": [
            1.6243453636632417,
            -0.6117564136500754,
            -0.5281717522634557,
            1.6243453636632417,
            -1.0729686221561705
          ],
          "dtype": "float64",
          "shape": [
            5
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 533,
          "function_name": "representing_text",
          "code": "y_index = w[indices]  # @inspect y_index"
        }
      ],
      "env": {
        "y_index": {
          "type": "numpy.ndarray",
          "contents": [
            1.6243453636632417,
            -0.6117564136500754,
            -0.5281717522634557,
            1.6243453636632417,
            -1.0729686221561705
          ],
          "dtype": "float64",
          "shape": [
            5
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 535,
          "function_name": "representing_text",
          "code": "text(\"### Bag of words representation\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### Bag of words representation",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 536,
          "function_name": "representing_text",
          "code": "text(\"Represent each token as a (one-hot) vector.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Represent each token as a (one-hot) vector.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 537,
          "function_name": "representing_text",
          "code": "text(\"Represent each text as the average of the token vectors.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Represent each text as the average of the token vectors.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 538,
          "function_name": "representing_text",
          "code": "bow = reduce(matrix, \"pos vocab -> vocab\", \"mean\")  # @inspect bow"
        }
      ],
      "env": {
        "bow": {
          "type": "numpy.ndarray",
          "contents": [
            0.4,
            0.2,
            0.2,
            0.2
          ],
          "dtype": "float64",
          "shape": [
            4
          ]
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 539,
          "function_name": "representing_text",
          "code": "text(\"Then we can operate on this fixed-dimensional vector.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Then we can operate on this fixed-dimensional vector.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 540,
          "function_name": "representing_text",
          "code": "y_bow = bow @ w  # @inspect y_bow"
        }
      ],
      "env": {
        "y_bow": {
          "type": "numpy.float64",
          "contents": 0.2071587878513564,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 542,
          "function_name": "representing_text",
          "code": "text(\"Equivalently, we can operate directly on the indices:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Equivalently, we can operate directly on the indices:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 543,
          "function_name": "representing_text",
          "code": "y_bow_index = np.mean(w[indices])  # @inspect y_bow_index"
        }
      ],
      "env": {
        "y_bow_index": {
          "type": "numpy.float64",
          "contents": 0.20715878785135633,
          "dtype": null,
          "shape": null
        }
      },
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 545,
          "function_name": "representing_text",
          "code": "text(\"Bag of words:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Bag of words:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 546,
          "function_name": "representing_text",
          "code": "text(\"- Pro: doesn't depend on the length of the text\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Pro: doesn't depend on the length of the text",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 547,
          "function_name": "representing_text",
          "code": "text(\"- Con: doesn't pay attention to word order (*dog bites man* = *man bites dog*)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Con: doesn't pay attention to word order (*dog bites man* = *man bites dog*)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 549,
          "function_name": "representing_text",
          "code": "text(\"Summary\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 550,
          "function_name": "representing_text",
          "code": "text(\"- Problem: convert strings to tensors for machine learning\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Problem: convert strings to tensors for machine learning",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 551,
          "function_name": "representing_text",
          "code": "text(\"- Solution: tokenization + one-hot encoding\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Solution: tokenization + one-hot encoding",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 552,
          "function_name": "representing_text",
          "code": "text(\"- Tokenization: split strings into words and build up a vocabulary (string \u2194 index)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Tokenization: split strings into words and build up a vocabulary (string \u2194 index)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        },
        {
          "path": "linear_classification.py",
          "line_number": 553,
          "function_name": "representing_text",
          "code": "text(\"- Mathematically work with one-hot vectors; in code, work with indices\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Mathematically work with one-hot vectors; in code, work with indices",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 33,
          "function_name": "main",
          "code": "representing_text()"
        }
      ],
      "env": {},
      "renderings": []
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 35,
          "function_name": "main",
          "code": "text(\"Summary\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 36,
          "function_name": "main",
          "code": "text(\"- Linear classification: linear functions \u2192 one of K choices\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Linear classification: linear functions \u2192 one of K choices",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 37,
          "function_name": "main",
          "code": "text(\"- Zero-one loss: leads to zero-gradients almost everywhere\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Zero-one loss: leads to zero-gradients almost everywhere",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 38,
          "function_name": "main",
          "code": "text(\"- Logistic loss: classifier outputs probabilities, leads to non-zero gradients\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Logistic loss: classifier outputs probabilities, leads to non-zero gradients",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 39,
          "function_name": "main",
          "code": "text(\"- Multiclass classification: one logit per class, convert to probabilities with softmax\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Multiclass classification: one logit per class, convert to probabilities with softmax",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    },
    {
      "stack": [
        {
          "path": "linear_classification.py",
          "line_number": 40,
          "function_name": "main",
          "code": "text(\"- Representing text as tensors: tokenize + convert tokens to indices (one-hot vectors)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Representing text as tensors: tokenize + convert tokens to indices (one-hot vectors)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ]
    }
  ]
}